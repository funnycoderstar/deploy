(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{341:function(t,a,s){"use strict";s.r(a);var n=s(33),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Iterator")]),t._v("(迭代器)")]),t._v(" "),s("li",[s("code",[t._v("for...of")])])]),t._v(" "),s("p",[s("code",[t._v("for...of")]),t._v(" 是ES6引入用来遍历所有数据结构的统一方法。")]),t._v(" "),s("p",[s("strong",[t._v("这里的所有数据结构只指具有"),s("code",[t._v("iterator接口")]),t._v("的数据。一个数据只要部署了 "),s("code",[t._v("Symbol.iterator")]),t._v("，就具有了 "),s("code",[t._v("iterator")]),t._v("接口，就可以使用 "),s("code",[t._v("for...of")]),t._v(" 循环遍历它的成员。也就是说，for...of循环内部调用的数据结构为"),s("code",[t._v("Symbol.iterator")]),t._v("方法。")])]),t._v(" "),s("p",[s("code",[t._v("for...of")]),t._v("循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如"),s("code",[t._v("arguments")]),t._v("对象、"),s("code",[t._v("DOM NodeList")]),t._v(" 对象）、 "),s("code",[t._v("Generator")]),t._v(" 对象，以及字符串。也就是说上面提到的这些数据类型原生就具备了 "),s("code",[t._v("iterator")]),t._v("接口。")]),t._v(" "),s("blockquote",[s("p",[t._v("所以千万不要错误地认为 "),s("code",[t._v("for...of")]),t._v(" 只是用来遍历数组的。")])]),t._v(" "),s("h2",{attrs:{id:"iterator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iterator"}},[t._v("#")]),t._v(" Iterator")]),t._v(" "),s("h3",{attrs:{id:"为什么引入-iterator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么引入-iterator"}},[t._v("#")]),t._v(" 为什么引入 Iterator")]),t._v(" "),s("p",[t._v("为什么会有 会引入 "),s("code",[t._v("Iterator")]),t._v(" 呢，是因为 ES6添加了 "),s("code",[t._v("Map")]),t._v(", "),s("code",[t._v("Set")]),t._v("，再加上原有的数组，对象，一共就是4种表示 “集合”的数据结构。没有 "),s("code",[t._v("Map")]),t._v("和 "),s("code",[t._v("Set")]),t._v("之前，我们都知道 "),s("code",[t._v("for...in")]),t._v("一般是常用来遍历对象，"),s("code",[t._v("for")]),t._v("循环\n常用来遍历数据，现在引入的 "),s("code",[t._v("Map")]),t._v(", "),s("code",[t._v("Set")]),t._v("，难道还要单独为他们引入适合用来遍历各自的方法么。聪明的你肯定能想到，我们能不能提供一个方法来遍历所有的数据结构呢，这个方法能遍历所有的数据结构，一定是这些数据结构要有一些通用的一些特征，然后这个公共的方法会根据这些通用的特征去进行遍历。")]),t._v(" "),s("p",[s("code",[t._v("Iterator")]),t._v("就可以理解为是上面我们所说的通用的特征。")]),t._v(" "),s("p",[t._v("我们来看看官方对 "),s("code",[t._v("Iterator")]),t._v(" 是怎么解释的：迭代器（"),s("code",[t._v("Iterator")]),t._v("）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 "),s("code",[t._v("Iterator")]),t._v(" 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。通俗点理解就是为了解决不同数据结构遍历的问题，引入了"),s("code",[t._v("Iterator")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"iterator-是什么样子的呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iterator-是什么样子的呢"}},[t._v("#")]),t._v(" Iterator 是什么样子的呢")]),t._v(" "),s("p",[t._v("我们来模拟实现以下：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeIterator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nextIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nextIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n            value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nextIndex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            done"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            done"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" it "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeIterator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// { value: "a", done: false }')]),t._v("\nit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// { value: "b", done: false }')]),t._v("\nit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { value: undefined, done: true }")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("简单解释一下上面 "),s("code",[t._v("array[nextIndex++]")]),t._v("是什么意思，\n假如"),s("code",[t._v("nextIndex")]),t._v("当前为0，则 "),s("code",[t._v("nextIndex++")]),t._v("的意思为1.返回0 2. 值自增（"),s("code",[t._v("nextIndex")]),t._v("现在为1）。之前遇到一道面试题就是考察 "),s("code",[t._v("i++")]),t._v("和 "),s("code",[t._v("++i")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("输出什么？")]),t._v(" "),s("p",[t._v("答案是： 0, 2, 2;")]),t._v(" "),s("p",[t._v("一元后自增运算符 ++：")]),t._v(" "),s("ol",[s("li",[t._v("返回值（返回 0）")]),t._v(" "),s("li",[t._v("值自增（number 现在是 1）")])]),t._v(" "),s("p",[t._v("一元前自增运算符 ++：")]),t._v(" "),s("ol",[s("li",[t._v("自增（number 现在是 2）")]),t._v(" "),s("li",[t._v("返回值（返回 2）")])]),t._v(" "),s("p",[t._v("结果是 0 2 2.")]),t._v(" "),s("p",[t._v("好了，\b接着来看 "),s("code",[t._v("Iterator")]),t._v(" 的整个的遍历过程：")]),t._v(" "),s("ol",[s("li",[t._v("创建一个指针对象（上面代码中的"),s("code",[t._v("it")]),t._v("），指向当前数据的起始位置")]),t._v(" "),s("li",[t._v("第一次调用指针对象的"),s("code",[t._v("next")]),t._v("方法，可以将指针指向数据结构的第一个成员（上面代码中的"),s("code",[t._v("a")]),t._v("）。")]),t._v(" "),s("li",[t._v("第二次调用指针对象的"),s("code",[t._v("next")]),t._v("方法，可以将指针指向数据结构的第二个成员（上面代码中的"),s("code",[t._v("b")]),t._v("）。")]),t._v(" "),s("li",[t._v("不断调用指针对象的"),s("code",[t._v("next")]),t._v("方法，直到它指向数据结构的结束位置")])]),t._v(" "),s("p",[t._v("每一次调用next方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含"),s("code",[t._v("value")]),t._v("和"),s("code",[t._v("done")]),t._v("两个属性的对象。其中，"),s("code",[t._v("value")]),t._v("属性是当前成员的值，"),s("code",[t._v("done")]),t._v("属性是一个布尔值，表示遍历是否结束,即是否要有必要再一次调用。")]),t._v(" "),s("p",[s("code",[t._v("Iterator")]),t._v("的特点")]),t._v(" "),s("ul",[s("li",[t._v("各种数据结构，提供一个统一的、简便的访问接口")]),t._v(" "),s("li",[t._v("使得数据结构的成员能够按某种次序排列")]),t._v(" "),s("li",[t._v("ES6 创造了一种新的遍历命令"),s("code",[t._v("for...of")]),t._v("循环，"),s("code",[t._v("Iterator")]),t._v(" 接口主要供"),s("code",[t._v("for...of")]),t._v("消费")])]),t._v(" "),s("h3",{attrs:{id:"默认-iterator-接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#默认-iterator-接口"}},[t._v("#")]),t._v(" 默认 Iterator 接口")]),t._v(" "),s("p",[t._v("部署在 "),s("code",[t._v("Symbol.iterator")]),t._v(" 属性，或者说，一个数据结构只要具有 "),s("code",[t._v("Symbol.iterator")]),t._v(' 属性，就认为是"可遍历的"。')]),t._v(" "),s("p",[t._v("原生具备 Iterator 接口的数据结构如下。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Array")])]),t._v(" "),s("li",[s("code",[t._v("Map")])]),t._v(" "),s("li",[s("code",[t._v("Set")])]),t._v(" "),s("li",[s("code",[t._v("String")]),t._v("：字符串是一个类似数组的对象，也原生具有 Iterator 接口。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypedArray"),s("OutboundLink")],1),t._v("：\n"),s("ul",[s("li",[t._v("通俗理解：ArrayBuffer是一片内存空间，不能直接引用里面的数据，可以通过TypedArray类型引用，用户只能通过TypedArray使用这片内存，不能直接通过Array\bBuffer使用这片内存")])])]),t._v(" "),s("li",[t._v("函数的 "),s("code",[t._v("arguments")]),t._v(" 对象")]),t._v(" "),s("li",[s("code",[t._v("NodeList")]),t._v(" 对象")])]),t._v(" "),s("p",[t._v("除了原生具备"),s("code",[t._v("Iterator")]),t._v("接口\b的数据之外，其他数据结构（主要是对象）的 "),s("code",[t._v("Iterator")]),t._v(" 接口，都需要自己在"),s("code",[t._v("Symbol.iterator")]),t._v("属性上面部署，这样才会被"),s("code",[t._v("for...of")]),t._v("循环遍历。")]),t._v(" "),s("p",[s("strong",[t._v("对象（"),s("code",[t._v("Object")]),t._v("）之所以没有默认部署 "),s("code",[t._v("Iterator")]),t._v(" 接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动指定。本质上，迭代器是一种线性处理，对于任何非线性的数据结构，部署迭代器接口，就等于部署一种线性转换。不过，严格地说，对象部署迭代器接口并不是很必要，因为这时对象实际上被当作 "),s("code",[t._v("Map")]),t._v(" 结构使用，"),s("code",[t._v("ES5")]),t._v(" 没有 "),s("code",[t._v("Map")]),t._v(" 结构，而 "),s("code",[t._v("ES6")]),t._v(" 原生提供了。")])]),t._v(" "),s("p",[t._v("一个对象如果要具备可被"),s("code",[t._v("for...of")]),t._v("循环调用的 "),s("code",[t._v("Iterator")]),t._v(" 接口，就必须在"),s("code",[t._v("Symbol.iterator")]),t._v("的属性上部署迭代器生成方法（原型链上的对象具有该方法也可）。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RangeIterator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        done"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n        value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" value\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      done"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RangeIterator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0, 1, 2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("如果"),s("code",[t._v("Symbol.iterator")]),t._v("方法对应的不是迭代器生成函数（即会返回一个迭代器对象），解释引擎将会报错。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeError: Result of the Symbol.iterator method is not an object")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("字符串是一个类似数组的对象，也原生具有 Iterator 接口。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" someString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" someString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "function"')]),t._v("\n")])])]),s("h3",{attrs:{id:"调用iterator的场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调用iterator的场景"}},[t._v("#")]),t._v(" 调用Iterator的场景")]),t._v(" "),s("p",[t._v("除了 "),s("code",[t._v("for...of")]),t._v("，还有下面几个场景")]),t._v(" "),s("ul",[s("li",[t._v("解构赋值：对数组和 Set 结构进行解构赋值时，会默认调用Symbol.iterator方法。")]),t._v(" "),s("li",[t._v("扩展运算符：扩展运算符内部就调用 Iterator 接口。")]),t._v(" "),s("li",[s("code",[t._v("yield*")]),t._v("："),s("code",[t._v("yield*")]),t._v("后面跟的是一个可遍历的结构，它会调用该结构的迭代器接口。")]),t._v(" "),s("li",[t._v("接受数组作为参数的场合\n"),s("ul",[s("li",[s("code",[t._v("Array.from()")])]),t._v(" "),s("li",[s("code",[t._v("Map(), Set(), WeakMap(), WeakSet()（比如new Map([['a',1],['b',2]])）")])]),t._v(" "),s("li",[s("code",[t._v("Promise.all()")])]),t._v(" "),s("li",[s("code",[t._v("Promise.race()")])])])])]),t._v(" "),s("h3",{attrs:{id:"iterator的实现思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iterator的实现思想"}},[t._v("#")]),t._v(" Iterator的实现思想")]),t._v(" "),s("p",[t._v("看到"),s("code",[t._v("next")]),t._v("这个你有没有感到很\b\b熟悉，\b链表中 每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（即next属性）组成。是不是很类似，不错，"),s("code",[t._v("Iterator")]),t._v("的实现思想就是来源于单向链表。")]),t._v(" "),s("p",[t._v("下面来\b简单介绍一下单向链表。")]),t._v(" "),s("h3",{attrs:{id:"单向链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单向链表"}},[t._v("#")]),t._v(" 单向链表")]),t._v(" "),s("p",[t._v("链表存储有序的元素集合，但不同于数组，\b链表中每个元素在内存中并不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的节点（也称为指针或链接）组成，下图展示了一个链表的结构。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1583417540981.png",alt:"链表"}})]),t._v(" "),s("p",[t._v("和数组相比较，链表的一个好处已\b在于，添加或移除元素的时候不需要移动其他元素。然而，链表需要指针，因此实现链表时需要额外注意。数组的另一个细节是可以直接访问\b任何位置的任何元素，而"),s("strong",[t._v("想要访问链表中间的一个元素，需要从起点（表头）开始迭代列表知道找到所有元素")]),t._v("。")]),t._v(" "),s("p",[t._v("现实生活中也有一些链表的例子，比如说寻宝游戏。你有\b一条线索，这条线索是指向寻找下一条线索的地点的指针。你顺着这条链接去到下一个地点，得到另一条指向再下\b一处的线索，得到列表中间的线索的唯一\b办法，就是从起点（第一条\b线\b索）顺着列表寻找。")]),t._v(" "),s("blockquote",[s("p",[t._v("具体怎么\b实现一个单向链表，这里就不展开讲了，推荐看 "),s("code",[t._v("《学习JavaScript数据\b结构与算法》（第二版）")]),t._v("。")])]),t._v(" "),s("h3",{attrs:{id:"for-of-循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-of-循环"}},[t._v("#")]),t._v(" for...of 循环")]),t._v(" "),s("p",[t._v("关于"),s("code",[t._v("for...o\bf")]),t._v("的原理\b，相信你看完上面的内容已经掌握的差不多了，\b\b现在我们以数组为例，说一下，"),s("code",[t._v("for...of")]),t._v(" 和之前我们经常使用的其他循环方式有\b什么不同。")]),t._v(" "),s("p",[t._v("最原始的写法就是"),s("code",[t._v("for")]),t._v("循环。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" myArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这种写法比较麻烦，因此数组提供内置的"),s("code",[t._v("forEach")]),t._v("方法。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("myArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这种写法的问题在于，无法中途跳出"),s("code",[t._v("forEach")]),t._v("循环，"),s("code",[t._v("break")]),t._v("命令或"),s("code",[t._v("return")]),t._v("命令都不能奏效。")]),t._v(" "),s("p",[s("code",[t._v("for...in")]),t._v("循环可以遍历数组的键名。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'red'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'green'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'blue'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '0', '1', '2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("for...in")]),t._v("循环有几个缺点:")]),t._v(" "),s("ul",[s("li",[t._v("数组的键名是数字，但是"),s("code",[t._v("for...in")]),t._v("循环是以字符串作为键名“0”、“1”、“2”等等。")]),t._v(" "),s("li",[s("code",[t._v("for...in")]),t._v("循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键")]),t._v(" "),s("li",[t._v("某些情况下，"),s("code",[t._v("for...in")]),t._v("循环会以任意顺序遍历键名。")])]),t._v(" "),s("p",[s("code",[t._v("for...in")]),t._v("循环主要是为遍历对象而设计的，不适用于遍历数组。")]),t._v(" "),s("p",[t._v("\b"),s("code",[t._v("for...of")]),t._v("和上面几种做法（"),s("code",[t._v("for\b")]),t._v("循环，"),s("code",[t._v("forEach")]),t._v(", "),s("code",[t._v("for...in")]),t._v("）相比，有一些显著的\b优点")]),t._v(" "),s("ul",[s("li",[t._v("有着同"),s("code",[t._v("for...in")]),t._v("一样的简洁语法，但是没有"),s("code",[t._v("for...in")]),t._v("那些缺点。")]),t._v(" "),s("li",[t._v("不同于"),s("code",[t._v("forEach")]),t._v("方法，它可以与"),s("code",[t._v("break")]),t._v("、"),s("code",[t._v("continue")]),t._v("和"),s("code",[t._v("return")]),t._v("配合使用。")]),t._v(" "),s("li",[t._v("提供了遍历所有数据结构的统一操作接口。")])]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("for...of")]),t._v("可以用来遍历所有具有"),s("code",[t._v("iterator")]),t._v(" 接口的数据结构。（一个数据结构只要部署了"),s("code",[t._v("Symbol.iterator")]),t._v("属性，就被视为具有 "),s("code",[t._v("iterator")]),t._v(" 接口）。\b也就是说 "),s("code",[t._v("for...of")]),t._v("循环内部调用是数据结构的 "),s("code",[t._v("Symbol.iterator")])]),t._v(" "),s("li",[s("code",[t._v("iterator")]),t._v("\b的实现思想来源于 "),s("code",[t._v("单向链表")])]),t._v(" "),s("li",[s("code",[t._v("forEach\b")]),t._v("循环中无法用"),s("code",[t._v("break")]),t._v("命令或"),s("code",[t._v("return")]),t._v("命令终止。而"),s("code",[t._v("for...of")]),t._v("可以。")]),t._v(" "),s("li",[s("code",[t._v("for...in")]),t._v("遍历数组遍历的是键名，\b所有适合遍历\b对象，"),s("code",[t._v("for...of")]),t._v("遍历数组遍历的是\b\b键值。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);