(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{403:function(e,t,a){"use strict";a.r(t);var s=a(33),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[e._v("#")]),e._v(" 事件循环")]),e._v(" "),a("p",[e._v("题纲")]),e._v(" "),a("h3",{attrs:{id:"_1-javascript是单线程，非阻塞的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-javascript是单线程，非阻塞的"}},[e._v("#")]),e._v(" 1. JavaScript是单线程，非阻塞的")]),e._v(" "),a("p",[e._v("单线程：用途是与DOM交互，即使有web worker，它有很多限制，受主线程控制，是主线程的子线程\n非阻塞：通过 event loop 实现。")]),e._v(" "),a("h3",{attrs:{id:"_2-浏览器的事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-浏览器的事件循环"}},[e._v("#")]),e._v(" 2. 浏览器的事件循环")]),e._v(" "),a("h4",{attrs:{id:"执行栈和事件队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行栈和事件队列"}},[e._v("#")]),e._v(" 执行栈和事件队列")]),e._v(" "),a("p",[e._v("执行栈: 同步代码的执行，按照顺序添加到执行栈中\n事件队列: 异步代码的执行，遇到异步事件不会等待它返回结果，而是将这个事件挂起，继续执行执行栈中的其他任务。当异步事件返回结果，将它放到事件队列中，被放入事件队列不会立刻执行起回调，而是等待当前执行栈中所有任务都执行完毕，主线程空闲状态，主线程会去查找事件队列中是否有任务，如果有，则取出排在第一位的事件，并把这个事件对应的回调放到执行栈中，然后执行其中的同步代码。")]),e._v(" "),a("h4",{attrs:{id:"宏任务和微任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宏任务和微任务"}},[e._v("#")]),e._v(" 宏任务和微任务")]),e._v(" "),a("p",[e._v("不同的异步任务被分为：宏任务和微任务\n宏任务：")]),e._v(" "),a("ul",[a("li",[e._v("setTimeout()")]),e._v(" "),a("li",[e._v("setInterval()\n微任务:")]),e._v(" "),a("li",[e._v("new Promise()")]),e._v(" "),a("li",[e._v("new MutaionObserver()")])]),e._v(" "),a("p",[e._v("异步任务的返回结果会被放到一个任务队列中，根据异步事件的类型，这个事件实际上会被放到对应的宏任务和微任务队列中去。\n在当前执行栈为空时，主线程会查看微任务队列是否有事件存在")]),e._v(" "),a("ul",[a("li",[e._v("存在，依次执行队列中的事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的事件，把当前的回调加到当前指向栈。")]),e._v(" "),a("li",[e._v("如果不存在，那么再去宏任务队列中取出一个事件并把对应的回到加入当前执行栈；")])]),e._v(" "),a("p",[e._v("当前执行栈执行完毕后时会立刻处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行。")]),e._v(" "),a("h3",{attrs:{id:"node环境下的事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node环境下的事件循环"}},[e._v("#")]),e._v(" node环境下的事件循环")]),e._v(" "),a("h4",{attrs:{id:"和浏览器环境有何不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和浏览器环境有何不同"}},[e._v("#")]),e._v(" 和浏览器环境有何不同")]),e._v(" "),a("p",[e._v("表现出的状态与浏览器大致相同。不同的是 node 中有一套自己的模型。node 中事件循环的实现依赖 libuv 引擎。")]),e._v(" "),a("h4",{attrs:{id:"事件循环模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环模型"}},[e._v("#")]),e._v(" 事件循环模型")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[e._v("┌───────────────────────┐\n┌─"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("│        timers         │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n│  │     "),a("span",{pre:!0,attrs:{class:"token constant"}},[e._v("I")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[e._v("O")]),e._v(" callbacks     │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n│  │     idle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" prepare     │\n│  └──────────┬────────────┘      ┌───────────────┐\n│  ┌──────────┴────────────┐      │   incoming"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("   │\n│  │         poll          │"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("──connections───     │\n│  └──────────┬────────────┘      │   data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" etc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("  │\n│  ┌──────────┴────────────┐      └───────────────┘\n│  │        check          │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n└──┤    close callbacks    │\n   └───────────────────────┘\n")])])]),a("h4",{attrs:{id:"事件循环各阶段详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环各阶段详解"}},[e._v("#")]),e._v(" 事件循环各阶段详解")]),e._v(" "),a("p",[e._v("node中事件循环的顺序\n外部输入数据 --\x3e 轮询阶段（poll） --\x3e 检查阶段(check) --\x3e 关闭事件回调阶段(close callback) --\x3e 定时器检查阶段(timer) --\x3e I/O 事件回调阶段(I/O callbacks) --\x3e 闲置阶段(idle, prepare) --\x3e 轮询阶段...")]),e._v(" "),a("p",[e._v("这些阶段大致的功能如下：")]),e._v(" "),a("ul",[a("li",[e._v("定时器检测阶段(timers): 这个阶段执行定时器队列中的回调如 setTimeout() 和 setInterval()。")]),e._v(" "),a("li",[e._v("I/O事件回调阶段(I/O callbacks): 这个阶段执行几乎所有的回调。但是不包括close事件，定时器和setImmediate()的回调。")]),e._v(" "),a("li",[e._v("闲置阶段(idle, prepare): 这个阶段仅在内部使用，可以不必理会")]),e._v(" "),a("li",[e._v("轮询阶段(poll): 等待新的I/O事件，node在一些特殊情况下会阻塞在这里。")]),e._v(" "),a("li",[e._v("检查阶段(check): setImmediate()的回调会在这个阶段执行。")]),e._v(" "),a("li",[e._v("关闭事件回调阶段(close callbacks): 例如socket.on('close', ...)这种close事件的回调")])]),e._v(" "),a("p",[e._v("poll：\n这个阶段是轮询时间，用于等待还未返回的 I/O 事件，比如服务器的回应、用户移动鼠标等等。\n这个阶段的时间会比较长。如果没有其他异步任务要处理（比如到期的定时器），会一直停留在这个阶段，等待 I/O 请求返回结果。\ncheck:\n该阶段执行setImmediate()的回调函数。")]),e._v(" "),a("p",[e._v("close:\n该阶段执行关闭请求的回调函数，比如socket.on('close', ...)。")]),e._v(" "),a("p",[e._v("timer阶段:\n这个是定时器阶段，处理setTimeout()和setInterval()的回调函数。进入这个阶段后，主线程会检查一下当前时间，是否满足定时器的条件。如果满足就执行回调函数，否则就离开这个阶段。")]),e._v(" "),a("p",[e._v("I/O callback阶段：\n除了以下的回调函数，其他都在这个阶段执行：")]),e._v(" "),a("ul",[a("li",[e._v("setTimeout()和setInterval()的回调函数")]),e._v(" "),a("li",[e._v("setImmediate()的回调函数")]),e._v(" "),a("li",[e._v("用于关闭请求的回调函数，比如socket.on('close', ...)")])]),e._v(" "),a("h4",{attrs:{id:"promise-nexttick，-settimeout-setimmediate的使用场景和区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-nexttick，-settimeout-setimmediate的使用场景和区别"}},[e._v("#")]),e._v(" Promise.nextTick， setTimeout, setImmediate的使用场景和区别")]),e._v(" "),a("p",[e._v("Promise.nextTick\nprocess.nextTick 是一个独立于 eventLoop 的任务队列。\n在每一个 eventLoop 阶段完成后会去检查 nextTick 队列，如果里面有任务，会让这部分任务优先于微任务执行。\n是所有异步任务中最快执行的。")]),e._v(" "),a("p",[e._v("setTimeout：\nsetTimeout()方法是定义一个回调，并且希望这个回调在我们所指定的时间间隔后第一时间去执行。")]),e._v(" "),a("p",[e._v("setImmediate：\nsetImmediate()方法从意义上将是立刻执行的意思，但是实际上它却是在一个固定的阶段才会执行回调，即poll阶段之后。")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/33058983",target:"_blank",rel:"noopener noreferrer"}},[e._v("详解JavaScript中的Event Loop（事件循环）机制"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/10/event-loop.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript 运行机制详解：再谈Event Loop"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/node-event-loop.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node 定时器详解"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5e5c7f6c518825491b11ce93",target:"_blank",rel:"noopener noreferrer"}},[e._v("面试题：说说事件循环机制(满分答案来了)"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);