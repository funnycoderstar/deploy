(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{184:function(a,t,e){"use strict";e.r(t);var s=e(0),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"树的数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#树的数据结构","aria-hidden":"true"}},[a._v("#")]),a._v(" 树的数据结构")]),a._v(" "),e("blockquote",[e("p",[a._v("本篇文章主要会介绍树相关的基础知识和相关概念")])]),a._v(" "),e("p",[a._v("树是一种分层数据结构的抽象模型。现实生活中最常见的树的例子是家谱，或是公司的组织架构图，如下图所示：")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1556116856003.png?width=1120&height=674&imageView2/3/",alt:"img"}})]),a._v(" "),e("h2",{attrs:{id:"树的相关术语"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#树的相关术语","aria-hidden":"true"}},[a._v("#")]),a._v(" 树的相关术语")]),a._v(" "),e("p",[a._v("一个树结构包含一系列存在父子关系的节点。每个节点都有一个父节点（除了顶部的第一个节点）以及零个或多个子节点：")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1556117092594.png?width=1156&height=662&imageView2/3/",alt:"tree"}})]),a._v(" "),e("p",[a._v("位于树顶部的节点叫做"),e("strong",[a._v("根节点")]),a._v("。它没有父节点(11)。树中的每个元素都叫做"),e("strong",[a._v("节点")]),a._v("，节点分为内部节点和外部节点。至少有一个子节点的节点称为"),e("strong",[a._v("内部节点")]),a._v("(7, 5, 9, 15, 13 和20是内部节点)。没有子元素的节点称为外部节点或"),e("strong",[a._v("叶节点")]),a._v("(3, 6, 8, 10, 12, 14, 18和25都是叶节点)。")]),a._v(" "),e("p",[a._v("一个节点可以有祖先和后代。一个节点（除了根节点）的祖先包括父节点，祖父节点，曾祖父节点等。一个节点的后代包括子节点，孙子节点，曾孙节点等。例如，节点5的祖先节点有节点7和节点11，后代节点有节点3和节点6。")]),a._v(" "),e("p",[a._v("**树的子树：**子树由节点和它的后代构成。例如，节点13，12和14构成了上图树种的一颗子树。")]),a._v(" "),e("p",[a._v("**节点的深度：**这是节点的另一个属性， 节点的深度取决于他的祖先节点的数量。比如，节点3有3个祖先节点(5， 7 和11)，它的深度为3。")]),a._v(" "),e("p",[a._v("**树的高度：**树的高度取决于所以节点深度的最大值。一颗树叶可以被分解成层级。根节点在第0层，它的子节点在第1层，以此类推。上图中的树的高度为3（最大高度已在图中表示--第3层）")]),a._v(" "),e("h2",{attrs:{id:"二叉树和二叉搜索树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉树和二叉搜索树","aria-hidden":"true"}},[a._v("#")]),a._v(" 二叉树和二叉搜索树")]),a._v(" "),e("p",[e("strong",[a._v("二叉树")]),a._v("中的节点最多只能有两个子节点：一个是左侧子节点，另一个是右侧子节点。这些定义有助于我们写出更高效的向、从树种插入，查找和删除节点的算法。二叉树而计算机科学中的应用非常广泛。")]),a._v(" "),e("p",[a._v("**二叉搜索树(BST)**是二叉树的一种，但是它只允许你在左侧节点存储（比父节点）值小的值，在右侧节点存储（比父节点）大（或者等于）的值。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1556119868152.png?width=1142&height=552&imageView2/3/",alt:"二叉搜索树"}})]),a._v(" "),e("h2",{attrs:{id:"平衡二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树","aria-hidden":"true"}},[a._v("#")]),a._v(" 平衡二叉树")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1556121206687.png?width=312&height=221&imageView2/3/",alt:"AVL"}})]),a._v(" "),e("h2",{attrs:{id:"对称二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对称二叉树","aria-hidden":"true"}},[a._v("#")]),a._v(" 对称二叉树")]),a._v(" "),e("h2",{attrs:{id:"红黑树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#红黑树","aria-hidden":"true"}},[a._v("#")]),a._v(" 红黑树")]),a._v(" "),e("h2",{attrs:{id:"树的实际应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#树的实际应用","aria-hidden":"true"}},[a._v("#")]),a._v(" 树的实际应用")])])}),[],!1,null,null,null);t.default=r.exports}}]);