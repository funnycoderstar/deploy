<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>详解 Cookie，Session，Token</title>
      <link href="/2019/06/15/2019-06-15/"/>
      <url>/2019/06/15/2019-06-15/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="无状态的HTTP协议"><a href="#无状态的HTTP协议" class="headerlink" title="无状态的HTTP协议"></a>无状态的HTTP协议</h2><p>很久很久之前， Web基本都是文档的浏览而已。既然是浏览， 作为服务器， 不需要记录在某一段时间里都浏览了什么文档， 每次请求都是一个新的HTTP协议，就是请求加响应。不用记录谁刚刚发了HTTP请求， 每次请求都是全新的</p><h2 id="如何管理会话"><a href="#如何管理会话" class="headerlink" title="如何管理会话"></a>如何管理会话</h2><p>随着交互式Web应用的兴起， 像在线购物网站，需要登录的网站等，马上面临一个问题，就是要管理回话，记住那些人登录过系统，哪些人往自己的购物车中放商品，也就是说我必须把每个人区分开。</p><p>本文主要讲解cookie，session, token 这三种是如何管理会话的；</p><a id="more"></a><h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p>cookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据。跟服务器没啥关系，仅仅是浏览器实现的一种数据存储功能。</p><p>cookie由服务器生成，发送给浏览器，浏览器把cookie以KV形式存储到某个目录下的文本文件中，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间。所以每个域的cookie数量是有限制的。</p><h2 id="如何设置"><a href="#如何设置" class="headerlink" title="如何设置"></a>如何设置</h2><h3 id="客户端设置"><a href="#客户端设置" class="headerlink" title="客户端设置"></a>客户端设置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"name=xiaoming; age=12 "</span></span><br></pre></td></tr></table></figure><ul><li>客户端可以设置cookie的一下选项: expires, domain, path, secure(只有在https协议的网页中, 客户端设置secure类型cookie才能生效), 但无法设置httpOnly选项</li></ul><blockquote><p>设置cookie =&gt; cookie被自动添加到request header中 =&gt; 服务端接收到cookie</p></blockquote><h3 id="服务端设置"><a href="#服务端设置" class="headerlink" title="服务端设置"></a>服务端设置</h3><p>不管你是请求一个资源文件(如html/js/css/图片), 还是发送一个ajax请求, 服务端都会返回response.而response header中有一项叫<code>set-cookie</code>, 是服务端专门用来设置cookie的;</p><ul><li>一个set-cookie只能设置一个cookie, 当你想设置多个, 需要添加同样多的<code>set-cookie</code></li><li>服务端可以设置cookie的所有选项: expires, domain, path, secure, HttpOnly</li></ul><h3 id="Cookie，SessionStorage，LocalStorage"><a href="#Cookie，SessionStorage，LocalStorage" class="headerlink" title="Cookie，SessionStorage，LocalStorage"></a>Cookie，SessionStorage，LocalStorage</h3><p>HTML5提供了两种本地存储的方式 sessionStorage 和 localStorage；<br><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1560320865432.png" alt="img"></p><h1 id="session"><a href="#session" class="headerlink" title="session"></a>session</h1><h2 id="什么是session"><a href="#什么是session" class="headerlink" title="什么是session"></a>什么是session</h2><p>session从字面上讲，就是会话。这个就类似你和一个人交谈，你怎么知道当时和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他是张三；<br>session也是类似的道理，服务器要知道当前请求发给自己的是谁。为了做这种区分，服务器就是要给每个客户端分配不同的”身份标识”，然后客户端每次向服务器发请求的时候，都带上这个”身份标识“，服务器就知道这个请求来自与谁了。<br>至于客户端怎么保存这个”身份标识“，可以有很多方式，对于浏览器客户端，大家都采用cookie的方式。</p><h2 id="过程-服务端session-客户端-sessionId"><a href="#过程-服务端session-客户端-sessionId" class="headerlink" title="过程(服务端session + 客户端 sessionId)"></a>过程(服务端session + 客户端 sessionId)</h2><p><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1560178136108.png" alt="session"></p><ul><li>1.用户向服务器发送用户名和密码</li><li>2.服务器验证通过后,在当前对话(session)里面保存相关数据,比如用户角色, 登陆时间等;</li><li>3.服务器向用户返回一个<code>session_id</code>, 写入用户的<code>cookie</code></li><li>4.用户随后的每一次请求, 都会通过<code>cookie</code>, 将<code>session_id</code>传回服务器</li><li>5.服务端收到 <code>session_id</code>, 找到前期保存的数据, 由此得知用户的身份 </li></ul><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><h3 id="扩展性不好"><a href="#扩展性不好" class="headerlink" title="扩展性不好"></a>扩展性不好</h3><p>单机当然没问题， 如果是服务器集群， 或者是跨域的服务导向架构， 这就要求session数据共享，每台服务器都能够读取session。</p><p>举例来说， A网站和B网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？这个问题就是如何实现单点登录的问题</p><ol><li>Nginx ip_hash 策略，服务端使用 Nginx 代理，每个请求按访问 IP 的 hash 分配，这样来自同一 IP 固定访问一个后台服务器，避免了在服务器 A 创建 Session，第二次分发到服务器 B 的现象。</li><li>Session复制：任何一个服务器上的 Session 发生改变（增删改），该节点会把这个 Session 的所有内容序列化，然后广播给所有其它节点。<br><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1560181765532.png" alt="SessionCopy"></li><li>共享Session：将Session Id 集中存储到一个地方，所有的机器都来访问这个地方的数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败；<br><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1560178827404.png" alt="session共享"></li></ol><p>另一种方案是服务器索性不保存session数据了，所有数据就保存在客户端，每次请求都发回服务器。这种方案就是接下来要介绍的基于Token的验证;</p><h1 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h1><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1560180189272.png" alt="Token"></p><ol><li>用户通过用户名和密码发送请求</li><li>程序验证</li><li>程序返回一个签名的token给客户端</li><li>客户端储存token, 并且每次用每次发送请求</li><li>服务端验证Token并返回数据</li></ol><p>这个方式的技术其实很早就已经有很多实现了，而且还有现成的标准可用，这个标准就是JWT;</p><h2 id="JWT-JSON-Web-Token"><a href="#JWT-JSON-Web-Token" class="headerlink" title="JWT(JSON Web Token)"></a>JWT(JSON Web Token)</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>实际的JWT大概就像下面这样：<br><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1560181058048.png" alt="JWT"></p><p>JSON Web Tokens由dot（.）分隔的三个部分组成，它们是：</p><ul><li>Header（头部）</li><li>Payload（负载）</li><li>Signature（签名）</li></ul><p>因此，JWT通常如下展示： </p><p>xxxxx.yyyyy.zzzz</p><h4 id="Header（头部）"><a href="#Header（头部）" class="headerlink" title="Header（头部）"></a>Header（头部）</h4><p>Header 是一个 JSON 对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"alg"</span>: <span class="string">"HS256"</span>, <span class="comment">// 表示签名的算法，默认是 HMAC SHA256（写成 HS256）</span></span><br><span class="line">  <span class="string">"typ"</span>: <span class="string">"JWT"</span>  <span class="comment">// 表示Token的类型，JWT 令牌统一写为JWT</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Payload（负载）"><a href="#Payload（负载）" class="headerlink" title="Payload（负载）"></a>Payload（负载）</h4><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 7个官方字段</span></span><br><span class="line">  <span class="string">"iss"</span>: <span class="string">"a.com"</span>, <span class="comment">// issuer：签发人</span></span><br><span class="line">  <span class="string">"exp"</span>: <span class="string">"1d"</span>, <span class="comment">// expiration time： 过期时间</span></span><br><span class="line">  <span class="string">"sub"</span>: <span class="string">"test"</span>, <span class="comment">// subject: 主题</span></span><br><span class="line">  <span class="string">"aud"</span>: <span class="string">"xxx"</span>, <span class="comment">// audience： 受众</span></span><br><span class="line">  <span class="string">"nbf"</span>: <span class="string">"xxx"</span>, <span class="comment">// Not Before：生效时间</span></span><br><span class="line">  <span class="string">"iat"</span>: <span class="string">"xxx"</span>, <span class="comment">// Issued At： 签发时间</span></span><br><span class="line">  <span class="string">"jti"</span>: <span class="string">"1111"</span>, <span class="comment">// JWT ID：编号</span></span><br><span class="line">  <span class="comment">// 可以定义私有字段</span></span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">  <span class="string">"admin"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p><h4 id="Signature（签名）"><a href="#Signature（签名）" class="headerlink" title="Signature（签名）"></a>Signature（签名）</h4><p>Signature 是对前两部分的签名，防止数据被篡改。</p><p>首先，需要指定一个密钥(secret)。这个密钥只有服务器才知道，不能泄露给用户。然后，使用Header里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + <span class="string">"."</span> + base64UrlEncode(payload), secret)</span><br></pre></td></tr></table></figure></p><p>算出签名后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JWT = Base64(Header) + <span class="string">"."</span> + Base64(Payload) + <span class="string">"."</span> + $Signature</span><br></pre></td></tr></table></figure></p><blockquote><p>如何保证安全？</p><ul><li>发送JWT要使用HTTPS；不使用HTTPS发送的时候，JWT里不要写入秘密数据</li><li>JWT的payload中要设置expire时间</li></ul></blockquote><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。此后，客户端每次与服务端通信，都要带上这个JWT。你可以把它放在Cookie里面自动发送，但是这样不能跨域，所以更好的做法是放在HTTP请求的头信息 Authorization 字段里面。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure></p><p>另一种做法是， 跨域的时候， JWT就放在POST请求的数据体里。</p><h3 id="JWT-的作用"><a href="#JWT-的作用" class="headerlink" title="JWT 的作用"></a>JWT 的作用</h3><p>JWT最开始的初衷是为了实现授权和身份认证作用的，可以实现无状态，分布式的Web应用授权。大致实现的流程如下<br><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1560235067953.png" alt="JWT"></p><ol><li>客户端需要携带用户名/密码等可证明身份的的内容去授权服务器获取JWT信息；</li><li>每次服务都携带该Token内容与Web服务器进行交互，由业务服务器来验证Token是否是授权发放的有效Token，来验证当前业务是否请求合法。</li></ol><p>这里需要注意：不是每次请求都要申请一次Token，这是需要注意，如果不是对于安全性要求的情况，不建议每次都申请，因为会增加业务耗时；比如只在登陆时申请，然后使用JWT的过期时间或其他手段来保证JWT的有效性；</p><p>### </p><h3 id="一个简单的JWT使用示例"><a href="#一个简单的JWT使用示例" class="headerlink" title="一个简单的JWT使用示例"></a>一个简单的JWT使用示例</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save koa koa-route koa-bodyparser @koa/cors jwt-simple</span><br></pre></td></tr></table></figure><h4 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> route = <span class="built_in">require</span>(<span class="string">'koa-route'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>);</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">'jwt-simple'</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">'@koa/cors'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secret = <span class="string">'your_secret_string'</span>; <span class="comment">// 加密用的SECRET字符串，可随意更改</span></span><br><span class="line">app.use(bodyParser()); <span class="comment">// 处理post请求的参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> login = <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> req = ctx.request.body;</span><br><span class="line">    <span class="keyword">const</span> userName = req.userName;</span><br><span class="line">    <span class="keyword">const</span> expires = <span class="built_in">Date</span>.now() + <span class="number">3600000</span>; <span class="comment">// 设置超时时间为一小时后</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> payload = &#123; </span><br><span class="line">        iss: userName,</span><br><span class="line">        exp: expires</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> Token = jwt.encode(payload, secret);</span><br><span class="line">    ctx.response.body = &#123;</span><br><span class="line">        data: Token,</span><br><span class="line">        msg: <span class="string">'登陆成功'</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getUserName = <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reqHeader = ctx.request.headers;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">const</span> token = reqHeader.authorization.split(<span class="string">" "</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> decoded = jwt.decode(token, secret);</span><br><span class="line">    ctx.response.body = &#123;</span><br><span class="line">        data: &#123;</span><br><span class="line">            username: decoded.iss,</span><br><span class="line">        &#125;,</span><br><span class="line">        msg: <span class="string">'获取用户名成功'</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">app.use(cors());</span><br><span class="line">app.use(route.post(<span class="string">'/login'</span>, login));</span><br><span class="line">app.use(route.get(<span class="string">'/getUsername'</span>, getUserName));</span><br><span class="line">app.listen(<span class="number">3200</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'启动成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JWT-demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.login-wrap</span> &#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            padding: 20px;</span><br><span class="line">            margin-bottom: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span> <span class="attr">class</span>=<span class="string">"userName"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">class</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn1"</span>&gt;</span>获取用户名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'.btn'</span>);</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> userName = <span class="built_in">document</span>.querySelector(<span class="string">'.userName'</span>).value;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> password = <span class="built_in">document</span>.querySelector(<span class="string">'.password'</span>).value;</span></span><br><span class="line"><span class="javascript">        fetch(<span class="string">'http://localhost:3200/login'</span>, &#123;</span></span><br><span class="line"><span class="javascript">            method: <span class="string">'POST'</span>, </span></span><br><span class="line"><span class="javascript">            body: <span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line">                userName,</span><br><span class="line">                password</span><br><span class="line">            &#125;),</span><br><span class="line">            headers:&#123;</span><br><span class="line"><span class="javascript">                <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            mode: <span class="string">'cors'</span> <span class="comment">// no-cors, cors, *same-origin</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> response.json();</span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 获取到Token,将Token放在localStorage</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.cookie = <span class="string">`token=<span class="subst">$&#123;res.data&#125;</span>`</span>;</span></span><br><span class="line"><span class="javascript">                localStorage.setItem(<span class="string">'token'</span>, res.data);</span></span><br><span class="line"><span class="javascript">                localStorage.setItem(<span class="string">'token_exp'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span></span><br><span class="line">                alert(res.msg);</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'本地测试'</span>, res);</span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.error(<span class="string">'本地测试错误'</span>, err);</span></span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn1 = <span class="built_in">document</span>.querySelector(<span class="string">'.btn1'</span>);</span></span><br><span class="line"><span class="javascript">    btn1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username = <span class="built_in">document</span>.querySelector(<span class="string">'.username'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> token = localStorage.getItem(<span class="string">'token'</span>);</span></span><br><span class="line"><span class="javascript">        fetch(<span class="string">'http://localhost:3200/getUsername'</span>, &#123;</span></span><br><span class="line">            headers:&#123;</span><br><span class="line"><span class="javascript">                <span class="string">'Authorization'</span>: <span class="string">'Bearer '</span> + token</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            mode: <span class="string">'cors'</span> <span class="comment">// no-cors, cors, *same-origin</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> response.json();</span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'返回用户名结果'</span>, res);</span></span><br><span class="line"><span class="javascript">                username.innerHTML = <span class="string">`姓名：<span class="subst">$&#123;res.data.username&#125;</span>`</span>;</span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.error(<span class="string">'本地测试错误'</span>, err);</span></span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h4><p><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1560257793993.gif" alt="JWT"></p><blockquote><p>以上只是一个特别简单的例子， 很多边界条件没有做处理，比如未登陆的校验，异常的处理，Token过期的判断；</p></blockquote><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h2 id="Cookie和Session的区别"><a href="#Cookie和Session的区别" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h2><ol><li>存储位置不同： cookie数据存放在客户的浏览器上，session数据放在服务器上</li><li>隐私策略不同：cookie不是很安全， 别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session</li><li>session会在一定时间内保存在服务器上。当访问增多，就会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie</li><li>存储大小不同： 单个cookie保存的数据不能超过4k, 很多浏览器都限制一个站点最多保存20个cookie</li></ol><blockquote><p>一般建议： 将登陆信息等重要信息存放为session, 其他信息如果需要保留，可以放在cookie中</p></blockquote><h2 id="Token和Session的区别"><a href="#Token和Session的区别" class="headerlink" title="Token和Session的区别"></a>Token和Session的区别</h2><p>Session是一种HTTP储存机制， 为无状态的HTTP提供持久机制;<br>Token就是令牌， 比如你授权(登录)一个程序时，它就是个依据，判断你是否已经授权该软件；</p><p>Session和Token并不矛盾，作为身份认证Token安全性比Session好，因为每一个请求都有签名还能防止监听以及重放攻击，而Session就必须依赖链路层来保障通讯安全了。如上所说，如果你需要实现有状态的回话，仍然可以增加Session来在服务端保存一些状态。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>cookie，session，Token没有绝对的好与坏之分，只要还是要结合实际的业务场景和需求来决定采用哪种方式来管理回话，当然也可以三种都用。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://jwt.io/" target="_blank" rel="noopener">jwt</a></li><li><a href="https://www.cnblogs.com/moyand/p/9047978.html" target="_blank" rel="noopener">彻底理解cookie，session，token</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">JSON Web Token 入门教程</a></li><li><a href="https://www.jianshu.com/p/bd1be47a16c1" target="_blank" rel="noopener">Cookie、Session、Token那点事儿（原创）</a></li><li><a href="https://www.cnblogs.com/lyzg/p/6067766.html" target="_blank" rel="noopener">3种web会话管理的方式</a></li><li><a href="https://juejin.im/post/5cd9037ee51d456e5c5babca" target="_blank" rel="noopener">你真的了解 Cookie 和 Session 吗</a></li><li><a href="https://zhuanlan.zhihu.com/p/38942172" target="_blank" rel="noopener">不要用JWT替代session管理（上）：全面了解Token,JWT,OAuth,SAML,SSO</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界上真的没有真正的感同身受</title>
      <link href="/2019/04/27/2019-04-27/"/>
      <url>/2019/04/27/2019-04-27/</url>
      
        <content type="html"><![CDATA[<p>今天早上一觉醒来，刷微博，看到这样一条热搜。在昨晚的《我是唱作人》节目中，王源在演唱自己的原创作品《世界上没有真正的感同身受》时，因控制不住自己的情绪，在舞台上崩溃大哭。事后王源针对因情绪影响演唱在微博上向所有人道歉， 在听到这首歌的时候，我都忍不住想要落泪。因为光是这首歌的歌名就已经够让人感同身受，只是你的情绪只是你一个人的，没有人可以真正深入地了解到你的内心。世界上真的没有真正的感同身受的。</p><p>在演唱这首歌前，王源问了台下观众这么一句话“你们看舞台亮吗？”</p><p>台下观众争先恐后地答“亮”。</p><p>可是王源说“我看你们是黑的。”<br><a id="more"></a></p><p>年少成名，他拥有多少光亮，就经历了多少黑暗的时刻。</p><p>也许这便是粉丝和偶像之间最大的距离，其实也是我们每个人身处情绪之中时旁人和我们的最大距离。</p><p>每个人都有这样的时刻，这个世界只有自己，一个人寂寞，一个人难过，周围的人都说懂，但其实他们从来都没有真正的懂过。</p><p>这个时候，不需要加油也不需过多的安慰，自己会好，只是突然会觉得失落，难过，孤独。</p><p>难过的时候，你感觉你的周围都是黑的。可以你身边人是没办法感受到这种黑暗的，他们的生活依然是阳关明媚， 光鲜亮丽。获取他们会安慰你，会说“我懂你的感受。”只是口头上懂得只是表面，心底的波澜无人可懂。只有你一个人。</p><p>就像是王源一样，外人看到的都是光鲜亮丽。一个小小年纪的孩子就成为偶像，成为光彩的明星，这是多少人的梦寐以求，可是他背后承担了多少压力，放弃了多少快乐，又有谁知道呢？一切只有自己心里清楚，没有人可以真正感同身受。</p><p>所以不要妄想别人可以对你感同身受，可以知道你心里的苦，而当别人和你倾诉的时候，不要用自己的角度轻飘飘地对待。如果你不能感同身受，至少不要让对方觉得你漫不经心。而当你崩溃大哭的时候，也不要觉得自责，因为坚强地够久了，我们都有权利大哭一场。哭过之后，我们还都是坚强的孩子。</p><p>我们所羡慕的，我们并不知道她们背后有着什么，她们是否得到这个结果前，在路上哭泣过。</p><p>所以以后不要再羡慕别人了，你要羡慕的应该是你自己，因为最懂你的那个人就是你自己。<br>你不要去想那些不好的，你不需要等谁在天塌下来陪你，你要让天一直是天，让你是更好的你，另外你还要记得，世上没有人懂你，但永远有人在爱着你。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> 感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器的缓存机制</title>
      <link href="/2018/12/01/2018-12-01-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/12/01/2018-12-01-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器的缓存机制"><a href="#浏览器的缓存机制" class="headerlink" title="浏览器的缓存机制"></a>浏览器的缓存机制</h2><h3 id="缓存过程"><a href="#缓存过程" class="headerlink" title="缓存过程"></a>缓存过程</h3><p><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1543302219484.png?width=1849&amp;height=301&amp;imageView2/3/w/537/h/86" alt><br>浏览器与服务器通信的方式为应答模式, 即是:<br>浏览器发起HTTP请求-服务器响应请求, 那么浏览器怎么确定一个资源该不该请求缓存呢?<br>浏览器第一次向服务器发起该请求后拿到请求结果, 将请求结果和缓存标识存入浏览器缓存, 浏览器对于缓存的处理是根据第一次请求资源时返回的响应头来确定的</p><a id="more"></a><h3 id="分为强制缓存和协商缓存"><a href="#分为强制缓存和协商缓存" class="headerlink" title="分为强制缓存和协商缓存"></a>分为强制缓存和协商缓存</h3><p>强制缓存优先于协商缓存, 强制缓存(expires和Cache-control)生效则直接使用强制缓存, 若不生效则进行协商缓存(Last-Modified/If-Modified-Since和Etag/If-None-Match), 协商缓存由服务器决定是否使用缓存, 如果协商缓存失效, 那么代表该请求的的缓存失效, 返回200,重新返回资源的缓存标识, 再存入浏览器缓存中; 生效则返回304, 继续使用缓存;</p><blockquote><p>Cache-control优先级高于expires<br>Etag/If-None-Match优先级高于Last-Modified/If-Modified-Since</p></blockquote><p>区别</p><ol><li>强缓存不发请求, 直接在缓存中获取; 弱缓存需要发送一个请求, 验证是都可以使用缓存, 如果可以则返回304直接使用缓存, 如果不可以使用缓存, 则直接返回该资源的数据</li><li>强缓存返回200(from cache), 弱缓存返回304</li></ol><h2 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h2><p>不会向服务器请求资源, 直接从缓存中读取资源, 在chrome控制台的netWork选项中可以看到该请求返回200的状态码, size显示 from disk cache和from memory cache;</p><ul><li>from disk cache 从硬盘中读取缓存;</li><li>from memory cache 从内存中读取缓存;浏览器会在js和图片资源等文件解析后直接存入内存缓存中, 那么当刷新页面时只需直接从内存缓存中读取(from memory cache);</li></ul><h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><p>协商缓存是无法减少请求数的开销的, 但是可以减少返回的正文大小;</p><h3 id="用户行为对缓存的影响"><a href="#用户行为对缓存的影响" class="headerlink" title="用户行为对缓存的影响"></a>用户行为对缓存的影响</h3><p>1.地址栏访问, 链接跳转是正常用户的行为, 将会触发浏览器缓存机制<br>2.F5刷新, 浏览器会设置max-age=0, 跳过强制缓存判断, 会进行协商缓存判断<br>3.ctrl+F5刷新, 会跳过强制缓存和协商缓存, 直接从服务器拉取资源</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router常见用法</title>
      <link href="/2018/11/24/2018-11-24-vue-router%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/"/>
      <url>/2018/11/24/2018-11-24-vue-router%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="hash模式和history模式"><a href="#hash模式和history模式" class="headerlink" title="hash模式和history模式"></a>hash模式和history模式</h2><p>hash模式(vue-router默认hash模式)就是看到路由上面会有一个 <code>#</code>号, 例如<code>http://localhost:8800/#/</code>; javascript通过hashChange事件来监听url的变化<br>history模式,就是直接匹配的<code>/</code>, 这种模式充分利用 <code>history.pushState</code> API来完成URL跳转而无需重新加载页面<br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line"><span class="comment">// 使用HTML5的History路由模式</span></span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>history模式, 需要后端配置支持, 因为我们的应用是单页应用, 后端如果没有配置, 访问 <code>http://localhost:8800/home</code>就是404;<br>后端需要配置在接收到所有的请求后, 都会指向同一个index.html</p><h2 id="钩子函数的使用常见场景"><a href="#钩子函数的使用常见场景" class="headerlink" title="钩子函数的使用常见场景"></a>钩子函数的使用常见场景</h2><p>beforeEach和afterEach</p><ol><li>修改页面的标题<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.document.title = to.meta.title;</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="微信中给vue单页应用设置标题"><a href="#微信中给vue单页应用设置标题" class="headerlink" title="微信中给vue单页应用设置标题"></a>微信中给vue单页应用设置标题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addELementToBody</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.body) &#123;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(el);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(el);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTitle</span>(<span class="params">title = <span class="string">''</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (title) &#123;</span><br><span class="line">        <span class="built_in">window</span>.document.title = title;</span><br><span class="line">         <span class="comment">// 兼容IOS下的微信</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/ip(hone|od|ad)/i</span>.test(navigator.userAgent)) &#123;</span><br><span class="line">            <span class="keyword">const</span> i = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">            i.src = <span class="string">'/favicon.ico'</span>;</span><br><span class="line">            i.style.display = <span class="string">'none'</span>;</span><br><span class="line">            i.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    i.remove();</span><br><span class="line">                &#125;, <span class="number">9</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            addELementToBody(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'请传递title参数'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> setTitle;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>每次页面跳转控制滚动到最顶部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>判断是否登录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.localStorage.getItem(<span class="string">'token'</span>)) &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next(<span class="string">'/login'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>next参数为false时, 可以取消导航, 设置为具体的路径可以导航到指定的页面;</p><blockquote><p>正确的使用好导航钩子可以实现一些全局性的功能, 而且便于维护</p></blockquote><h2 id="路由懒加载-按需加载"><a href="#路由懒加载-按需加载" class="headerlink" title="路由懒加载(按需加载)"></a>路由懒加载(按需加载)</h2><p>如果使用babel, 则需要添加 <code>syntax-dynamic-import</code> 该插件</p><p>懒加载的写法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./Foo.vue'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="命名chunk及把组件按组分块"><a href="#命名chunk及把组件按组分块" class="headerlink" title="命名chunk及把组件按组分块"></a>命名chunk及把组件按组分块</h3><h4 id="命名chunk"><a href="#命名chunk" class="headerlink" title="命名chunk"></a>命名chunk</h4><p>使用了异步路由之后, 编译出来的每个页面的js都叫做chunk(块),默认的chunk都是以0, 1, 2, 3 … 来命名的, 这样开发的时候不太方便看出具体是哪个模块的chunk, 我们可以给每个chunk都进行命名;<br>在webapck配置的出口output里通过设置chunkFilename字段修改chunk命名:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    output: &#123;</span><br><span class="line">    publicPath: <span class="string">'/dist/'</span>,</span><br><span class="line">    <span class="comment">// [hash:8] 修改为8位数的hash值</span></span><br><span class="line">    filename: <span class="string">'[name].[hash:8].js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].[hash:8].chunk.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了chunk后, 在每个页面(.vue文件)里写的样式也需要配置后才会打包进main.css, 否则仍然会通过JavaScript动态创建<code>&lt;style&gt;</code>标签的形式写入.<br>配置插件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'[name].[hash:8].css'</span>,</span><br><span class="line">      allChunks: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h4 id="把组件按组分块"><a href="#把组件按组分块" class="headerlink" title="把组件按组分块"></a>把组件按组分块</h4><p>使用命名chunk, 一个特殊的注释语法来提供chunk name<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-foo" */</span> <span class="string">'./Foo.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> Bar = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-foo" */</span> <span class="string">'./Bar.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> Baz = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-foo" */</span> <span class="string">'./Baz.vue'</span>)</span><br></pre></td></tr></table></figure></p><p>命名相同的webapck会打包到同一个chunk下;</p><p>.babelrc的配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"stage-3"</span>, <span class="string">"env"</span>],</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"transform-runtime"</span>, <span class="string">"syntax-dynamic-import"</span>],</span><br><span class="line">  <span class="comment">// "comments": false, </span></span><br><span class="line">  <span class="string">"env"</span>: &#123;</span><br><span class="line">    <span class="string">"production"</span>: &#123;</span><br><span class="line">        <span class="string">"plugins"</span>: [</span><br><span class="line">            [<span class="string">"transform-remove-console"</span>]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>“comments”: false,  该项一定不要保留,因为会把注释的部分去掉, 但是命名chunk规则是根据注释来判断的;</p></blockquote><h3 id="匹配404路由"><a href="#匹配404路由" class="headerlink" title="匹配404路由"></a>匹配404路由</h3><p>在路由列表的最下面加上如下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [&#123;</span><br><span class="line">        <span class="comment">// 此处省略N个路由</span></span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'404'</span>,</span><br><span class="line">          path: <span class="string">'/404'</span>,</span><br><span class="line">          component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./notFound.vue'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'*'</span>, <span class="comment">// 此处需特别注意至于最底部</span></span><br><span class="line">            redirect: <span class="string">'/404'</span></span><br><span class="line">        &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锚点的添加</title>
      <link href="/2018/11/01/2018-11-01-%E9%94%9A%E7%82%B9%E7%9A%84%E6%B7%BB%E5%8A%A0/"/>
      <url>/2018/11/01/2018-11-01-%E9%94%9A%E7%82%B9%E7%9A%84%E6%B7%BB%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1.使用 id 定位<br>  2.使用 name 定位<br>  3.使用js定位</p></blockquote><a id="more"></a><h3 id="1-使用-id-定位"><a href="#1-使用-id-定位" class="headerlink" title="1.使用 id 定位"></a>1.使用 id 定位</h3><p>这种定位最大的好处就是可以针对任何标签来定位<br>给一个a标签一个<code>href=“#锚点”</code>，然后要跳的锚点给个<code>id=“锚点”</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;锚点&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        #div1 &#123;</span></span><br><span class="line"><span class="regexp">            margin-top: 2000px;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;a href="#div1"&gt;to div1&lt;/</span>a&gt;</span><br><span class="line">    &lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id="div1"&gt;div1&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="2-使用-name-定位"><a href="#2-使用-name-定位" class="headerlink" title="2.使用 name 定位"></a>2.使用 name 定位</h3><p>使用 name 定位只用于 <code>&lt;a&gt;</code>标签,其他的标签就不管用了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;锚点&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        a[name="a"]&#123;</span></span><br><span class="line"><span class="regexp">            margin-top: 2000px;</span></span><br><span class="line"><span class="regexp">            display: block;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;a href="#a"&gt;定位到A&lt;/</span>a&gt;</span><br><span class="line">    &lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;a name="a"&gt;A&lt;/</span>a&gt; </span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="3-使用js定位"><a href="#3-使用js定位" class="headerlink" title="3.使用js定位"></a>3.使用js定位</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView" target="_blank" rel="noopener">element.scrollIntoView()</a>方法让当前元素滚动到浏览器窗口的可视区域内(有浏览器的兼容问题)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;锚点&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        #a &#123;</span></span><br><span class="line"><span class="regexp">            margin-top: 2000px;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div onclick="javascript:document.getElementById('a').scrollIntoView()"&gt;</span></span><br><span class="line"><span class="regexp">        定位到A</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;div id=<span class="string">"a"</span>&gt;</span><br><span class="line">        A</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack-dev-server的proxy用法</title>
      <link href="/2018/10/20/2018-10-20-Webpack-dev-server%E7%9A%84proxy%E7%94%A8%E6%B3%95/"/>
      <url>/2018/10/20/2018-10-20-Webpack-dev-server%E7%9A%84proxy%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>如果你有单独的后端开发服务器 API，并且希望在同域名下发送 API 请求 ，那么代理某些 URL 会很有用。</li><li>解决开发环境的跨域问题(不用在去配置nginx和host, 爽歪歪~~)</li></ol><a id="more"></a><h2 id="在webpack-config-js中配置"><a href="#在webpack-config-js中配置" class="headerlink" title="在webpack.config.js中配置"></a>在<code>webpack.config.js</code>中配置</h2><blockquote><p>下面简单介绍一下五个经常使用的场景</p></blockquote><h3 id="使用一"><a href="#使用一" class="headerlink" title="使用一:"></a>使用一:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mmodule.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: <span class="string">'http://localhost:3000'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>请求到 <code>/api/xxx</code> 现在会被代理到请求 <code>http://localhost:3000/api/xxx</code>, 例如 <code>/api/user</code> 现在会被代理到请求 <code>http://localhost:3000/api/user</code></p><h3 id="使用二"><a href="#使用二" class="headerlink" title="使用二"></a>使用二</h3><p>如果你想要代码多个路径代理到同一个target下, 你可以使用由一个或多个「具有 context 属性的对象」构成的数组：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: [&#123;</span><br><span class="line">            context: [<span class="string">'/auth'</span>, <span class="string">'/api'</span>],</span><br><span class="line">            target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="使用三"><a href="#使用三" class="headerlink" title="使用三:"></a>使用三:</h3><p>如果你不想始终传递 /api ，则需要重写路径：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">                pathRewrite: &#123;<span class="string">'^/api'</span> : <span class="string">''</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>请求到 /api/xxx 现在会被代理到请求 <code>http://localhost:3000/xxx</code>, 例如 /api/user 现在会被代理到请求 <code>http://localhost:3000/user</code></p><h3 id="使用四"><a href="#使用四" class="headerlink" title="使用四:"></a>使用四:</h3><p>默认情况下，不接受运行在 HTTPS 上，且使用了无效证书的后端服务器。如果你想要接受，只要设置 <code>secure: false</code> 就行。修改配置如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'https://other-server.example.com'</span>,</span><br><span class="line">                secure: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="使用五"><a href="#使用五" class="headerlink" title="使用五:"></a>使用五:</h3><p>有时你不想代理所有的请求。可以基于一个函数的返回值绕过代理。<br>在函数中你可以访问请求体、响应体和代理选项。必须返回 false 或路径，来跳过代理请求。</p><p>例如：对于浏览器请求，你想要提供一个 HTML 页面，但是对于 API 请求则保持代理。你可以这样做：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">                bypass: <span class="function"><span class="keyword">function</span>(<span class="params">req, res, proxyOptions</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (req.headers.accept.indexOf(<span class="string">'html'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'Skipping proxy for browser request.'</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">'/index.html'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="解决跨域原理"><a href="#解决跨域原理" class="headerlink" title="解决跨域原理"></a>解决跨域原理</h2><p>上面的参数列表中有一个<code>changeOrigin</code>参数, 是一个布尔值, 设置为true, 本地就会虚拟一个服务器接收你的请求并代你发送该请求,<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="vue-cli中proxyTable配置接口地址代理示例"><a href="#vue-cli中proxyTable配置接口地址代理示例" class="headerlink" title="vue-cli中proxyTable配置接口地址代理示例"></a>vue-cli中proxyTable配置接口地址代理示例</h2><p>修改 <code>config/index.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    dev: &#123;</span><br><span class="line">    <span class="comment">// 静态资源文件夹</span></span><br><span class="line">    assetsSubDirectory: <span class="string">'static'</span>,</span><br><span class="line">    <span class="comment">// 发布路径</span></span><br><span class="line">    assetsPublicPath: <span class="string">'/'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代理配置表，在这里可以配置特定的请求代理到对应的API接口</span></span><br><span class="line">    <span class="comment">// 使用方法：https://vuejs-templates.github.io/webpack/proxy.html</span></span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">        <span class="comment">// 例如将'localhost:8080/api/xxx'代理到'https://wangyaxing.cn/api/xxx'</span></span><br><span class="line">        <span class="string">'/api'</span>: &#123;</span><br><span class="line">            target: <span class="string">'https://wangyaxing.cn'</span>, <span class="comment">// 接口的域名</span></span><br><span class="line">            secure: <span class="literal">false</span>,  <span class="comment">// 如果是https接口，需要配置这个参数</span></span><br><span class="line">            changeOrigin: <span class="literal">true</span>, <span class="comment">// 如果接口跨域，需要进行这个参数配置</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 例如将'localhost:8080/img/xxx'代理到'https://cdn.wangyaxing.cn/xxx'</span></span><br><span class="line">        <span class="string">'/img'</span>: &#123;</span><br><span class="line">            target: <span class="string">'https://cdn.wangyaxing.cn'</span>, <span class="comment">// 接口的域名</span></span><br><span class="line">            secure: <span class="literal">false</span>,  <span class="comment">// 如果是https接口，需要配置这个参数</span></span><br><span class="line">            changeOrigin: <span class="literal">true</span>, <span class="comment">// 如果接口跨域，需要进行这个参数配置</span></span><br><span class="line">            pathRewrite: &#123;<span class="string">'^/img'</span>: <span class="string">''</span>&#125;  <span class="comment">// pathRewrite 来重写地址，将前缀 '/api' 转为 '/'。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Various Dev Server settings</span></span><br><span class="line">    host: <span class="string">'localhost'</span>, <span class="comment">// can be overwritten by process.env.HOST</span></span><br><span class="line">    port: <span class="number">4200</span>, <span class="comment">// can be overwritten by process.env.PORT, if port is in use, a free one will be determined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="更多参数"><a href="#更多参数" class="headerlink" title="更多参数"></a>更多参数</h2><p><code>dev-serve</code>r 使用了非常强大的 <a href="https://github.com/chimurai/http-proxy-middleware" target="_blank" rel="noopener">http-proxy-middleware</a> , <code>http-proxy-middleware</code> 基于 <code>http-proxy</code> 实现的，可以查看 http-proxy 的源码和文档:<a href="https://github.com/nodejitsu/node-http-proxy" target="_blank" rel="noopener">https://github.com/nodejitsu/node-http-proxy</a> 。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">target：要使用url模块解析的url字符串</span><br><span class="line">forward：要使用url模块解析的url字符串</span><br><span class="line">agent：要传递给http（s）.request的对象（请参阅Node的https代理和http代理对象）</span><br><span class="line">ssl：要传递给https.createServer（）的对象</span><br><span class="line">ws：<span class="literal">true</span> / <span class="literal">false</span>，是否代理websockets</span><br><span class="line">xfwd：<span class="literal">true</span> / <span class="literal">false</span>，添加x-forward标头</span><br><span class="line">secure：<span class="literal">true</span> / <span class="literal">false</span>，是否验证SSL Certs</span><br><span class="line">toProxy：<span class="literal">true</span> / <span class="literal">false</span>，传递绝对URL作为路径（对代理代理很有用）</span><br><span class="line">prependPath：<span class="literal">true</span> / <span class="literal">false</span>，默认值：<span class="literal">true</span> - 指定是否要将目标的路径添加到代理路径</span><br><span class="line">ignorePath：<span class="literal">true</span> / <span class="literal">false</span>，默认值：<span class="literal">false</span> - 指定是否要忽略传入请求的代理路径（注意：如果需要，您必须附加/手动）。</span><br><span class="line">localAddress：要为传出连接绑定的本地接口字符串</span><br><span class="line">changeOrigin：<span class="literal">true</span> / <span class="literal">false</span>，默认值：<span class="literal">false</span> - 将主机标头的原点更改为目标URL</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://webpack.docschina.org/configuration/dev-server/#devserver-proxy" target="_blank" rel="noopener">官方文档</a></li><li><a href="https://github.com/chimurai/http-proxy-middleware" target="_blank" rel="noopener">http-proxy-middleware</a></li><li><a href="https://github.com/nodejitsu/node-http-proxy" target="_blank" rel="noopener">node-http-proxy</a></li><li><a href="https://vuejs-templates.github.io/webpack/proxy.html" target="_blank" rel="noopener">API Proxying During Development</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用css自定义属性实现一键换肤功能</title>
      <link href="/2018/09/25/2018-09-25-%E4%BD%BF%E7%94%A8css%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E6%8D%A2%E8%82%A4%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/09/25/2018-09-25-%E4%BD%BF%E7%94%A8css%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E6%8D%A2%E8%82%A4%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用css自定义属性实现一键换肤功能</p></blockquote><a id="more"></a><h2 id="css自定义属性简介"><a href="#css自定义属性简介" class="headerlink" title="css自定义属性简介"></a>css自定义属性简介</h2><p>css 的自定义属性功能(var), 在css中使用变量,和less及scss不同的是,在js中可以直接修改变量值;</p><h2 id="用法-MDN"><a href="#用法-MDN" class="headerlink" title="用法: MDN"></a>用法: MDN</h2><p>它们使用自定义属性符号（例如<code>--main-color: black;</code>）进行设置，并使用var()函数。<br>例如: <code>color: var(--main-color)</code>;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">:root &#123;</span><br><span class="line">  --main-color: brown;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.one &#123;</span><br><span class="line">  color: white;</span><br><span class="line">  background-color: <span class="keyword">var</span>(--main-color);</span><br><span class="line">  margin: <span class="number">10</span>px;</span><br><span class="line">  width: <span class="number">50</span>px;</span><br><span class="line">  height: <span class="number">50</span>px;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在javascript中设置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get variable from inline style</span></span><br><span class="line">element.style.getPropertyValue(<span class="string">"--my-var"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get variable from wherever</span></span><br><span class="line">getComputedStyle(element).getPropertyValue(<span class="string">"--my-var"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set variable on inline style</span></span><br><span class="line">element.style.setProperty(<span class="string">"--my-var"</span>, <span class="string">'red'</span>);</span><br></pre></td></tr></table></figure></p><p>浏览器支持<br>css自定义属性目前支持的浏览器有<br><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1537873558720.png?width=2594&amp;height=956&amp;imageView2/3/w/537/h/198" alt></p><h2 id="使用css-vars-polyfill"><a href="#使用css-vars-polyfill" class="headerlink" title="使用css-vars-polyfill"></a>使用<a href="https://github.com/jhildenbiddle/css-vars-ponyfill" target="_blank" rel="noopener">css-vars-polyfill</a></h2><p><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1537873565560.png?width=874&amp;height=300&amp;imageView2/3/w/537/h/183" alt></p><h2 id="polyfill"><a href="#polyfill" class="headerlink" title="polyfill"></a>polyfill</h2><blockquote><p>补充polyfill 的简单解释<br>polyfill用于表示根据新特性的定义,创建一段与之行为等价但能够在旧的javascript环境中运行的代码</p></blockquote><p>引用 wiki 里的一句话解释</p><blockquote><p>In web development, a polyfill is code that implements a feature on web browsers that do not support the feature. Most often, it refers to a JavaScript library that implements an HTML5web standard, either an established standard (supported by some browsers) on older browsers, or a proposed standard (not supported by any browsers) on existing browsers. Formally, “a polyfill is a shim for a browser API”.</p></blockquote><p>可以这样简单的理解一下:<br>css自定义变量在IE浏览器中无法使用,但是使用了<a href="https://github.com/jhildenbiddle/css-vars-ponyfill" target="_blank" rel="noopener">css-vars-polyfill</a> ,就可以让我们在IE9+中也可以使用该属性;<br>还记得 <a href="https://babeljs.io/docs/en/babel-polyfill/" target="_blank" rel="noopener">babel-polyfill</a> 么,  babel允许我们使用es6的语法,它主要是把es6的语法转成大多数浏览器可是支持的es5语法, 可以使用 工具 来看一下平常所写的es6语法对应到es5是什么样的, 例如<br><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1537873573302.png?width=1748&amp;height=268&amp;imageView2/3/w/537/h/81" alt><br>但是像  Array.from , Object.assign, Array.prototype.includes, promise, async ,await 这些都是es5语法中没有的,我们还是想使用,但是很多浏览器不支持怎么办, babel-polyfill就是帮我们解决这个问题的</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客简单支持PWA</title>
      <link href="/2018/09/05/2018-09-05-%E5%8D%9A%E5%AE%A2%E6%94%AF%E6%8C%81PWA/"/>
      <url>/2018/09/05/2018-09-05-%E5%8D%9A%E5%AE%A2%E6%94%AF%E6%8C%81PWA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首次发表在: <a href="https://github.com/funnycoderstar/funnycoderstar/issues/6" target="_blank" rel="noopener">博客支持PWA了~</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 使用hexo插件使博客支持pwa功能，目前我所知道的有两种插件均可实现该功能</p><ul><li><a href="https://github.com/lavas-project/hexo-pwa" target="_blank" rel="noopener">hexo-pwa</a></li><li><a href="https://github.com/JLHwung/hexo-offline" target="_blank" rel="noopener">hexo-offline</a></li></ul><h2 id="前提-HTTPS"><a href="#前提-HTTPS" class="headerlink" title="前提(HTTPS)"></a>前提(HTTPS)</h2><p>全站支持HTTPS.(ps: 目前本人使用的是腾讯云的免费证书)</p><p>网站配置HTTPS, 已经有很多文章写了配置过程, 本篇文章不在赘述</p><a id="more"></a><h2 id="使用hexo-pwa"><a href="#使用hexo-pwa" class="headerlink" title="使用hexo-pwa"></a>使用hexo-pwa</h2><h3 id="1-安装hexo-pwa"><a href="#1-安装hexo-pwa" class="headerlink" title="1.安装hexo-pwa"></a>1.安装hexo-pwa</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-pwa</span><br></pre></td></tr></table></figure><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><blockquote><p>hexo的配置文件采用yml语言, 想要了解该语言的可以去看看</p></blockquote><p>在根目录的<code>_config.yml</code>中添加<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwa:</span><br><span class="line">  manifest:</span><br><span class="line">    path: <span class="regexp">/manifest.json</span></span><br><span class="line"><span class="regexp">    body:</span></span><br><span class="line"><span class="regexp">      "name": "funnycoderstar"</span></span><br><span class="line"><span class="regexp">      "short_name": "star"</span></span><br><span class="line"><span class="regexp">      "theme_color": "rgba(203,7,83,0.86)"</span></span><br><span class="line"><span class="regexp">      "background_color": "#FAFAFA"</span></span><br><span class="line"><span class="regexp">      "display": "standalone"</span></span><br><span class="line"><span class="regexp">      "Scope": "/</span><span class="string">"</span></span><br><span class="line"><span class="string">      "</span>start_url<span class="string">": "</span>/<span class="string">"</span></span><br><span class="line"><span class="string">      icons:</span></span><br><span class="line"><span class="string">        - src: https://cdn.wangyaxing.cn/icon-144x144.png?v=1</span></span><br><span class="line"><span class="string">          sizes: 144x144</span></span><br><span class="line"><span class="string">          type: image/png</span></span><br><span class="line"><span class="string">        - src: https://cdn.wangyaxing.cn/icon-128x128.png</span></span><br><span class="line"><span class="string">          sizes: 128x128</span></span><br><span class="line"><span class="string">          type: image/png</span></span><br><span class="line"><span class="string">        - src: https://cdn.wangyaxing.cn/icon-96x96.png</span></span><br><span class="line"><span class="string">          sizes: 96x96</span></span><br><span class="line"><span class="string">          type: image/png</span></span><br><span class="line"><span class="string">  serviceWorker:</span></span><br><span class="line"><span class="string">    path: /sw.js</span></span><br><span class="line"><span class="string">    preload:</span></span><br><span class="line"><span class="string">      urls:</span></span><br><span class="line"><span class="string">        - /</span></span><br><span class="line"><span class="string">      posts: 5</span></span><br><span class="line"><span class="string">    opts:</span></span><br><span class="line"><span class="string">      networkTimeoutSeconds: 5</span></span><br><span class="line"><span class="string">    routes:</span></span><br><span class="line"><span class="string">      - pattern: !!js/regexp /hm.baidu.com/</span></span><br><span class="line"><span class="string">        strategy: networkOnly</span></span><br><span class="line"><span class="string">      - pattern: !!js/regexp /.*\.(js|css|jpg|jpeg|png|gif)$/</span></span><br><span class="line"><span class="string">        strategy: cacheFirst</span></span><br><span class="line"><span class="string">      - pattern: !!js/regexp /\//</span></span><br><span class="line"><span class="string">        strategy: networkFirst</span></span><br><span class="line"><span class="string">  priority: 5</span></span><br></pre></td></tr></table></figure></p><p>参数含义可以去<a href="https://github.com/lavas-project/hexo-pwa" target="_blank" rel="noopener">hexo-pwa</a>文档中查看</p><h3 id="3-添加manifest-json和sw-js"><a href="#3-添加manifest-json和sw-js" class="headerlink" title="3.添加manifest.json和sw.js"></a>3.添加<code>manifest.json</code>和<code>sw.js</code></h3><p>这两个文件放的位置要和配置中的路径一致, 我是放在跟目录的<br>sw.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="string">'https://g.alicdn.com/kg/workbox/3.3.0/workbox-sw.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (workbox) &#123;</span><br><span class="line">    workbox.setConfig(&#123; <span class="attr">modulePathPrefix</span>: <span class="string">'https://g.alicdn.com/kg/workbox/3.3.0/'</span> &#125;);</span><br><span class="line"></span><br><span class="line">    workbox.precaching.precache([<span class="string">'/'</span>, <span class="string">'/index.html'</span>]);</span><br><span class="line"></span><br><span class="line">    workbox.routing.registerRoute(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^https?://wangyaxing.cn/?$'</span>), workbox.strategies.networkFirst());</span><br><span class="line"></span><br><span class="line">    workbox.routing.registerRoute(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'.*.html'</span>), workbox.strategies.networkFirst());</span><br><span class="line"></span><br><span class="line">    workbox.routing.registerRoute(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'.*.(?:js|css)'</span>), workbox.strategies.staleWhileRevalidate());</span><br><span class="line"></span><br><span class="line">    workbox.routing.registerRoute(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'https://cdn.wangyaxing.cn/'</span>), workbox.strategies.cacheFirst());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>manifest.json<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"funnycoderstar"</span>,</span><br><span class="line">  <span class="string">"short_name"</span>: <span class="string">"star"</span>,</span><br><span class="line">  <span class="string">"theme_color"</span>: <span class="string">"rgba(203,7,83,0.86)"</span>,</span><br><span class="line">  <span class="string">"background_color"</span>: <span class="string">"#FAFAFA"</span>,</span><br><span class="line">  <span class="string">"display"</span>: <span class="string">"standalone"</span>,</span><br><span class="line">  <span class="string">"Scope"</span>: <span class="string">"/"</span>,</span><br><span class="line">  <span class="string">"start_url"</span>: <span class="string">"/"</span>,</span><br><span class="line">  <span class="string">"icons"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"src"</span>: <span class="string">"/source/images/icons/icon-96x96.png"</span>,</span><br><span class="line">      <span class="string">"sizes"</span>: <span class="string">"96x96"</span>,</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"src"</span>: <span class="string">"/source/images/icons/icon-128x128.png"</span>,</span><br><span class="line">      <span class="string">"sizes"</span>: <span class="string">"128x128"</span>,</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"src"</span>: <span class="string">"/source/images/icons/icon-144x144.png"</span>,</span><br><span class="line">      <span class="string">"sizes"</span>: <span class="string">"144x144"</span>,</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"splash_pages"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>manifest生成地址： <a href="https://app-manifest.firebaseapp.com/" target="_blank" rel="noopener">https://app-manifest.firebaseapp.com/</a></p><h3 id="4-将funnycoderstar安装到主屏-PWA"><a href="#4-将funnycoderstar安装到主屏-PWA" class="headerlink" title="4.将funnycoderstar安装到主屏(PWA)"></a>4.将<code>funnycoderstar</code>安装到主屏(PWA)</h3><ol><li>地址栏输入: Chrome://flags</li><li>搜索并启用以下项目: Desktop PWAs(桌面PWAs)、App Banners(应用横幅)、Experimental App Banners(实验性应用横幅)</li><li>重启浏览器使修改的设置生效</li><li>点击地址栏最右边按钮</li><li>选择”安装 funnycoderstar”</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/3297464-2a72b1af0c8ed3f7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>在桌面上即可看到博客的小图标</p><p><img src="http://upload-images.jianshu.io/upload_images/3297464-c3948a45f4bb9351?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>感兴趣的小伙伴可以来我的博客体验一下, 哈哈~~  https://.wangyaxing.cn/</p></blockquote><h2 id="使用hexo-offline"><a href="#使用hexo-offline" class="headerlink" title="使用hexo-offline"></a>使用hexo-offline</h2><p>使用基本与hexo-pwa相同, 下面简述一下过程</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-offline</span><br></pre></td></tr></table></figure><h3 id="2-修改配置文件-1"><a href="#2-修改配置文件-1" class="headerlink" title="2. 修改配置文件"></a>2. 修改配置文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Offline</span><br><span class="line">## Config passed to sw-precache</span><br><span class="line">## https://github.com/JLHwung/hexo-offline</span><br><span class="line">offline:</span><br><span class="line">  maximumFileSizeToCacheInBytes: <span class="number">10485760</span></span><br><span class="line">  staticFileGlobs:</span><br><span class="line">    - public<span class="comment">/**/</span>*.&#123;js,html,css,png,jpg,jpeg,gif,svg,json,xml&#125;</span><br><span class="line">  stripPrefix: public</span><br><span class="line">  verbose: <span class="literal">true</span></span><br><span class="line">  runtimeCaching:</span><br><span class="line">    - urlPattern: <span class="comment">/*</span></span><br><span class="line"><span class="comment">      handler: cacheFirst</span></span><br><span class="line"><span class="comment">      options:</span></span><br><span class="line"><span class="comment">        origin: cdn.example.com</span></span><br><span class="line"><span class="comment">    - urlPattern: /*</span></span><br><span class="line"><span class="comment">      handler: cacheFirst</span></span><br><span class="line"><span class="comment">      options:</span></span><br><span class="line"><span class="comment">        origin: cdn.another-example.org</span></span><br></pre></td></tr></table></figure><h3 id="3-添加manifest-json"><a href="#3-添加manifest-json" class="headerlink" title="3. 添加manifest.json"></a>3. 添加<code>manifest.json</code></h3><p> manifest.json放到 source目录下</p><h3 id="4-引入manifest-json"><a href="#4-引入manifest-json" class="headerlink" title="4. 引入manifest.json"></a>4. 引入<code>manifest.json</code></h3><p>next主题在 <code>layout/_partials/head.swig</code>添加<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"manifest"</span> href=<span class="string">"/manifest.json"</span>&gt;</span><br></pre></td></tr></table></figure></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>文件放置位置一定要与配置文件中写的路径一致</li><li>图标大小一定按照PWA的严格要求</li><li>打开 Chrome Dev Tools的Application一栏中进行调试</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/3297464-c679432c55350737?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>还可以通过观察network中的请求是否有小齿轮标志来检测<code>serviceWorker</code>是否已加载<br><img src="http://upload-images.jianshu.io/upload_images/3297464-6fb5b64dac585725?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://richardcao.me/2017/09/03/Hexo-PWA/" target="_blank" rel="noopener">hexo博客支持PWA和压缩博文</a></li><li><a href="https://blog.jugg.xyz/2018/04/04/PWA-for-hexo/#%E9%85%8D%E7%BD%AE-hexo-pwa-%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener">让 Hexo 博客支持 PWA</a></li><li><a href="https://richardcao.me/2017/09/03/Hexo-PWA/" target="_blank" rel="noopener">五步让 Hexo 博客支持 PWA</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo加入gitment功能</title>
      <link href="/2018/09/01/2018-09-01-hexo%E5%8A%A0%08%E5%85%A5gitment%E8%AF%84%E8%AE%BA%08%08%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/09/01/2018-09-01-hexo%E5%8A%A0%08%E5%85%A5gitment%E8%AF%84%E8%AE%BA%08%08%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首次发表在:<a href="https://github.com/funnycoderstar/funnycoderstar/issues/9" target="_blank" rel="noopener">hexo加入gitment功能</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">Gitment</a> 是作者实现的一款基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p><code>next(v5.1.4)</code>支持<code>gitment</code>功能</p></blockquote><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h3 id="1-注册-OAuth-Application"><a href="#1-注册-OAuth-Application" class="headerlink" title="1.  注册 OAuth Application"></a>1.  注册 OAuth Application</h3><p>点击<a href="https://github.com/settings/applications/new]" target="_blank" rel="noopener">https://github.com/settings/applications/new</a>注册，注意Authorization callback URL填自己的网站url, 比如我的 <a href="https://wangyaxing.cn/">https://wangyaxing.cn/</a></p><p>你会得到一个 client ID 和一个 client secret，这个将用于以下的配置中</p><h3 id="2-在主题文件下的-config-yml中配置"><a href="#2-在主题文件下的-config-yml中配置" class="headerlink" title="2.在主题文件下的_config.yml中配置"></a>2.在主题文件下的_config.yml中配置</h3><p>找到gitment进行配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gitment:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span><br><span class="line">  count: true # Show comments count in post meta area</span><br><span class="line">  lazy: false # Comments lazy loading with a button</span><br><span class="line">  cleanly: false # Hide 'Powered by ...' on footer, and more</span><br><span class="line">  language: # Force language, or auto switch by theme</span><br><span class="line">  github_user: Your Github ID</span><br><span class="line">  github_repo: 新建一个代码仓库,用于存储评论内容, 这里千万注意添加仓库名称而不是完整地址</span><br><span class="line">  client_id: # MUST HAVE, Github client id for the Gitment</span><br><span class="line">  client_secret: # EITHER this or proxy_gateway, Github access secret token for the Gitment</span><br></pre></td></tr></table></figure></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="1-not-fund"><a href="#1-not-fund" class="headerlink" title="1. not fund"></a>1. not fund</h3><p>出现这个问题的原因是因为配置ower, repo的时候错了</p><p><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1536070957901.png?width=588&amp;height=306&amp;imageView2/3/w/537/h/279" alt="img"><br>repo指的是仓库名称而不是仓库地址</p><h3 id="2-点击初始化评论报错-Error：validation-failed"><a href="#2-点击初始化评论报错-Error：validation-failed" class="headerlink" title="2.点击初始化评论报错 Error：validation failed"></a>2.点击初始化评论报错 <code>Error：validation failed</code></h3><p>刚开始看了好多文章, 一直修改<code>next/layout/_partials/comments.swig</code>, 而且还加了如下内容, 但是修改完之后一直没有起作用, 后来又查找源码, 发现V5.1.4版本和之前的不太一样, 并不用自己添加一些内容,这也是提醒大家查找解决方法时一定要注意修改的版本号<br>之前的版本<br><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1536073465579.png" alt="gitment1"></p><p>现在的版本内容如下:</p><p>修改<code>next/layout/_third-party/comments/gitment.swig</code></p><p><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1536073115006.png?width=1984&amp;height=806" alt="gitment"></p><p>修改ID由默认的<code>window.location.pathname</code>为 <code>page.date</code>解决ID长度过长报错问题</p><h3 id="3-自动初始化评论问题"><a href="#3-自动初始化评论问题" class="headerlink" title="3.自动初始化评论问题"></a>3.自动初始化评论问题</h3><p><a href="https://github.com/imsun/gitment/issues/8" target="_blank" rel="noopener">初始化评论框方案讨论</a><br><a href="https://draveness.me/git-comments-initialize" target="_blank" rel="noopener">自动初始化 Gitalk 和 Gitment 评论</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript编码风格指南</title>
      <link href="/2018/06/19/2018-06-19-JavaScript%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
      <url>/2018/06/19/2018-06-19-JavaScript%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1529592401995.png?width=400&amp;height=225" alt="img"><br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>程序语言的编码风格指南对于一个长期维护的软件而言是非常重要的;好的编程风格有助于写出质量更高、错误更少、更易于 维护的程序。</p><p>团队合作需要制定一些代码规范还有利用一些工具来强制要求团队代码的风格统一.毕竟很多情况下以后不一定是由写一手代码的人来维护代码,所以有一个统一的代码风格很重要!!!</p><p>最近看了一下<a href="https://book.douban.com/subject/21792530/" target="_blank" rel="noopener">编写可维护的JavaScript</a>和<a href="https://book.douban.com/subject/4881987/" target="_blank" rel="noopener">编写高质量代码:Web前端开发修炼之道</a>,根据书中提倡的一些写法,同时结合我个人的经验和喜好做了一些改动,大致整理了如下JavaScript编码风格</p><h1 id="JavaScript编码风格"><a href="#JavaScript编码风格" class="headerlink" title="JavaScript编码风格"></a>JavaScript编码风格</h1><h2 id="1-缩进"><a href="#1-缩进" class="headerlink" title="1.缩进"></a>1.缩进</h2><p>每一行的层级由4个空格组成,避免使用制表符(Tab)进行缩进<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-行的长度"><a href="#2-行的长度" class="headerlink" title="2.行的长度"></a>2.行的长度</h2><p>每行长度不应该超过80个字符.如果一行多于80个字符,应当在一个运算符(逗号,加好等)后换行.下一级应当增加两级缩进(8个字符).<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line">doSomething(arg1, arg2, arg3, arg4,</span><br><span class="line">        arg5);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法: 第二行只有4个空格的缩进</span></span><br><span class="line">doSomething(arg1, arg2, arg3, arg4,</span><br><span class="line">    arg5);</span><br><span class="line"><span class="comment">// 不好的写法: 在运算符之前换行</span></span><br><span class="line">doSomething(arg1, arg2, arg3, arg4</span><br><span class="line">        ,arg5);</span><br></pre></td></tr></table></figure></p><h2 id="3-原始值"><a href="#3-原始值" class="headerlink" title="3.原始值"></a>3.原始值</h2><p>特殊值null除了下述情况应当避免使用</p><ul><li>用来初始化一个变量,这个变量可能被赋值为一个对象</li><li>用来和一个已经初始化的变量比较,这个变量可以是也可以不是一个对象</li><li>当函数的参数期望是对象时,被用作返回值传出<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的做法</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li></ul><p>判断一个变量是否定义应当使用 typeof 操作符<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> constiable == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法</span></span><br><span class="line"><span class="keyword">if</span> (constiable == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-运算符间距"><a href="#4-运算符间距" class="headerlink" title="4.运算符间距"></a>4.运算符间距</h2><p>二元运算符前后必须使用一个空格来保持表达式的整洁.操作符包括赋值运算符和逻辑运算符<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">const</span> found = (values[i] === item);</span><br><span class="line"><span class="comment">// 不好的写法: 丢失了空格</span></span><br><span class="line"><span class="keyword">const</span> found = (values[i]===item);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">if</span> (found &amp;&amp; (count &gt; <span class="number">10</span>)) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法: 丢失了空格</span></span><br><span class="line"><span class="keyword">if</span> (found&amp;&amp;(count&gt;<span class="number">10</span>)) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    process(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法: 丢失了空格</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;count; i++) &#123;</span><br><span class="line">    process(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-括号间距"><a href="#5-括号间距" class="headerlink" title="5.括号间距"></a>5.括号间距</h2><p>当使用括号时,紧接左括号之后和紧接右括号之前不应该有空格<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">const</span> found = (values[i] === item);</span><br><span class="line"><span class="comment">// 不好的写法: 左括号之后有额外的空格</span></span><br><span class="line"><span class="keyword">const</span> found = ( values[i] === item);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">if</span> (found &amp;&amp; (count &gt; <span class="number">10</span>)) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法: 右括号之后有额外的空格</span></span><br><span class="line"><span class="keyword">if</span> (found &amp;&amp; (count &gt; <span class="number">10</span>) ) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    process(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法: 参数两边有额外的空格</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; count; i++) &#123;</span><br><span class="line">    process( i );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="6-对象直接量"><a href="#6-对象直接量" class="headerlink" title="6.对象直接量"></a>6.对象直接量</h2><p>对象直接量应当使用如下格式</p><ul><li>起始左花括号应当同表达式保持同一行</li><li>每个属性的名值对应当保持一个缩进,第一个属性应当在左花括号后另起一行.</li><li>每个属性的名值对应当使用不含引号的属性名,其后紧跟一个冒号(之前不含空格),而后是值</li><li>倘若属性值是函数类型,函数体应当在属性名之下另起一行,而且其前后均应保留一个空行</li><li>一组相关的属性前后可以插入空行以提高代码的可读性</li><li>结束的右花括号应当独占一行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line"></span><br><span class="line">    key1: value1,</span><br><span class="line">    key2: value2,</span><br><span class="line"></span><br><span class="line">    func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    key3: value3,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法: 不恰当的缩进</span></span><br><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">        key1: value1,</span><br><span class="line">        key2: value2,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法:函数体缺少空行</span></span><br><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line"></span><br><span class="line">    key1: value1,</span><br><span class="line">    key2: value2,</span><br><span class="line">    func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    key3: value3,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>当对象字面量作为函数参数时,如果值是变量,起始花括号应当同函数名在同一行.所有其余先前列出的规则同样适用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line">doSomething(&#123;</span><br><span class="line">    key1: value1,</span><br><span class="line">    key2: value2,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法</span></span><br><span class="line">doSomething(&#123; <span class="attr">key1</span>: value1, <span class="attr">key2</span>: value2 &#125;);</span><br></pre></td></tr></table></figure><h2 id="7-注释"><a href="#7-注释" class="headerlink" title="7.注释"></a>7.注释</h2><p>频繁地适用注释有助于他人理解你的代码.如下情况应当使用注释</p><ul><li>代码晦涩难懂</li><li>可能被误认为错误的代码</li><li>必要但不明显的针对特定浏览器的代码</li><li>对于对象,方法或者属性,生成文档是有必要的(使用恰当的文档注释).</li></ul><h3 id="1-单行注释"><a href="#1-单行注释" class="headerlink" title="1).单行注释"></a>1).单行注释</h3><p>使用单行注释当用来说明一行代码或者一组代码.单行注释可能有三种使用方式</p><ul><li>独占一行的注释,用来解释下一行代码</li><li>在代码行的尾部的注释,用来解释它之前的代码</li><li>多行,用来注释掉一个代码块<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果代码执行到这里,则说明通过了所有的安全性检测</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法:注释之前没有空行</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 如果代码执行到这里,则说明通过了所有的安全性检测</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法: 错误的缩进</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果代码执行到这里,则说明通过了所有的安全性检测</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法: 这里应当用多行注释</span></span><br><span class="line"><span class="comment">// 接下来的这段代码非常难, 那么,让我详细的解释一下</span></span><br><span class="line"><span class="comment">// 1. xxxx</span></span><br><span class="line"><span class="comment">// 2. xxxx</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果代码执行到这里,则说明通过了所有的安全性检测</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>对于代码行尾单行注释的情况,应确保代码结尾同注释之间至少一个缩进<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">const</span> result = something + somethingElse; <span class="comment">// somethingElse will never be null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法: 代码和注释间没有足够的空格</span></span><br><span class="line"><span class="keyword">const</span> result = something + somethingElse;<span class="comment">// somethingElse will never be null</span></span><br></pre></td></tr></table></figure></p><p>注释一个代码块时在连续多行使用单行注释是唯一可以接受的情况.多行注释不应当在这种情况下使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="comment">// if(condition) &#123;</span></span><br><span class="line"><span class="comment">//     doSomething();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="2-多行注释"><a href="#2-多行注释" class="headerlink" title="2).多行注释"></a>2).多行注释</h3><p>多行注释应当在代码需要更多文字去解释的时候使用.每个多行注释都至少有如下三行.<br>1.首行仅仅包括 /<em> 注释开始.该行不应当有其他文字<br>2.接下来的行以 </em> 开头并保持左对齐.这些行可以由文字描述<br>3.最后一行以 */开头并同先前行保持对齐.也不应当有其他文字</p><p>多行注释的首行应当保持同它描述代码的相同层次的缩进.后续的每行应当有同样层次的缩进并附加一个空格(为了适当保持 * 字符的对齐).每一个多行代码之前应当预留一个空格<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果代码执行到这里</span></span><br><span class="line"><span class="comment">     * 说明通过了所有的安全性检测</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法: 注释之前无空行</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果代码执行到这里</span></span><br><span class="line"><span class="comment">     * 说明通过了所有的安全性检测</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法: 星号后没有空格</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *如果代码执行到这里</span></span><br><span class="line"><span class="comment">     *说明通过了所有的安全性检测</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法: 错误的缩进</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果代码执行到这里</span></span><br><span class="line"><span class="comment"> * 说明通过了所有的安全性检测</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法: 代码尾部注释不要用多行注释格式</span></span><br><span class="line"><span class="keyword">const</span> result = something + somethingElse; <span class="comment">/* somethingElse 不应当取值为null */</span></span><br></pre></td></tr></table></figure></p><h3 id="3-注释声明"><a href="#3-注释声明" class="headerlink" title="3)注释声明"></a>3)注释声明</h3><p>注释有时候可以用来给一段代码声明额外的信息.这些声明的格式以单个单词打头并紧跟一个双引号.可使用的声明如下</p><ul><li>TODO: 说明代码还未完成.应当包含下一步要做的事情</li><li>HACK: 表明代码实现走了一个捷径</li><li>XXX: 说明代码是有问题的并应当尽快修复</li><li>FIXME: 说明代码是有问题的并应当尽快修复.重要性略次于XXX</li><li>REVIEW: 说明代码任何可能的改动都需要评审<br>这些声明可能在一行或多行注释中使用,并且应当遵循同一般注释类型相同的格式规则<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 我希望找到一种更快的方式</span></span><br><span class="line">doSomething();</span><br><span class="line"><span class="comment">// 不好的写法: 注释声明空格不正确</span></span><br><span class="line"><span class="comment">// TODO :  我希望找到一种更快的方式</span></span><br><span class="line">doSomething();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="comment">// REVIEW: 有更好的方法吗?</span></span><br><span class="line">doSomething();</span><br><span class="line"><span class="comment">// 不好的写法: 代码和注释应当保持同样的缩进</span></span><br><span class="line">    <span class="comment">// REVIEW: 有更好的方法吗?</span></span><br><span class="line">doSomething();</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-命名"><a href="#8-命名" class="headerlink" title="8.命名"></a>8.命名</h2><p>变量命名应当采用驼峰命名格式,首字母小写,每个单词首字母大写.变量名的第一个单词应当是一个名词(而非动词)比避免同函数混淆.不要在变量名中使用下划线<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">const</span> myName = <span class="string">'Jack'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法: 大写字母开头</span></span><br><span class="line"><span class="keyword">const</span> MyName = <span class="string">'Jack'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法: 动词开头</span></span><br><span class="line"><span class="keyword">const</span> getMyName = <span class="string">'Jack'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法: 使用下划线</span></span><br><span class="line"><span class="keyword">const</span> my_name = <span class="string">'Jack'</span>;</span><br></pre></td></tr></table></figure></p><p>函数命名应当采用驼峰命名格式.函数名的第一个单词应当是动词(而非名词)来避免同变量混淆.函数名中最好不要使用下划线.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法: 大写字母开头</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法: 名词开头</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">car</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法: 使用下划线</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_something</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构造函数–通过new元素安抚创建新对象的函数–也应使用驼峰合适命名,首先首字母大写.构造函数命名应当以非动词开头,因为new代表着创建一个对象实例的操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法: 小写字母开头</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法: 使用下划线</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">My_Object</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法: 动词开头</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMyObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量(不会被改变的变量)的命名应当是所有字母大写,不同单词之间用单个下划线隔开.ES6中使用const来声明一个常量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">const</span> TOTAL_COUNT = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 不好的写法</span></span><br><span class="line"><span class="keyword">const</span> totalCount = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 不好的写法: 混合模式</span></span><br><span class="line"><span class="keyword">const</span> total_COUNT = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p><p>对象的属性同变量的命名规范相同.对象的方法同函数的命名规则相同.如果属性或者方法是私有的,应当在之前加一个下划线<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">    _count: <span class="number">10</span>,</span><br><span class="line"></span><br><span class="line">    _getCount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="9-赋值"><a href="#9-赋值" class="headerlink" title="9.赋值"></a>9.赋值</h2><p>当给变量赋值时,如果右侧是含有比较语句的表达式,需要用圆括号包裹<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">const</span> flag = (i &lt; count);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法:遗漏圆括号</span></span><br><span class="line"><span class="keyword">const</span> flag = i &lt; count;</span><br></pre></td></tr></table></figure></p><h2 id="10-等号运算符"><a href="#10-等号运算符" class="headerlink" title="10.等号运算符"></a>10.等号运算符</h2><p>使用 === (严格相等) 和 !==(严格不相等)代替 ==(相等) 和 !=(不等) 来避免弱类型转换错误<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">const</span> same = (a === b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法: 使用 == </span></span><br><span class="line"><span class="keyword">const</span> same = (a == b);</span><br></pre></td></tr></table></figure></p><h2 id="11-三元操作符"><a href="#11-三元操作符" class="headerlink" title="11.三元操作符"></a>11.三元操作符</h2><p>三元运算符应当仅仅用在条件赋值语句中,而不要作为if语句的替代品.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">const</span> value = condition ? value1 : value2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法: 没有赋值,应当使用 if 表达式</span></span><br><span class="line">condition ? doSomething() : doSomethingElse();</span><br></pre></td></tr></table></figure></p><h2 id="12-语句"><a href="#12-语句" class="headerlink" title="12.语句"></a>12.语句</h2><h3 id="简单语句"><a href="#简单语句" class="headerlink" title="简单语句"></a>简单语句</h3><p>每一行最多只包含一条语句.所有简单的语句都应该以分号(;)结束.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> c = a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法: 多个表达式写在一行</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;<span class="keyword">const</span> b = <span class="number">2</span>;<span class="keyword">const</span> c = a + b;</span><br></pre></td></tr></table></figure></p><h3 id="返回语句"><a href="#返回语句" class="headerlink" title="返回语句"></a>返回语句</h3><p>返回语句当返回一个值的时候不应当使用圆括号包裹,除非在某些情况下这么做可以让返回值更容易理解.例如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">return</span> collection.size();</span><br><span class="line"><span class="keyword">return</span> (size &gt; <span class="number">0</span> ? size : defaultSize)</span><br></pre></td></tr></table></figure></p><h3 id="复合语句"><a href="#复合语句" class="headerlink" title="复合语句"></a>复合语句</h3><p>复合语句是大括号括起来的语句列表;</p><ul><li>括起来的语句应当较复合语句多缩进一个层级</li><li>开始的大括号应当在复合语句所在行的末尾;结束的大括号应当独占一行且同复合语句的开始保持同样的缩进.</li><li>当括号时控制结构的一部分时,诸如if或者for语句,所有语句都需要用打括号括起来,也包括单个语句.这个约定使得我们更方便地添加语句而不用担心忘记加括号而引起bug</li><li>像if一样的语句开始的关键词,其后应当紧跟一个空格,起始大括号应当在空格之后</li></ul><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绝不允许在if语句中省略花括号<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 不好的写法: 不恰当的空格</span></span><br><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 不好的写法: 遗漏花括号</span></span><br><span class="line"><span class="keyword">if</span> (condition) </span><br><span class="line">    doSomething();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法: 所有代码写在一行</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123; doSomething(); &#125;</span><br><span class="line"><span class="comment">// 不好的写法: 所有代码写在一行且没有花括号</span></span><br><span class="line"><span class="keyword">if</span> (condition) doSomething();</span><br></pre></td></tr></table></figure></p><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (initialization; condition; update) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (constiable <span class="keyword">in</span> object) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用 for-in 语句时,记得使用 hasOwnProperty() 进行双重检查来过滤出对象的成员</p><h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="do语句"><a href="#do语句" class="headerlink" title="do语句"></a>do语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125; <span class="keyword">while</span> (condition)</span><br></pre></td></tr></table></figure><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> expression:</span><br><span class="line">        statements</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch下的每一个case都叮当保持一个缩进.除第一个之外包括default在内的每一个case都应当在之前保持一个空行<br>每一组语句(除了default)都应当以break, return, throw结尾,或者用一行注释表示跳过<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">switch</span> (value) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">       <span class="comment">/* falls through */</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        doSomething();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'this should not happen'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="try语句"><a href="#try语句" class="headerlink" title="try语句"></a>try语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125; <span class="keyword">catch</span> (constiable) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-严格模式"><a href="#13-严格模式" class="headerlink" title="13.严格模式"></a>13.严格模式</h2><p>严格模式应当仅限在函数内部使用,千万不要在全局使用.</p><blockquote><p>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”;。</p></blockquote><h2 id="14-变量声明"><a href="#14-变量声明" class="headerlink" title="14.变量声明"></a>14.变量声明</h2><p>所有的变量在使用前都应事先定义.变量定义应放在函数开头.<br>变量定义前应当初始化,并且赋值操作符应当保持一致的缩进.初始化的变量应当在未初始化变量之前.</p><blockquote><p>推荐使用<a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noopener">ES6的<code>let</code>和 <code>const</code></a>来声明变量</p></blockquote><h2 id="15-函数声明"><a href="#15-函数声明" class="headerlink" title="15.函数声明"></a>15.函数声明</h2><p>函数声明应当在使用前提前定义.<br>一个不是作为方法的函数(也就是没有作为一个对象的属性)应当使用函数定义的格式(不是函数表达式和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noopener">Function构造器</a>格式).<br>函数名和开始圆括号之前不应当有空格.结束的圆括号和右边的花括号之间应该留一个空格.右侧的花括号应当同function关键字保持同一行.开始和结束括号之间不应该有空格.参数名之间应当在逗号之后保留一个空格.函数体应当保持一级缩进<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg1, agr2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg1 + arg2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法: 第一行不恰当的空格</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span> (<span class="params">arg1, agr2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg1 + arg2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法: </span></span><br><span class="line"><span class="keyword">const</span> doSomething = <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg1, agr2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg1 + arg2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法: 左侧的花括号位置不对</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg1, agr2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg1 + arg2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误的写法: 使用Function构造器</span></span><br><span class="line"><span class="keyword">const</span> doSomething = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'arg1'</span>, <span class="string">'agr2'</span>, <span class="string">'return arg1 + arg2'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="16-留白"><a href="#16-留白" class="headerlink" title="16.留白"></a>16.留白</h2><p>在逻辑相关的代码块之间添加空行可以提高代码的可读性</p><p>两行空行权限在如下情况使用</p><ul><li>在不同的源代码文件之间</li><li>在类和接口定义之间</li></ul><p>单行空行权限在如下情况使用</p><ul><li>方法之间</li><li>方法中局部变量和第一行语句之间</li><li>多行或单行注释之前</li><li>方法中逻辑代码块之间以提高代码的可读性</li></ul><p>空格应当在如下情况中使用</p><ul><li>关键词后跟括号的情况应当用空格隔开</li><li>参数列表中逗号之后应当保留一个空格</li><li>所有的除了点(.)之外的二元运算符,其操作数都应当用空格隔开.单目运算符的操作数之间不应该用空白隔开,诸如一元减号,递增(++),递减(–)</li><li>for语句中的表达式之间应当用空格隔开</li></ul><h2 id="17-需要避免的"><a href="#17-需要避免的" class="headerlink" title="17. 需要避免的"></a>17. 需要避免的</h2><ul><li>切勿使用像String一类的原始包装类型创建的新对象</li><li>避免使用eval()</li><li>避免使用with语句.改语句在严格模式中不复存在,可能在未来也将去除</li></ul><h1 id="使用工具-eslint-来强制约束"><a href="#使用工具-eslint-来强制约束" class="headerlink" title="使用工具(eslint)来强制约束"></a>使用工具(eslint)来强制约束</h1><h2 id="eslint-规则"><a href="#eslint-规则" class="headerlink" title="eslint 规则"></a>eslint 规则</h2><p>eslint规则在.eslintrc.js中定义,觉得不合理的可以禁掉某条规则,或者有好的建议的也可以添加;<br>主要注意一下几条:</p><ul><li>代码缩进用4空格</li><li>语句必须默认后加分号</li><li>使用单引号</li><li>提交代码前将console.log语句删掉或注释掉(不然影响其他开发人员调试)</li><li>禁止使用const,使用es6的let,const声明变量</li></ul><p>还有一些情况是不需要检测的,例如第3方的库, 框架、组件、ui库等等,可以将这些文件放在.eslintignore文件中,可以忽略eslint的检测</p><p>在文件顶部加上下面这行,可以禁掉整个文件的eslint规则<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br></pre></td></tr></table></figure></p><h2 id="pre-commit"><a href="#pre-commit" class="headerlink" title="pre-commit"></a>pre-commit</h2><p>代码提交之前会强制code-review,不符合规范的不允许提交代码<br>使用方法<br>1.在命令行安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev pre-commit</span><br></pre></td></tr></table></figure></p><p>2.在package.json中配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">        <span class="string">"eslint"</span>: <span class="string">"eslint ./ --ext js,vue --ignore-pattern .eslintignore --cache --fix"</span>,</span><br><span class="line">        <span class="string">"lint-message"</span>: <span class="string">"echo '开始 eslint 检查, 存在 error 则会拒绝提交'"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"pre-commit"</span>: [</span><br><span class="line">        <span class="string">"lint-message"</span>,</span><br><span class="line">        <span class="string">"eslint"</span> <span class="comment">// 进行eslint检查并自动修复一些简单的格式错误</span></span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码提交之前会强制code-review,不符合规范的不允许提交代码</p><p>如果项目实在没时间去改的话，可以 <code>git commit -m &#39;XXX&#39; --no-verify 或 git commit -n &#39;xxx&#39;</code>强制提交</p><h2 id="小技巧-vscode可以配置保存自动修复eslint错误"><a href="#小技巧-vscode可以配置保存自动修复eslint错误" class="headerlink" title="小技巧-vscode可以配置保存自动修复eslint错误"></a>小技巧-vscode可以配置保存自动修复eslint错误</h2><p>vscode安装eslint插件,在配置中配置如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="string">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="string">"eslint.enable"</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="string">"eslint.options"</span>: &#123;</span><br><span class="line">        <span class="string">"extensions"</span>: [<span class="string">".js"</span>, <span class="string">".vue"</span>, <span class="string">".jsx"</span>]</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="string">"eslint.validate"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line"></span><br><span class="line">              <span class="string">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">              <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="string">"language"</span>: <span class="string">"javascript"</span>,</span><br><span class="line">              <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="string">"language"</span>: <span class="string">"javascriptreact"</span>,</span><br><span class="line">              <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">      ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>配置完成之后,每次保存,都会自动根据 <code>.eslintrc.js</code>文件自动修复空格,分号的错误;但是最好还是在平常的编码中养成一个良好的习惯,而不是依赖工具.</p></blockquote><p>下列参考给出的文章及书籍，有时间一定要好好看一下，会帮助大家深刻理解JavaScript编码风格的重要性。永远记住，规范能解决大部分问题。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://book.douban.com/subject/21792530/" target="_blank" rel="noopener">编写可维护的JavaScript</a></li><li><a href="https://book.douban.com/subject/4881987/" target="_blank" rel="noopener">编写高质量代码:Web前端开发修炼之道</a></li><li><a href="https://book.douban.com/subject/4199741/" target="_blank" rel="noopener">代码整洁之道</a></li><li><a href="https://eslint.org/" target="_blank" rel="noopener">ESLint</a></li><li><a href="http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html" target="_blank" rel="noopener">JavaScript编码风格</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客域名更改说明</title>
      <link href="/2018/06/18/2018-06-18-%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E6%9B%B4%E6%94%B9%E8%AF%B4%E6%98%8E/"/>
      <url>/2018/06/18/2018-06-18-%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E6%9B%B4%E6%94%B9%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客域名更改说明<br><code>wangyaxing.top</code> 改为 <a href="https://wangyaxing.cn/">wangyaxing.cn</a>;</p></blockquote><a id="more"></a><p>今天是端午节，首先祝大家端午安康，假期最后一天，好好耍一天，明天开始投入工作；</p><p>该博客大概是从2017年8月份开始的，截止到今天，也差不多快一年了。总浏览量为16000左右，访客大概8000左右。没有刻意的宣传，大多数流量来自于搜索引擎。</p><p>换了新域名后，浏览量和阅读量这些数据都消失了，因为是绑在之前的域名下的。不过，那就从今天重新开始吧!</p><p>通过博客也认识了很多有趣的小伙伴，也学到了很多东西。很感谢。</p><p>之后希望可以写出一些有深度的文章，博客更新的频率可以高一些；</p><p>希望大家可以持续关注我的博客，有问题随时给我指出，最后希望自己的博客可以给大家带来一点点帮助，共同成长</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex使用</title>
      <link href="/2018/04/27/2018-04-27-vuex%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/04/27/2018-04-27-vuex%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>vuex中几个核心概念: state, getters, mutations, actions, module</p></blockquote><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>可以把Vuex看成是一个前端的”数据库”(store), 修改”数据库”中一个值,则所有使用到该值得地方都会得到相应的更新</p><h1 id="vuex用法"><a href="#vuex用法" class="headerlink" title="vuex用法"></a>vuex用法</h1><h2 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h2><p>可以认为是store的计算属性;与计算属性一样,getter的返回值会根据它的依赖缓存起来,且只有当它的依赖值发生变化才会被重新计算</p><h3 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h3><p>辅助函数仅仅是将 store 中的 getter 映射到局部计算属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">  <span class="comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">'doneTodosCount'</span>,</span><br><span class="line">      <span class="string">'anotherGetter'</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mutations-只能是同步操作"><a href="#mutations-只能是同步操作" class="headerlink" title="mutations 只能是同步操作"></a>mutations 只能是同步操作</h2><p>更改vuex的store中的状态的唯一方法就是提交 mutations<br>在 mutation 中混合异步调用会导致你的程序很难调试。例如，当你能调用了两个包含异步回调的 mutation 来改变状态，你怎么知道什么时候回调和哪个先回调呢？</p><p>mutation必须是同步函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  someMutation (state) &#123;</span><br><span class="line">    api.callAsyncMethod(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在想象，我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志。每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。然而，在上面的例子中 mutation 中的异步函数中的回调让这不可能完成：因为当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——实质上任何在回调函数中进行的状态的改变都是不可追踪的。</p><h3 id="在组件中提交mutations"><a href="#在组件中提交mutations" class="headerlink" title="在组件中提交mutations"></a>在组件中提交mutations</h3><p>你可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 <code>mapMutations</code> 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      <span class="string">'increment'</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.commit('increment')`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapMutations` 也支持载荷：</span></span><br><span class="line">      <span class="string">'incrementBy'</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      add: <span class="string">'increment'</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit('increment')`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="actions-可以是异步操作"><a href="#actions-可以是异步操作" class="headerlink" title="actions 可以是异步操作"></a>actions 可以是异步操作</h2><ul><li>action提交的是mutation,而不是直接更改状态</li><li>action 可以包含任何异步操作</li></ul><h3 id="分发-action"><a href="#分发-action" class="headerlink" title="分发 action"></a>分发 action</h3><h3 id="在组件中分发Action"><a href="#在组件中分发Action" class="headerlink" title="在组件中分发Action"></a>在组件中分发Action</h3><p>你在组件中使用 this.$store.dispatch(‘xxx’) 分发 action，或者使用 <code>mapActions</code> 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([</span><br><span class="line">      <span class="string">'increment'</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.dispatch('increment')`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapActions` 也支持载荷：</span></span><br><span class="line">      <span class="string">'incrementBy'</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch('incrementBy', amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapActions(&#123;</span><br><span class="line">      add: <span class="string">'increment'</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.dispatch('increment')`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合-Action"><a href="#组合-Action" class="headerlink" title="组合 Action"></a>组合 Action</h3><p>Action 通常是异步的，那么如何知道 action 什么时候结束呢？更重要的是，我们如何才能组合多个 action，以处理更加复杂的异步流程？</p><p>首先，你需要明白 store.dispatch 可以处理被触发的 action 的处理函数返回的 Promise，并且 store.dispatch 仍旧返回 Promise：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 getData() 和 getOtherData() 返回的是 Promise</span></span><br><span class="line"></span><br><span class="line">actions: &#123;</span><br><span class="line">  <span class="keyword">async</span> actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'gotData'</span>, <span class="keyword">await</span> getData())</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">await</span> dispatch(<span class="string">'actionA'</span>) <span class="comment">// 等待 actionA 完成</span></span><br><span class="line">    commit(<span class="string">'gotOtherData'</span>, <span class="keyword">await</span> getOtherData())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>由于使用单一状态树,应用的所有状态会集中到一个比较大的对象;当应用变得非常复杂时,store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure><p>如果你希望使用全局 <code>state</code> 和 <code>getter</code>，<code>rootState</code> 和 <code>rootGetter</code> 会作为第三和第四参数传入 getter，也会通过 context 对象的属性传入 action。</p><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>默认情况下，模块内部的 action、mutation 和 getter 是注册在全局命名空间的——这样使得多个模块能够对同一 mutation 或 action 作出响应。</p><p>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 namespaced: true 的方式使其成为命名空间模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    account: &#123;</span><br><span class="line">      namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 模块内容（module assets）</span></span><br><span class="line">      state: &#123; ... &#125;, <span class="comment">// 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响</span></span><br><span class="line">      getters: &#123;</span><br><span class="line">        isAdmin () &#123; ... &#125; <span class="comment">// -&gt; getters['account/isAdmin']</span></span><br><span class="line">      &#125;,</span><br><span class="line">      actions: &#123;</span><br><span class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; dispatch('account/login')</span></span><br><span class="line">      &#125;,</span><br><span class="line">      mutations: &#123;</span><br><span class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; commit('account/login')</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 嵌套模块</span></span><br><span class="line">      modules: &#123;</span><br><span class="line">        <span class="comment">// 继承父模块的命名空间</span></span><br><span class="line">        myPage: &#123;</span><br><span class="line">          state: &#123; ... &#125;,</span><br><span class="line">          getters: &#123;</span><br><span class="line">            profile () &#123; ... &#125; <span class="comment">// -&gt; getters['account/profile']</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进一步嵌套命名空间</span></span><br><span class="line">        posts: &#123;</span><br><span class="line">          namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">          state: &#123; ... &#125;,</span><br><span class="line">          getters: &#123;</span><br><span class="line">            popular () &#123; ... &#125; <span class="comment">// -&gt; getters['account/posts/popular']</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>如果你希望使用全局 state 和 getter，rootState 和 rootGetter 会作为第三和第四参数传入 getter，也会通过 context 对象的属性传入 action。<br>若需要在全局命名空间内分发 action 或提交 mutation，将 { root: true } 作为第三参数传给 dispatch 或 commit 即可。</p><h1 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h1><h2 id="默认情况下-模块内的getter-mutation-action是注册在全局空间的-state只注册在局部命名空间的"><a href="#默认情况下-模块内的getter-mutation-action是注册在全局空间的-state只注册在局部命名空间的" class="headerlink" title="默认情况下,模块内的getter, mutation,action是注册在全局空间的,state只注册在局部命名空间的;"></a>默认情况下,模块内的getter, mutation,action是注册在全局空间的,state只注册在局部命名空间的;</h2><p>要想使模块内的getter, mutation,action注册在模块命名空间,必须在模块内加上 namespaced: true</p><p><img src="https://cdn.wangyaxing.cn/vuex1.jpeg" alt="未使用命名空间"><br><img src="https://cdn.wangyaxing.cn/vuex2.jpeg" alt="使用命名空间"><br>使用命名空间在调用action时必须使用<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'hero1/getHeroInfo'</span>);</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">      doneTodosCount () &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters[<span class="string">'hero1/doneTodos'</span>][<span class="number">0</span>].item;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><p>  <a href="https://stackoverflow.com/questions/41833424/how-to-access-vuex-module-getters-and-mutations" target="_blank" rel="noopener">参考链接</a></p><h2 id="页面刷新时-store中的数据会清空"><a href="#页面刷新时-store中的数据会清空" class="headerlink" title="页面刷新时,store中的数据会清空"></a>页面刷新时,store中的数据会清空</h2><p>解决方案<br><a href="https://stackoverflow.com/questions/43027499/vuex-state-on-page-refresh" target="_blank" rel="noopener">https://stackoverflow.com/questions/43027499/vuex-state-on-page-refresh</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单实现一个Virtual DOM</title>
      <link href="/2018/04/23/2018-04-20-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAVirtual-DOM/"/>
      <url>/2018/04/23/2018-04-20-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAVirtual-DOM/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写过一篇文章<a href="//wangyaxing.cn/2018/03/18/2018-03-18-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8v-for%E6%97%B6%E5%BF%85%E9%A1%BB%E6%B7%BB%E5%8A%A0%E5%94%AF%E4%B8%80%E7%9A%84key/">为什么使用v-for时必须添加唯一的key?</a>,但是解释的不是很深刻，其实真正的原因还需要从Virtual DOM的实现上解释；本篇文章从简单实现一个Virtual DOM入手，去解释一下Virtual DOM的实现思想;</p><p>源码地址：<a href="https://github.com/funnycoderstar/simple-virtual-dom" target="_blank" rel="noopener">github</a></p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.定义一个类,用来创建 DOM 元素(element.js);</p><p>2.比较新旧 DOM 树的差异(diff.js);</p><p>3.将差异的部分渲染到DOM树即只渲染变化了的部分(patch.js)</p><h2 id="virtural-dom的模型"><a href="#virtural-dom的模型" class="headerlink" title="virtural-dom的模型"></a>virtural-dom的模型</h2><p>一个DOM标签所需的基本元素</p><ul><li>标签名</li><li>节点属性,包含样式,属性,事件</li><li>子节点</li><li>标识id<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 标签名</span></span><br><span class="line">    tagName: <span class="string">'div'</span>,</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// 样式</span></span><br><span class="line">        style: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 子节点</span></span><br><span class="line">    children: [],</span><br><span class="line">    <span class="comment">// 唯一标识</span></span><br><span class="line">    key: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="一-用javascript对象表示DOM结构"><a href="#一-用javascript对象表示DOM结构" class="headerlink" title="一:  用javascript对象表示DOM结构"></a>一:  用javascript对象表示DOM结构</h3><p>为了实现这个需求，下面使用element.js。</p><p>原理: </p><p>1.根据 tagName 使用 <code>document.createElement</code>创建元素</p><p>2.根据 props 使用 <code>setAttribute</code>给元素设置属性</p><p>3.根据 innerHtml 使用 <code>document.createTextNode</code> 渲染文本节点</p><p>4.根据是否有 children (子元素) 去递归渲染</p><p>5.最后使用<code>appendChild</code>将创建的元素插入到页面中</p><p>然后代码和使用方式如下</p><p>element.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(tagName, ...args) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tagName = tagName;</span><br><span class="line">        <span class="comment">// 判断下面还有没有子元素</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(args[<span class="number">0</span>])) &#123;</span><br><span class="line">            <span class="keyword">this</span>.props = &#123;&#125;;</span><br><span class="line">            <span class="keyword">this</span>.children = args[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.props = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">this</span>.children = args[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.key = <span class="keyword">this</span>.props.key || <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="comment">// 创建一个元素</span></span><br><span class="line">        <span class="keyword">const</span> $dom = <span class="built_in">document</span>.createElement(<span class="keyword">this</span>.tagName);</span><br><span class="line">        <span class="comment">// 给元素加上所有的属性</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> proKey <span class="keyword">in</span> <span class="keyword">this</span>.props) &#123;</span><br><span class="line">            $dom.setAttribute(proKey, <span class="keyword">this</span>.props[proKey]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果存在子节点</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.children) &#123;</span><br><span class="line">            <span class="keyword">this</span>.children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 如果子元素还包含子元素,则递归</span></span><br><span class="line">                <span class="keyword">if</span>(child <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">                    $dom.appendChild(child.render());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $dom.appendChild(<span class="built_in">document</span>.createTextNode(child))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $dom;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Element;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> tree = <span class="keyword">new</span> Element(<span class="string">'div'</span>, &#123;<span class="attr">classname</span>: <span class="string">'div'</span>&#125;, [</span><br><span class="line">    <span class="keyword">new</span> Element(<span class="string">'h1'</span>, &#123;<span class="attr">style</span>: <span class="string">'color: red;'</span>&#125;,[<span class="string">'Hello, This is my Vdom library'</span>]),</span><br><span class="line">    <span class="keyword">new</span> Element(<span class="string">'ul'</span>, [</span><br><span class="line">        <span class="keyword">new</span> Element(<span class="string">'li'</span>, [<span class="string">'1111'</span>]),</span><br><span class="line">        <span class="keyword">new</span> Element(<span class="string">'li'</span>, [<span class="string">'2222'</span>]),</span><br><span class="line">    ])</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">const</span> $dom = tree.render();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">111</span>, $dom);</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3297464-3b8853d52dd83f2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>这跟vue的render方法很相似<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> h(<span class="string">'div'</span>, &#123;</span><br><span class="line">        style: &#123;</span><br><span class="line">            background: <span class="string">'#fff'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        class: &#123;</span><br><span class="line">            <span class="string">'content'</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        on: &#123;</span><br><span class="line">            click: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            mouseenter: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            mouseleave: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;, [</span><br><span class="line">        h(<span class="string">'p'</span>, &#123;&#125;, <span class="string">'文本'</span>)</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure></p><p>vue中也是把template解析成render模板进行渲染的;</p><h3 id="二-比较新旧-DOM树的差异"><a href="#二-比较新旧-DOM树的差异" class="headerlink" title="二: 比较新旧 DOM树的差异"></a>二: 比较新旧 DOM树的差异</h3><h3 id="差异类型"><a href="#差异类型" class="headerlink" title="差异类型"></a>差异类型</h3><p>对DOM的操作也就是对节点的增删改查操作,当前定义了如下几种类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">patch.NODE_DELETE = <span class="string">'NODE_DELETE'</span>; <span class="comment">// 节点被删除</span></span><br><span class="line">patch.NODE_TEXT_MODIFY = <span class="string">'NODE_TEXT_MODIFY'</span>; <span class="comment">// 文本节点被更改</span></span><br><span class="line">patch.NODE_REPLACE = <span class="string">'NODE_REPLACE'</span>; <span class="comment">// 节点被替代</span></span><br><span class="line">patch.NODE_ADD = <span class="string">'NODE_ADD'</span>; <span class="comment">// 添加节点</span></span><br><span class="line">patch.NODE_ATTRIBUTE_MODIFY = <span class="string">'NODE_ATTRIBUTE_MODIFY'</span>; <span class="comment">// 更新属性</span></span><br><span class="line">patch.NODE_ATTRIBUTE_ADD = <span class="string">'NODE_ATTRIBUTE_ADD'</span>; <span class="comment">// 添加属性</span></span><br><span class="line">patch.NODE_ATTRIBUTE_DELETE = <span class="string">'NODE_ATTRIBUTE_DELETE'</span>; <span class="comment">// 删除属性</span></span><br></pre></td></tr></table></figure><h4 id="深度优先遍历-记录差异"><a href="#深度优先遍历-记录差异" class="headerlink" title="深度优先遍历,记录差异"></a>深度优先遍历,记录差异</h4><blockquote><p>首先简单解释一下什么是深度优先遍历和广度优先遍历:</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/3297464-e818c608d2752bef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dep.png"></p><p> 对于一颗二叉树，深度优先搜索(Depth First Search)是沿着树的深度遍历树的节点，尽可能深的搜索树的分支。以上面二叉树为例，深度优先搜索的顺序为：ABDECFG。怎么实现这个顺序呢 ？深度优先搜索二叉树是先访问根结点，然后遍历左子树接着是遍历右子树，因此我们可以利用堆栈的先进后出的特点，现将右子树压栈，再将左子树压栈，这样左子树就位于栈顶，可以保证结点的左子树先与右子树被遍历。</p><p>　　广度优先搜索(Breadth First Search),又叫宽度优先搜索或横向优先搜索，是从根结点开始沿着树的宽度搜索遍历，上面二叉树的遍历顺序为：ABCDEFG.</p><blockquote><p>接下来简单说一下比较的过程</p></blockquote><p>1.比较属性的变化</p><p>遍历旧的属性,找到被删除和修改的情况</p><ul><li>新属性中不存在,旧属性存在,属性被删除</li><li>新旧属性中都存在,但是值不同: 属性值被修改<br>遍历新元素的属性,找到添加的属性</li></ul><p>2.比较子元素的变化</p><p>3.比较innerHTML的变化</p><p>使用pathes 来存储差异</p><p>完整代码如下<br>diff.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> patch <span class="keyword">from</span> <span class="string">'./patch'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diff</span>(<span class="params">oldTree, newTree</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> patches = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> index = &#123;</span><br><span class="line">        value: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    dfsWalk(oldTree, newTree, index, patches);</span><br><span class="line">    <span class="keyword">return</span> patches;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 比较属性的变化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diffProps</span>(<span class="params">oldProps, newProps, index, currentIndexPatches</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 遍历旧的属性,找到被删除和修改的情况</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> propKey <span class="keyword">in</span> oldProps) &#123;</span><br><span class="line">        <span class="comment">// 新属性中不存在,旧属性存在,属性被删除</span></span><br><span class="line">        <span class="keyword">if</span> (!newProps.hasOwnProperty(propKey)) &#123;</span><br><span class="line">            currentIndexPatches.push(&#123;</span><br><span class="line">                type: patch.NODE_ATTRIBUTE_DELETE,</span><br><span class="line">                key: propKey,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newProps[propKey] !== oldProps[propKey]) &#123;</span><br><span class="line">            <span class="comment">// 新旧属性中都存在,但是值不同: 属性被修改</span></span><br><span class="line">            currentIndexPatches.push(&#123;</span><br><span class="line">                type: patch.NODE_ATTRIBUTE_MODIFY,</span><br><span class="line">                key: propKey,</span><br><span class="line">                alue: newProps[propKey],</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历新元素,找到添加的部分</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> propKey <span class="keyword">in</span> newProps) &#123;</span><br><span class="line">        <span class="comment">// 旧属性中不存在,新属性中存在: 添加属性</span></span><br><span class="line">        <span class="keyword">if</span> (!oldProps.hasOwnProperty(propKey)) &#123;</span><br><span class="line">            currentIndexPatches.push(&#123;</span><br><span class="line">                type: patch.NODE_ATTRIBUTE_ADD,</span><br><span class="line">                key: propKey,</span><br><span class="line">                value: newProps[propKey]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 顺序比较子元素的变化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diffChildren</span>(<span class="params">oldChildren, newChildren, index, currentIndexPatches, patches</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> currentIndex = index.value;</span><br><span class="line">    <span class="keyword">if</span> (oldChildren.length &lt; newChildren.length) &#123;</span><br><span class="line">        <span class="comment">// 有元素被添加</span></span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; oldChildren.length; i++) &#123;</span><br><span class="line">            </span><br><span class="line">            index.value++;</span><br><span class="line">            dfsWalk(oldChildren[i], newChildren[i], index, patches)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; newChildren.length; i++) &#123;</span><br><span class="line">            currentIndexPatches.push(&#123;</span><br><span class="line">                type: patch.NODE_ADD,</span><br><span class="line">                value: newChildren[i]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 对比新旧子元素的变化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; oldChildren.length; i++) &#123;</span><br><span class="line">            index.value++;</span><br><span class="line">            dfsWalk(oldChildren[i], newChildren[i], index, patches)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 比较innerHTML的变化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfsWalk</span>(<span class="params">oldNode, newNode, index, patches</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> currentIndex = index.value;</span><br><span class="line">    <span class="keyword">const</span> currentIndexPatches = [];</span><br><span class="line">    <span class="keyword">if</span>(newNode === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="comment">// 节点被移除</span></span><br><span class="line">        currentIndexPatches.push(&#123;</span><br><span class="line">            type: patch.NODE_DELETE,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> oldNode === <span class="string">'string'</span> &amp;&amp; <span class="keyword">typeof</span> newNode === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="comment">// 文本节点被修改</span></span><br><span class="line">        <span class="keyword">if</span>(oldNode !== newNode) &#123;</span><br><span class="line">            currentIndexPatches.push(&#123;</span><br><span class="line">                type: patch.NODE_TEXT_MODIFY,</span><br><span class="line">                value: newNode,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(oldNode.tagName === newNode.tagName &amp;&amp; oldNode.key === newNode.key) &#123;</span><br><span class="line">        <span class="comment">// 同时根据tagName和key来进行对比</span></span><br><span class="line">        diffProps(oldNode.props, newNode.props, index, currentIndexPatches);</span><br><span class="line">        diffChildren(oldNode.children, newNode.children, index, currentIndexPatches, patches);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        currentIndexPatches.push(&#123;</span><br><span class="line">            type: patch.NODE_REPLACE,</span><br><span class="line">            value: newNode,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(currentIndexPatches.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        patches[currentIndex] = currentIndexPatches;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> diff;</span><br></pre></td></tr></table></figure><p>需要注意的是，因为tagName是重复的，不能用这个进行对比，所以需要给子节点加上唯一的标识key,列表对比的时候，使用key进行对比，这样才能复用老的DOM树上的节点;</p><blockquote><p>为了实现深度优先遍历,记录差异，这里使用列表计算法</p></blockquote><p>求最小的插入,删除操作的组合；这个问题抽象出来其实是字符串的最小编辑距离问题（<a href="https://en.wikipedia.org/wiki/Edit_distance" target="_blank" rel="noopener">Edition Distance</a>），最常见的解决算法是 <a href="https://en.wikipedia.org/wiki/Levenshtein_distance" target="_blank" rel="noopener">Levenshtein Distance</a>，通过动态规划求解。我们需要优化一下最常见的操作；具体的实现算法也很多；</p><blockquote><p>当前实现的简单 Virtual DOM, 并没有实现如果是数组,会优先使用key去做对比; 下面大致从Vue虚拟DOM的Diff算法实现的角度去解释一下之前的一篇文章<a href="http://wangyaxing.cn/2018/03/18/2018-03-18-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8v-for%E6%97%B6%E5%BF%85%E9%A1%BB%E6%B7%BB%E5%8A%A0%E5%94%AF%E4%B8%80%E7%9A%84key/">为什么使用v-for时必须添加唯一的key?</a></p></blockquote><p>vue和react的虚拟DOM的Diff算法大致相同，其核心是基于两个简单的假设：</p><ol><li>两个相同的组件产生类似的DOM结构，不同的组件产生不同的DOM结构。</li><li>同一层级的一组节点，他们可以通过唯一的id进行区分。基于以上这两点假设，使得虚拟DOM的Diff算法的复杂度从O(n^3)降到了O(n)。</li></ol><p>引用<a href="https://calendar.perfplanet.com/2013/diff/" title="Permanent Link to React’s diff algorithm" target="_blank" rel="noopener">React’s diff algorithm</a>中的例子:</p><p><img src="https://upload-images.jianshu.io/upload_images/3297464-0848720c71af2123.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="diff1.jpg"><br>当某一层有很多相同的节点时，也就是列表节点时，Diff算法的更新过程默认情况下也是遵循以上原则。<br>比如一下这个情况：<br><img src="https://upload-images.jianshu.io/upload_images/3297464-ee627869a6714336.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="diff2.jpg"><br>我们希望可以在B和C之间加一个F，Diff算法默认执行起来是这样的：<br><img src="https://upload-images.jianshu.io/upload_images/3297464-d912523aac5fd108.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="diff3.jpg"><br>即把C更新成F，D更新成C，E更新成D，最后再插入E，是不是很没有效率？</p><p>所以我们需要使用key来给每个节点做一个唯一标识，Diff算法就可以正确的识别此节点，找到正确的位置区插入新的节点。<br><img src="https://upload-images.jianshu.io/upload_images/3297464-650689b4bd4b9eb6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="diff4.jpg"></p><p>所以一句话，key的作用主要是为了高效的更新虚拟DOM。另外vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了让vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果。</p><h3 id="三：将差异的部分渲染到DOM树即只渲染变化了的部分"><a href="#三：将差异的部分渲染到DOM树即只渲染变化了的部分" class="headerlink" title="三：将差异的部分渲染到DOM树即只渲染变化了的部分"></a>三：将差异的部分渲染到DOM树即只渲染变化了的部分</h3><p>通过深度优先遍历，记录差异 patches,最后需要根据patches进行DOM操作;<br>paches记录了差异的类型;大致数据结构如下:</p><p><img src="https://upload-images.jianshu.io/upload_images/3297464-748c6919f1e69663.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>实现该过程的完整代码如下:</p><p>patch.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">$dom, patches</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> index = &#123;</span><br><span class="line">        value: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    dfsWalk($dom, index, patches);</span><br><span class="line">&#125;</span><br><span class="line">patch.NODE_DELETE = <span class="string">'NODE_DELETE'</span>; <span class="comment">// 节点被删除</span></span><br><span class="line">patch.NODE_TEXT_MODIFY = <span class="string">'NODE_TEXT_MODIFY'</span>; <span class="comment">// 文本节点被更改</span></span><br><span class="line">patch.NODE_REPLACE = <span class="string">'NODE_REPLACE'</span>; <span class="comment">// 节点被替代</span></span><br><span class="line">patch.NODE_ADD = <span class="string">'NODE_ADD'</span>; <span class="comment">// 添加节点</span></span><br><span class="line">patch.NODE_ATTRIBUTE_MODIFY = <span class="string">'NODE_ATTRIBUTE_MODIFY'</span>; <span class="comment">// 更新属性</span></span><br><span class="line">patch.NODE_ATTRIBUTE_ADD = <span class="string">'NODE_ATTRIBUTE_ADD'</span>; <span class="comment">// 添加属性</span></span><br><span class="line">patch.NODE_ATTRIBUTE_DELETE = <span class="string">'NODE_ATTRIBUTE_DELETE'</span>; <span class="comment">// 删除属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据不同类型的差异对当前节点进行 DOM 操作：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfsWalk</span>(<span class="params">$node, index, patches, isEnd = false</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (patches[index.value]) &#123;</span><br><span class="line">        patches[index.value].forEach(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (p.type) &#123;</span><br><span class="line">                <span class="keyword">case</span> patch.NODE_ATTRIBUTE_MODIFY:</span><br><span class="line">                    &#123;</span><br><span class="line">                        $node.setAttribute(p.key, p.value);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> patch.NODE_ATTRIBUTE_DELETE:</span><br><span class="line">                    &#123;</span><br><span class="line">                        $node.removeAttribute(p.key, p.value);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> patch.NODE_ATTRIBUTE_ADD:</span><br><span class="line">                    &#123;</span><br><span class="line">                        $node.setAttribute(p.key, p.value);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> patch.NODE_ADD:</span><br><span class="line">                    &#123;</span><br><span class="line">                        $node.appendChild(p.value.render());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> patch.NODE_TEXT_MODIFY:</span><br><span class="line">                    &#123;</span><br><span class="line">                        $node.textContent = p.value;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> patch.NODE_REPLACE:</span><br><span class="line">                    &#123;</span><br><span class="line">                        $node.replaceWith(p.value.render());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> patch.NODE_DELETE:</span><br><span class="line">                    &#123;</span><br><span class="line">                        $node.remove();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(p);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isEnd) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ($node.children.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; $node.children.length; i++) &#123;</span><br><span class="line">            index.value++;</span><br><span class="line">            dfsWalk($node.children[i], index, patches);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        index.value++;</span><br><span class="line">        dfsWalk($node, index, patches, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> patch;</span><br></pre></td></tr></table></figure></p><h2 id="最后测试一下"><a href="#最后测试一下" class="headerlink" title="最后测试一下"></a>最后测试一下</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1.构建虚拟DOM</span></span><br><span class="line"><span class="keyword">const</span> tree = <span class="keyword">new</span> Element(<span class="string">'div'</span>, &#123;<span class="attr">classname</span>: <span class="string">'div'</span>&#125;, [</span><br><span class="line">    <span class="keyword">new</span> Element(<span class="string">'h1'</span>, &#123;<span class="attr">style</span>: <span class="string">'color: red;'</span>&#125;,[<span class="string">'Hello, This is my Vdom library'</span>]),</span><br><span class="line">    <span class="keyword">new</span> Element(<span class="string">'ul'</span>, [</span><br><span class="line">        <span class="keyword">new</span> Element(<span class="string">'li'</span>, [<span class="string">'1111'</span>]),</span><br><span class="line">        <span class="keyword">new</span> Element(<span class="string">'li'</span>, [<span class="string">'2222'</span>]),</span><br><span class="line">    ])</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 2.通过虚拟DOM构建真正的DOM</span></span><br><span class="line"><span class="keyword">const</span> $dom = tree.render();</span><br><span class="line"><span class="keyword">const</span> $app = <span class="built_in">document</span>.querySelector(<span class="string">'#app'</span>);</span><br><span class="line">$app.replaceWith($dom);</span><br><span class="line"><span class="comment">// 3.生成新的虚拟DOM</span></span><br><span class="line"><span class="keyword">const</span> newTree = <span class="keyword">new</span> Element(<span class="string">'div'</span>, &#123;<span class="attr">id</span>: <span class="string">'div1'</span>&#125;, [</span><br><span class="line">    <span class="keyword">new</span> Element(<span class="string">'h1'</span>, &#123;<span class="attr">style</span>: <span class="string">'color: red;'</span>&#125;, [<span class="string">'Hello, This is my vdom library111'</span>]),</span><br><span class="line">    <span class="keyword">new</span> Element(<span class="string">'p'</span>, &#123;<span class="attr">style</span>: <span class="string">'color: blue;'</span>&#125;, [<span class="string">'extra text'</span>]),</span><br><span class="line">    <span class="keyword">new</span> Element(<span class="string">'ul'</span>, [</span><br><span class="line">        <span class="keyword">new</span> Element(<span class="string">'li'</span>, [<span class="string">'1111'</span>]),</span><br><span class="line">        <span class="keyword">new</span> Element(<span class="string">'li'</span>, [<span class="string">'5555'</span>]),</span><br><span class="line">        <span class="keyword">new</span> Element(<span class="string">'li'</span>, [<span class="string">'333'</span>]),</span><br><span class="line">    ])</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 4.比较新旧虚拟DOM树的差异</span></span><br><span class="line"><span class="keyword">const</span> patches = diff(tree, newTree);</span><br><span class="line"><span class="comment">// 5.根据变化了的部分去更新DOM</span></span><br><span class="line">patch($dom, patches);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.关键的几个文件就是： <a href="https://github.com/funnycoderstar/simple-virtual-dom/blob/master/lib/element.js" target="_blank" rel="noopener">element.js</a>, <a href="https://github.com/funnycoderstar/simple-virtual-dom/blob/master/lib/diff.js" target="_blank" rel="noopener">diff.js</a>, <a href="https://github.com/funnycoderstar/simple-virtual-dom/blob/master/lib/patch.js" target="_blank" rel="noopener">patch.js</a>;</p><p>2.github上有很多Virtual DOM实现的例子，博主也是参考了一下其他人的实现，感兴趣的可以去搜索看一下，或者自己实现一个</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/livoras/blog/issues/13" target="_blank" rel="noopener">深度剖析：如何实现一个 Virtual DOM 算法</a></li><li><a href="https://www.zhihu.com/question/61064119/answer/183717717" target="_blank" rel="noopener">Vue2.0 v-for 中 :key 到底有什么用？</a></li><li><a href="https://calendar.perfplanet.com/2013/diff/" title="Permanent Link to React’s diff algorithm" target="_blank" rel="noopener">React’s diff algorithm</a></li><li><a href="https://zhuanlan.zhihu.com/p/28697362" target="_blank" rel="noopener">react源码解析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中需要注意的问题总结(上)</title>
      <link href="/2018/04/15/2018-04-15-vue%E4%B8%AD%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93(%E4%B8%80)/"/>
      <url>/2018/04/15/2018-04-15-vue%E4%B8%AD%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<p><img src="//upload-images.jianshu.io/upload_images/1541368-d9be1b3b39abc037?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用vue的时候经常会遇到一些问题,其实仔细阅读查阅官方文档,就会发现文档中已提到一些格外需要注意的点; 为了深入的理解官方文档中对这些问题的解释,查阅了一些资料,再加上自己的理解,整理了一些常见的问题;如果哪方面解释的不太合理希望各路大神指出;</p><p>文章篇幅较长,但是很实用;</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>组件里面, data必须是一个函数</li><li>vue中$set的使用场景</li><li>vue生命周期详解</li><li>vue组件通信</li><li>vue组件之keep-alive</li><li>生命周期函数/methods/watch里面不应该使用箭头函数</li><li>methods/computed/watch</li></ul><a id="more"></a><h2 id="1-组件里面-data必须是一个函数"><a href="#1-组件里面-data必须是一个函数" class="headerlink" title="1.组件里面, data必须是一个函数"></a>1.组件里面, data必须是一个函数</h2><p>类比引用数据类型<br>Object是引用数据类型, 每个组件的data 都是内存的同一个地址,一个数据改变了其他也改变了;</p><p>那么用什么方法可以使每个组件的data相互独立,不受影响呢?</p><p>当一个组件被定义，data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！通过提供 data 函数，每次创建一个新实例后，我们能够调用 data 函数，从而返回初始数据的一个全新副本数据对象。</p><h2 id="2-vue中-set的使用场景"><a href="#2-vue中-set的使用场景" class="headerlink" title="2.vue中$set的使用场景"></a>2.vue中$set的使用场景</h2><h3 id="场景1"><a href="#场景1" class="headerlink" title="场景1:"></a>场景1:</h3><p>通过数组的下标去修改数组的值,数据已经被修改了,但是不触发updated函数,视图不更新,<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            items: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    updated () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'数据更新'</span>, <span class="keyword">this</span>.items[<span class="number">0</span>]);</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        changeItem1 () &#123;</span><br><span class="line">            <span class="keyword">this</span>.items[<span class="number">0</span>] = <span class="string">'x'</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">111</span>, <span class="keyword">this</span>.items[<span class="number">0</span>]);</span><br><span class="line">        &#125;,</span><br><span class="line">        changeItem2 () &#123;</span><br><span class="line">            <span class="keyword">this</span>.$<span class="keyword">set</span>(this.items, 0, 'x');</span><br><span class="line">            console.log(222, this.items[0]);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>执行changeItem1, 控制台打印 111 ‘x’, 没有触发updated,视图不更新<br>执行changeItem1, 控制台打印 222 ‘x’,  数据更新 ‘x’; 触发updated,视图更新</p><h3 id="场景2-vue中检测不到对象属性的添加和删除"><a href="#场景2-vue中检测不到对象属性的添加和删除" class="headerlink" title="场景2: vue中检测不到对象属性的添加和删除"></a>场景2: vue中检测不到对象属性的添加和删除</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">     userProfile: &#123;</span><br><span class="line">        name: <span class="string">'小明'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要给userProfile加一个age属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addProperty () &#123;</span><br><span class="line">     <span class="keyword">this</span>.userProfile.age = <span class="string">'12'</span>;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="number">555</span>, <span class="keyword">this</span>.userProfile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行addProperty函数时,打印如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">555</span> &#123; <span class="attr">name</span>: <span class="string">'小明'</span>, <span class="attr">age</span>: <span class="string">'12'</span>&#125;</span><br></pre></td></tr></table></figure><p>但是没有触发updated, 视图未更新<br>改成下面这种<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addProperty () &#123;</span><br><span class="line">      <span class="keyword">this</span>.$<span class="keyword">set</span>(this.userProfile, 'age', '12');</span><br><span class="line">      console.log(666, this.userProfile);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>再次执行, 数据发生变化,  触发updated, 视图更新;</p><p>有时你想向已有对象上添加一些属性，例如使用 Object.assign() 或 _.extend() 方法来添加属性。但是，添加到对象上的新属性不会触发更新。在这种情况下可以创建一个新的对象，让它包含原对象的属性和新的属性：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代替 `Object.assign(this.someObject, &#123; a: 1, b: 2 &#125;)`</span></span><br><span class="line"><span class="keyword">this</span>.someObject = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.someObject, &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;)</span><br></pre></td></tr></table></figure></p><p>这是vue中很典型的一个问题,使用的时候一定要注意!</p><h4 id="简单的解释一下原理"><a href="#简单的解释一下原理" class="headerlink" title="简单的解释一下原理:"></a>简单的解释一下原理:</h4><p>vue在创建实例的时候把data深度遍历所有属性,并使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">Object.defineProperty</a> 把这些属性全部转为 getter/setter。让 Vue 追踪依赖，在属性被访问和修改时通知变化。所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。<br>当你在对象上新加了一个属性 newProperty,当前新加的这个属性并没有加入vue检测数据更新的机制(因为是在初始化之后添加的),vue.$set是能让vue知道你添加了属性, 它会给你做处理</p><h2 id="3-vue生命周期详解"><a href="#3-vue生命周期详解" class="headerlink" title="3.vue生命周期详解"></a>3.vue生命周期详解</h2><h4 id="1-vue的生命周期"><a href="#1-vue的生命周期" class="headerlink" title="1. vue的生命周期"></a>1. vue的生命周期</h4><ul><li>beforeCreate: 组件实例刚刚被创建,组件属性计算之前,如data属性</li><li>created: 组件实例创建完成,属性已绑定,但是DOM还未完成,$el属性还不存在</li><li>beforeMount:模板编译/挂载之前</li><li>mounted: 模板编译/挂载之后</li><li>beforeUpdate: 组件更新之前</li><li>updated: 组件更新之后</li><li>activated: for <code>keep-alive</code>,组件被激活时调用</li><li>deactivated: for <code>keep-alive</code>,组件被移除时调用</li><li>beforeDestroy: 组件销毁前被调用</li><li>destoryed: 组件销毁后调用</li></ul><blockquote><p>ps:下面代码可以直接复制出去执行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://cdn.jsdelivr.net/vue/2.1.3/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;&#123;&#123;a&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">            el: '#app',</span></span><br><span class="line"><span class="regexp">            data: &#123;</span></span><br><span class="line"><span class="regexp">                a: 'vuejs',</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            beforeCreate: function() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('创建前');</span></span><br><span class="line"><span class="regexp">                console.log(this.a);</span></span><br><span class="line"><span class="regexp">                console.log(this.$el);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            created: function() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('创建之后');</span></span><br><span class="line"><span class="regexp">                console.log(this.a);</span></span><br><span class="line"><span class="regexp">                console.log(this.$el);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            beforeMount: function() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('mount之前');</span></span><br><span class="line"><span class="regexp">                console.log(this.a);</span></span><br><span class="line"><span class="regexp">                console.log(this.$el);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            mounted: function() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('mount之后');</span></span><br><span class="line"><span class="regexp">                console.log(this.a);</span></span><br><span class="line"><span class="regexp">                console.log(this.$el);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            beforeUpdate: function() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('更新之前');</span></span><br><span class="line"><span class="regexp">                console.log(this.a);</span></span><br><span class="line"><span class="regexp">                console.log(this.$el);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            updated: function() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('更新完成');</span></span><br><span class="line"><span class="regexp">                console.log(this.a);</span></span><br><span class="line"><span class="regexp">                console.log(this.$el);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            beforeDestroy: function() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('组件销毁之前');</span></span><br><span class="line"><span class="regexp">                console.log(this.a);</span></span><br><span class="line"><span class="regexp">                console.log(this.$el);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            destroyed: function() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('组件销毁之后');</span></span><br><span class="line"><span class="regexp">                console.log(this.a);</span></span><br><span class="line"><span class="regexp">                console.log(this.$el);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>beforeCreated: el和data并未初始化<br>created: 完成data数据的初始化,el没有<br>beforeMount: 完成了el和data初始化<br>mounted: 完成挂载</p></blockquote><p><img src="//upload-images.jianshu.io/upload_images/3297464-26187203e60ab47a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打开命令行在命令行中输入vm.a = &apos;change&apos;;查看效果</span><br></pre></td></tr></table></figure></p><p><img src="//upload-images.jianshu.io/upload_images/3297464-c5b8f6981f7410f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"></p><h2 id="4-vue组件通信"><a href="#4-vue组件通信" class="headerlink" title="4.vue组件通信"></a>4.vue组件通信</h2><h3 id="1-父组件给子组件传递数据"><a href="#1-父组件给子组件传递数据" class="headerlink" title="1.父组件给子组件传递数据"></a>1.父组件给子组件传递数据</h3><p>vue中使用props向子组件传递数据<br>1): 子组件在props中创建一个属性,用于接收父组件传过来的值<br>2): 父组件中注册子组件<br>3): 在子组件标签中添加子组件props中创建的属性<br>4): 把需要传给子组件的值赋给该属性</p><h3 id="2-子组件向父组件传递数据"><a href="#2-子组件向父组件传递数据" class="headerlink" title="2.子组件向父组件传递数据"></a>2.子组件向父组件传递数据</h3><p>子组件主要通过事件传递数据给父组件<br>1), 子组件中需要以某种方式,例如点击事件的方法来触发一个自定义事件<br>2),将需要传的值作为$emit的第二个参数,该值将作为实参数传给相应自定义事件的方法<br>3),在父组件中注册子组件并在子组件标签上绑定自定义事件的监听</p><h3 id="3-子组件向子组件传递数据"><a href="#3-子组件向子组件传递数据" class="headerlink" title="3.子组件向子组件传递数据"></a>3.子组件向子组件传递数据</h3><p>vue找那个没有直接子组件对子组件传参的方法,建议将需要传递数据的在组件,都合并为一个组件,如果一定需要子组件对子组件传参,可以先传到父组件,再传到子组件,为了方便开发,vue推出了一个状态管理工具vuex,可以啃方便的实现组件之间的参数传递</p><p>具体的实例代码如下:可以自行参考相关代码在编辑器中尝试<br>父组件向子组件传递数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件向子组件传递数据</span></span><br><span class="line">&lt;!--</span><br><span class="line">msg 是在data中(父组件)定义的变量</span><br><span class="line">如果需要从父组件中获取logo的值,就需要使用props[<span class="string">'msg'</span>], 如<span class="number">30</span>行</span><br><span class="line">在props中添加了元素以后,就不需要在data中(子组件)中再添加变量了</span><br><span class="line">--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child  @transferuser=<span class="string">"getUser"</span> :msg=<span class="string">"msg"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span>  </span><br><span class="line">    &lt;p&gt;用户名为:&#123;&#123;user&#125;&#125;(我是子组件传递给父组件的数据)&lt;<span class="regexp">/p&gt;  </span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    import child from './</span>child.vue<span class="string">';</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        components: &#123;</span></span><br><span class="line"><span class="string">            child,</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data() &#123;</span></span><br><span class="line"><span class="string">            return &#123;</span></span><br><span class="line"><span class="string">                user: '</span><span class="string">',</span></span><br><span class="line"><span class="string">                msg: '</span>我是父组件传给子组件的信息<span class="string">',</span></span><br><span class="line"><span class="string">            &#125;;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods: &#123;</span></span><br><span class="line"><span class="string">            getUser(msg) &#123;</span></span><br><span class="line"><span class="string">                this.user = msg;</span></span><br><span class="line"><span class="string">                console.log(msg);</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>子组件向父组件传递数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件向父组件传递数据</span></span><br><span class="line">&lt;!--</span><br><span class="line"><span class="number">1.</span>@ : 是  v-on的简写</span><br><span class="line"><span class="number">2.</span>子组件主要通过事件传递数据给父组件</span><br><span class="line"><span class="number">3.</span>当input的值发生变化时,将username传递给parent.vue,首先声明了一个setUser,用change事件来调用setUser</span><br><span class="line"><span class="number">4.</span>在setUser中,使用了$emit来遍历transferUser事件,并返回<span class="keyword">this</span>.username,其中transferuser是一个自定义事件,功能类似一个中转,<span class="keyword">this</span>.username通过这个事件传递给父组件</span><br><span class="line">--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span&gt;用户名&lt;/</span>span&gt;</span><br><span class="line">      &lt;input v-model=<span class="string">"username"</span> @change=<span class="string">'setUser'</span>&gt;向父组件传值&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">        data() &#123;</span></span><br><span class="line"><span class="regexp">            return &#123;</span></span><br><span class="line"><span class="regexp">                username: '测试',</span></span><br><span class="line"><span class="regexp">            &#125;;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        props: &#123;</span></span><br><span class="line"><span class="regexp">            msg: &#123;</span></span><br><span class="line"><span class="regexp">                type: String,</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        methods: &#123;</span></span><br><span class="line"><span class="regexp">            setUser() &#123;</span></span><br><span class="line"><span class="regexp">                this.$emit('transferuser', this.username);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><h2 id="5-vue组件之keep-alive"><a href="#5-vue组件之keep-alive" class="headerlink" title="5.vue组件之keep-alive"></a>5.vue组件之keep-alive</h2><p>项目中写vue也没注意到<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>这个组件,最近在深入的研究vue组件的生命周期函数,每一个函数都是干嘛的,然后其中有<code>activated</code>和<code>deactivated</code>这两个函数与<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>这个组件有关</p><ul><li><code>activated</code>: keep-alive组件激活时调用</li><li><code>deactivated</code>: keep-alive组件停用时调用<h3 id="keep-alive用法"><a href="#keep-alive用法" class="headerlink" title="keep-alive用法"></a><a href="https://cn.vuejs.org/v2/api/?#keep-alive" target="_blank" rel="noopener">keep-alive用法</a></h3></li><li><code>&lt;keep-alive&gt;</code>包裹动态组件时,会缓存不活动的组件实例,而不是销毁它们</li><li><code>&lt;keep-alive&gt;</code>是一个抽象组件:它自身不会渲染一个DOM元素,也不会出现在父组件链中</li><li>当组件在<code>&lt;keep-alive&gt;</code>内被切换,它的<code>activated</code>和<code>deactivated</code>这两个生命周期钩子函数将会被对应执行<h3 id="具体的实例如下"><a href="#具体的实例如下" class="headerlink" title="具体的实例如下"></a>具体的实例如下</h3></li><li>是一个简单的tab切换,可以尝试把<code>&lt;keep-alive&gt;</code>去掉之后,对比一下,然后就会发现它的好处</li></ul><p>test.vue<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"test"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"testNav"</span>&gt;</span><br><span class="line">            &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;'selected':tab === 1,'testTitle':true&#125;"</span> @click=<span class="string">"toTab(1)"</span>&gt;标题一&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div :class="&#123;'selected':tab === 2,'testTitle':true&#125;"  @click="toTab(2)"&gt;标题二&lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="container"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;keep-alive&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Test1 v-if="tab === 1"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>Test1&gt;</span><br><span class="line">                &lt;Test2 v-<span class="keyword">else</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/Test2&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>keep-alive&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    import Test1 from './</span>test1.vue<span class="string">';</span></span><br><span class="line"><span class="string">    import Test2 from '</span>./test2.vue<span class="string">';</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        data() &#123;</span></span><br><span class="line"><span class="string">            return &#123;</span></span><br><span class="line"><span class="string">                tab: 1,</span></span><br><span class="line"><span class="string">            &#125;;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        components: &#123;</span></span><br><span class="line"><span class="string">            Test1,</span></span><br><span class="line"><span class="string">            Test2,</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods: &#123;</span></span><br><span class="line"><span class="string">            toTab(index) &#123;</span></span><br><span class="line"><span class="string">                this.tab = index;</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style lang="less"&gt;</span></span><br><span class="line"><span class="string">.test &#123;</span></span><br><span class="line"><span class="string">    width: 100%;</span></span><br><span class="line"><span class="string">    .testNav &#123;</span></span><br><span class="line"><span class="string">        height: 60px;</span></span><br><span class="line"><span class="string">        line-height: 60px;</span></span><br><span class="line"><span class="string">        display: flex;</span></span><br><span class="line"><span class="string">        border-bottom: 1px solid #e5e5e5;</span></span><br><span class="line"><span class="string">        .testTitle &#123;</span></span><br><span class="line"><span class="string">            flex: 1;</span></span><br><span class="line"><span class="string">            text-align: center;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        .selected &#123;</span></span><br><span class="line"><span class="string">            color: red;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure></p><p>测试结果如下:<br>注意看一下页面和控制台输出的信息,可以更加直观的注意到<code>&lt;keep-alive&gt;</code>的作用及<code>activated</code>和<code>deactivated</code>这两个函数什么时候会被触发</p><ul><li>打开页面,会出现下面这样<br><img src="//upload-images.jianshu.io/upload_images/3297464-107dff63973203d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1"></li></ul><p>用setTimeout模拟请求后端接口的场景</p><ul><li>点击<code>title2</code>,出现下面的情况<br><img src="//upload-images.jianshu.io/upload_images/3297464-7e1366c72e18c5bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2"></li><li>再次点击<code>title1</code>,出现下面的情况,你会发现从后端请求的数据会快速显示出来,但是如果你此时不用<br><img src="//upload-images.jianshu.io/upload_images/3297464-910cec4293e6e2b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3"></li></ul><blockquote><p><code>test1.vue</code>和<code>test2.vue</code>的相关代码如下:</p></blockquote><p>test1.vue<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"test1"</span>&gt;</span><br><span class="line">      test1</span><br><span class="line">      &#123;&#123;testInfo1&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                testInfo1: <span class="string">''</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        activated() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'测试1被激活'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        deactivated() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'测试1被缓存'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.testInfo1 = <span class="string">'这是测试一的数据'</span>;</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>test2.vue<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      test2</span><br><span class="line">      &#123;&#123;testInfo2&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                testInfo2: <span class="string">''</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,  </span><br><span class="line">        activated() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'测试2被激活'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        deactivated() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'测试2被缓存'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.testInfo2 = <span class="string">'这是测试二的数据'</span>;</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="6-生命周期函数-methods-watch里面不应该使用箭头函数"><a href="#6-生命周期函数-methods-watch里面不应该使用箭头函数" class="headerlink" title="6. 生命周期函数/methods/watch里面不应该使用箭头函数"></a>6. 生命周期函数/methods/watch里面不应该使用箭头函数</h2><p>es6的箭头函数的出现,是我们可以用更少的代码实现功能,但是应该注意箭头函数和普通函数的最大区别是this的指向问题: 箭头函数的this指向函数所在的所用域,普通函数的this指向函数的调用者;</p><p>官方文档中特别提醒中已经指出这一点:</p><p>vue中生命周期函数, methods,  watch 自动绑定 this 上下文到实例中，因此你可以访问数据，对属性和方法进行运算。这意味着 你不能使用箭头函数来定义一个生命周期方法, 这是因为箭头函数绑定了父上下文，因此 this 与你期待的 Vue 实例不同</p><h2 id="7-methods-computed-watch"><a href="#7-methods-computed-watch" class="headerlink" title="7.methods/computed/watch"></a>7.methods/computed/watch</h2><h3 id="methods-VS-computed"><a href="#methods-VS-computed" class="headerlink" title="methods VS computed"></a>methods VS computed</h3><p>我们可以将同一个函数定义为methods或者computed,用这两种方式,得到的结果是相同的,不同的是computed是基于它们的依赖进行缓存的,计算属性只有在它相关的依赖发生改变时才重新求值;</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景:"></a>适用场景:</h4><p>重新计算开销很大的话,选computed; 不希望有缓存的选methods</p><h3 id="computed-vs-watch"><a href="#computed-vs-watch" class="headerlink" title="computed vs watch"></a>computed vs watch</h3><p>watch 有新旧值两个参数, 计算属性没有,但是计算属性可以从setter获得新值</p><h3 id="关于computed"><a href="#关于computed" class="headerlink" title="关于computed"></a>关于computed</h3><p>对于计算属性要特别说明一点: vue的计算属性computed默认只有getter,需要使用getter的时候需要自己加一个setter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            firstName: <span class="string">'张'</span>,</span><br><span class="line">            lastName: <span class="string">'三'</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        fullName() &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        changeFullName () &#123;</span><br><span class="line">            <span class="keyword">this</span>.fullName = <span class="string">'李 四'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">其中computed里的代码完整写法是  </span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">   fullName: &#123;</span><br><span class="line">        <span class="comment">// getter</span></span><br><span class="line">        <span class="keyword">get</span>: function () &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">   &#125;    </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>执行 changeFullName 发现报错<code>[Vue warn]: Computed property &quot;fullame&quot; was assigned to but it has no setter.</code></p><p>我们需要给计算属性fullName添加一个setter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">   fullName: &#123;</span><br><span class="line">        <span class="comment">// getter</span></span><br><span class="line">        <span class="keyword">get</span>: function () &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// setter</span></span><br><span class="line">        <span class="keyword">set</span>: function (newValue) &#123;</span><br><span class="line">          <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>)</span><br><span class="line">          <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">          <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;    </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上述这些问题从<a href="https://vuejs.org/" target="_blank" rel="noopener">vue官方文档</a>中均能找到答案,当然想要更深入的理解为什么,还需要从<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue源码分析</a>入手;</p><p>下一篇文章打算从源码入手去解释这些问题,理解vue整体的程序设计;</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么使用v-for时必须添加唯一的key?</title>
      <link href="/2018/03/18/2018-03-18-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8v-for%E6%97%B6%E5%BF%85%E9%A1%BB%E6%B7%BB%E5%8A%A0%E5%94%AF%E4%B8%80%E7%9A%84key/"/>
      <url>/2018/03/18/2018-03-18-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8v-for%E6%97%B6%E5%BF%85%E9%A1%BB%E6%B7%BB%E5%8A%A0%E5%94%AF%E4%B8%80%E7%9A%84key/</url>
      
        <content type="html"><![CDATA[<p><img src="//upload-images.jianshu.io/upload_images/1541368-d9be1b3b39abc037?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br><a id="more"></a></p><h2 id="v-for中的key"><a href="#v-for中的key" class="headerlink" title="v-for中的key"></a><code>v-for</code>中的<code>key</code></h2><p>使用<code>v-for</code>更新已渲染的元素列表时,默认用<code>就地复用</code>策略;列表数据修改的时候,他会根据key值去判断某个值是否修改,如果修改,则重新渲染这一项,否则复用之前的元素;<br>我们在使用的使用经常会使用<code>index</code>(即数组的下标)来作为<code>key</code>,但其实这是不推荐的一种使用方法;</p><p>举个🌰</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">'test1'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="number">2</span>,</span><br><span class="line">        name: <span class="string">'test2'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="number">3</span>,</span><br><span class="line">        name: <span class="string">'test3'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">"(item, index) in list"</span> :key=<span class="string">"index"</span> &gt;&#123;&#123;item.name&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>上面这种是我们做项目中常用到的一种场景,因为不加key,vue现在直接报错,所以我使用index作为key;下面列举两种种常见的数据更新情况</p><h3 id="1-在最后一条数据后再加一条数据"><a href="#1-在最后一条数据后再加一条数据" class="headerlink" title="1.在最后一条数据后再加一条数据"></a>1.在最后一条数据后再加一条数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">'test1'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="number">2</span>,</span><br><span class="line">        name: <span class="string">'test2'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="number">3</span>,</span><br><span class="line">        name: <span class="string">'test3'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="number">4</span>,</span><br><span class="line">        name: <span class="string">'我是在最后添加的一条数据'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>此时前三条数据直接复用之前的,新渲染最后一条数据,此时用<code>index</code>作为<code>key</code>,没有任何问题;</p><h3 id="2-在中间插入一条数据"><a href="#2-在中间插入一条数据" class="headerlink" title="2.在中间插入一条数据"></a>2.在中间插入一条数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">'test1'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="number">4</span>,</span><br><span class="line">        name: <span class="string">'我是插队的那条数据'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="number">2</span>,</span><br><span class="line">        name: <span class="string">'test2'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="number">3</span>,</span><br><span class="line">        name: <span class="string">'test3'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>此时更新渲染数据,通过<code>index</code>定义的<code>key</code>去进行前后数据的对比,发现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">之前的数据                               之后的数据</span><br><span class="line"></span><br><span class="line">key: <span class="number">0</span>  index: <span class="number">0</span> name: test1     key: <span class="number">0</span>  index: <span class="number">0</span> name: test1</span><br><span class="line">key: <span class="number">1</span>  index: <span class="number">1</span> name: test2     key: <span class="number">1</span>  index: <span class="number">1</span> name: 我是插队的那条数据</span><br><span class="line">key: <span class="number">2</span>  index: <span class="number">2</span> name: test3     key: <span class="number">2</span>  index: <span class="number">2</span> name: test2</span><br><span class="line">                                 key: <span class="number">3</span>  index: <span class="number">3</span> name: test3</span><br></pre></td></tr></table></figure><p>通过上面清晰的对比,发现除了第一个数据可以复用之前的之外,另外三条数据都需要重新渲染;</p><p>是不是很惊奇,我明明只是插入了一条数据,怎么三条数据都要重新渲染?而我想要的只是新增的那一条数据新渲染出来就行了</p><p>最好的办法是使用数组中不会变化的那一项作为<code>key</code>值,对应到项目中,即每条数据都有一个唯一的<code>id</code>,来标识这条数据的唯一性;使用<code>id</code>作为<code>key</code>值,我们再来对比一下向中间插入一条数据,此时会怎么去渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">之前的数据                                       之后的数据</span><br><span class="line"></span><br><span class="line">key: <span class="number">1</span>  id: <span class="number">1</span> index: <span class="number">0</span> name: test1     key: <span class="number">1</span>  id: <span class="number">1</span> index: <span class="number">0</span>  name: test1</span><br><span class="line">key: <span class="number">2</span>  id: <span class="number">2</span> index: <span class="number">1</span> name: test2     key: <span class="number">4</span>  id: <span class="number">4</span> index: <span class="number">1</span>  name: 我是插队的那条数据</span><br><span class="line">key: <span class="number">3</span>  id: <span class="number">3</span> index: <span class="number">2</span> name: test3     key: <span class="number">2</span>  id: <span class="number">2</span> index: <span class="number">2</span>  name: test2</span><br><span class="line">                                       key: <span class="number">3</span>  id: <span class="number">3</span> index: <span class="number">3</span>  name: test3</span><br></pre></td></tr></table></figure><p>现在对比发现只有一条数据变化了,就是<code>id</code>为4的那条数据,因此只要新渲染这一条数据就可以了,其他都是就复用之前的;</p><p>同理在react中使用map渲染列表时,也是必须加key,且推荐做法也是使用<code>id</code>,也是这个原因;</p><p>其实,真正的原因并不是vue和react怎么怎么,而是因为Virtual DOM 使用Diff算法实现的原因:</p><h2 id="原理简析"><a href="#原理简析" class="headerlink" title="原理简析"></a>原理简析</h2><blockquote><p>vue和react的虚拟DOM的Diff算法大致相同，其核心是基于两个简单的假设：</p></blockquote><ol><li>两个相同的组件产生类似的DOM结构，不同的组件产生不同的DOM结构。</li><li>同一层级的一组节点，他们可以通过唯一的id进行区分。基于以上这两点假设，使得虚拟DOM的Diff算法的复杂度从O(n^3)降到了O(n)。</li></ol><p>引用<a href="https://calendar.perfplanet.com/2013/diff/" title="Permanent Link to React’s diff algorithm" target="_blank" rel="noopener">React’s diff algorithm</a>中的例子:</p><p><img src="https://upload-images.jianshu.io/upload_images/3297464-0848720c71af2123.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="diff1.jpg"><br>当某一层有很多相同的节点时，也就是列表节点时，Diff算法的更新过程默认情况下也是遵循以上原则。<br>比如一下这个情况：<br><img src="https://upload-images.jianshu.io/upload_images/3297464-ee627869a6714336.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="diff2.jpg"><br>我们希望可以在B和C之间加一个F，Diff算法默认执行起来是这样的：<br><img src="https://upload-images.jianshu.io/upload_images/3297464-d912523aac5fd108.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="diff3.jpg"><br>即把C更新成F，D更新成C，E更新成D，最后再插入E，是不是很没有效率？</p><p>所以我们需要使用key来给每个节点做一个唯一标识，Diff算法就可以正确的识别此节点，找到正确的位置区插入新的节点。<br><img src="https://upload-images.jianshu.io/upload_images/3297464-650689b4bd4b9eb6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="diff4.jpg"></p><p>所以一句话，key的作用主要是为了高效的更新虚拟DOM。另外vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了让vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">vue官方文档</a></li><li><a href="https://reactjs.org/docs/lists-and-keys.html" target="_blank" rel="noopener">react官方文档</a></li><li><a href="https://github.com/livoras/blog/issues/13" target="_blank" rel="noopener">深度剖析：如何实现一个 Virtual DOM 算法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么vue中data必须是一个函数</title>
      <link href="/2018/03/13/2018-03-13-%E4%B8%BA%E4%BB%80%E4%B9%88vue%E4%B8%ADdata%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0/"/>
      <url>/2018/03/13/2018-03-13-%E4%B8%BA%E4%BB%80%E4%B9%88vue%E4%B8%ADdata%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="//upload-images.jianshu.io/upload_images/1541368-d9be1b3b39abc037?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"></p><blockquote><p>本篇文章从javascript原型链来解释为什么vue中data必须是一个函数</p></blockquote><a id="more"></a><h2 id="vue组件中的data必须是函数"><a href="#vue组件中的data必须是函数" class="headerlink" title="vue组件中的data必须是函数"></a>vue组件中的data必须是函数</h2><p>类比引用数据类型<br>Object是引用数据类型,如果不用function 返回,每个组件的data 都是内存的同一个地址,一个数据改变了其他也改变了;</p><p>javascipt只有函数构成作用域(注意理解作用域,只有<code>函数的{}</code>构成作用域,<code>对象的{}</code>以及 <code>if(){}</code>都不构成作用域)，data是一个函数时，每个组件实例都有自己的作用域，每个实例相互独立,不会相互影响</p><p>举个🌰</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyComponent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">MyComponent.prototype.data = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> component1 = <span class="keyword">new</span> MyComponent();</span><br><span class="line"><span class="keyword">const</span> component2 = <span class="keyword">new</span> MyComponent();</span><br><span class="line"></span><br><span class="line">component1.data.a === component2.data.a; <span class="comment">// true;</span></span><br><span class="line">component1.data.b = <span class="number">5</span>;</span><br><span class="line">component2.data.b <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>如果两个实例同时引用一个对象,那么当你修改其中一个属性的时候,另外一个实例也会跟着改;</p><p>两个实例应该有自己各自的域才对,需要通过下面的方法来进行处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyComponent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.data = <span class="keyword">this</span>.data();</span><br><span class="line">&#125;;</span><br><span class="line">MyComponent.prototype.data = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        a: <span class="number">1</span>,</span><br><span class="line">        b: <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样么一个实例的data属性都是独立的,不会相互影响了.<br>所以，你现在知道为什么vue组件的data必须是函数了吧。这都是因为js本身的特性带来的，跟vue本身设计无关。其实vue不应该把这个方法名取为data()，应该叫setData或其他更容易理解的方法名。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.csdn.net/shaleilei/article/details/78084171" target="_blank" rel="noopener">为什么在vue的组件中，data要用function返回对象呢？</a></li><li><a href="https://cn.vuejs.org/v2/guide/components.html#data-%E5%BF%85%E9%A1%BB%E6%98%AF%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">vue官网-data必须是函数</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Rollup打包JavaScript</title>
      <link href="/2018/03/07/2018-03-07-%E4%BD%BF%E7%94%A8Rollup%E6%89%93%E5%8C%85JavaScript/"/>
      <url>/2018/03/07/2018-03-07-%E4%BD%BF%E7%94%A8Rollup%E6%89%93%E5%8C%85JavaScript/</url>
      
        <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2018/3/7/162009f9cc2a5759?w=1240&amp;h=608&amp;f=jpeg&amp;s=28065" alt="title"></p><blockquote><p>rollup是一款小巧的javascript模块打包工具，更适合于库应用的构建工具;可以将小块代码编译成大块复杂的代码，基于ES6 modules,它可以让你的 bundle 最小化，有效减少文件请求大小,<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a>在开发的时候用的是webpack,但是最后将文件打包在一起的时候用的是 rollup.js</p></blockquote><a id="more"></a><p><a href="https://rollupjs.org/guide/en" target="_blank" rel="noopener">rollup官方文档</a><br><a href="https://github.com/rollup" target="_blank" rel="noopener">rollupgithub</a></p><h2 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install --global rollup</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">## 开始使用rollup</span><br><span class="line"></span><br><span class="line">### 创建第一个bundle</span><br><span class="line"></span><br><span class="line">创建`main.js`</span><br></pre></td></tr></table></figure><p>console.log(111);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">执行 `rollup --input main.js --output bundle.js --format cjs`, 该命令编译 `main.js` 生成 `bundle.js`, `--format cjs` 意味着打包为 node.js 环境代码, 请观察 bundle.js 文件内容</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">&apos;use strict&apos;</span><br><span class="line">console.log(111);</span><br></pre></td></tr></table></figure></p><p>命令行参数简介:</p><p>输入(input -i/–input)</p><p>String 这个包的入口点 (例如：你的 main.js 或者 app.js 或者 index.js)</p><p>文件(file -o/–output.file)<br>String 要写入的文件。也可用于生成 sourcemaps，如果适用</p><p>格式(format -f/–output.format)<br>关于format选项<br>rollup提供了五种选项:</p><ul><li>amd – 异步模块定义，用于像RequireJS这样的模块加载器</li><li>cjs – CommonJS，适用于 Node 和 Browserify/Webpack</li><li>es – 将软件包保存为ES模块文件</li><li>iife – 一个自动执行的功能，适合作为<code>&lt;script&gt;</code>标签。（如果要为应用程序创建一个捆绑包，您可能想要使用它，因为它会使文件大小变小。）</li><li>umd – 通用模块定义，以amd，cjs 和 iife 为一体</li></ul><h3 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h3><p>rollup.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input: <span class="string">'src/main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        file: <span class="string">'bundle.js'</span>,</span><br><span class="line">        format: <span class="string">'cjs'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行 <code>rollup -c rollup.config.js</code>启动配置项;</p><p>rollup 提供了 –watch / -w 参数来监听文件改动并自动重新打包</p><h3 id="使用rollup插件"><a href="#使用rollup插件" class="headerlink" title="使用rollup插件"></a>使用rollup插件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev rollup-plugin-json</span><br></pre></td></tr></table></figure><p>我们用的是 –save-dev 而不是 –save，因为代码实际执行时不依赖这个插件——只是在打包时使用。</p><p>在配置文件中启用插件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'rollup-plugin-json'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input: <span class="string">'./main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        file: <span class="string">'bundle.js'</span>,</span><br><span class="line">        format: <span class="string">'umd'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        json(),</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新建文件 <code>data.json</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"xiaoming"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在<code>main.js</code> 引入 <code>data.json</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">'./data.json'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure><p>执行 <code>rollup -c rollup.config.js</code>,并查看 bundle.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global, factory</span>) </span>&#123;</span><br><span class="line"><span class="keyword">typeof</span> exports === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> ? factory() :</span><br><span class="line"><span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd ? define(factory) :</span><br><span class="line">(factory());</span><br><span class="line">&#125;(<span class="keyword">this</span>, (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"xiaoming"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"></span><br><span class="line">&#125;)));</span><br></pre></td></tr></table></figure><p>看到bundle中仅引用了data.json中的name字段,这是因为rollup会自动进行 Tree-shaking,main.js中仅引入了name,age并没有没引用,所以age并不会被打包</p><h3 id="rollup基础插件"><a href="#rollup基础插件" class="headerlink" title="rollup基础插件"></a>rollup基础插件</h3><ul><li><a href="https://github.com/rollup/rollup-plugin-alias" target="_blank" rel="noopener">rollup-plugin-alias</a>: 提供modules名称的 alias 和reslove 功能</li><li><a href="https://github.com/rollup/rollup-plugin-babel" target="_blank" rel="noopener">rollup-plugin-babel</a>: 提供babel能力</li><li><a href="https://github.com/TrySound/rollup-plugin-eslint" target="_blank" rel="noopener">rollup-plugin-eslint</a>: 提供eslint能力</li><li><a href="https://github.com/rollup/rollup-plugin-node-resolve" target="_blank" rel="noopener">rollup-plugin-node-resolve</a>: 解析 node_modules 中的模块</li><li><a href="https://github.com/rollup/rollup-plugin-commonjs" target="_blank" rel="noopener">rollup-plugin-commonjs</a>: 转换 CJS -&gt; ESM, 通常配合上面一个插件使用</li><li><a href="https://github.com/thgh/rollup-plugin-serve" target="_blank" rel="noopener">rollup-plugin-serve</a>: 类比 webpack-dev-server, 提供静态服务器能力</li><li><a href="https://github.com/ritz078/rollup-plugin-filesize" target="_blank" rel="noopener">rollup-plugin-filesize</a>: 显示 bundle 文件大小</li><li><a href="https://github.com/TrySound/rollup-plugin-uglify" target="_blank" rel="noopener">rollup-plugin-uglify</a>: 压缩 bundle 文件</li><li><a href="https://github.com/rollup/rollup-plugin-replace" target="_blank" rel="noopener">rollup-plugin-replace</a>: 类比 Webpack 的 DefinePlugin , 可在源码中通过 process.env.NODE_ENV 用于构建区分 Development 与 Production 环境.</li></ul><h2 id="rollup于其他工具集成"><a href="#rollup于其他工具集成" class="headerlink" title="rollup于其他工具集成"></a>rollup于其他工具集成</h2><h3 id="打包npm-模块"><a href="#打包npm-模块" class="headerlink" title="打包npm 模块"></a>打包npm 模块</h3><p>于webpack和Browserify不同, rollup 不会去寻找从npm安装到你的node_modules文件夹中的软件包;<br><code>rollup-plugin-node-resolve</code> 插件可以告诉 Rollup 如何查找外部模块<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev rollup-plugin-node-resolve</span><br></pre></td></tr></table></figure></p><h3 id="打包-commonjs模块"><a href="#打包-commonjs模块" class="headerlink" title="打包 commonjs模块"></a>打包 commonjs模块</h3><p>npm中的大多数包都是以CommonJS模块的形式出现的。 在它们更改之前，我们需要将CommonJS模块转换为 ES2015 供 Rollup 处理。<br><code>rollup-plugin-commonjs</code> 插件就是用来将 CommonJS 转换成 ES2015 模块的。<br>请注意，<code>rollup-plugin-commonjs</code>应该用在其他插件转换你的模块之前 - 这是为了防止其他插件的改变破坏CommonJS的检测<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev rollup-plugin-commonjs</span><br></pre></td></tr></table></figure></p><h3 id="使用babel"><a href="#使用babel" class="headerlink" title="使用babel"></a>使用babel</h3><p>使用 Babel 和 Rollup 的最简单方法是使用 rollup-plugin-babel</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev rollup-plugin-babel</span><br></pre></td></tr></table></figure><p>新建.babelrc<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [</span><br><span class="line">        [<span class="string">"latest"</span>, &#123;</span><br><span class="line">            <span class="string">"es2015"</span>: &#123;</span><br><span class="line">                <span class="string">"modules"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"plugins"</span>: [<span class="string">"external-helpers"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>首先，我们设置<code>&quot;modules&quot;: false</code>，否则 Babel 会在 Rollup 有机会做处理之前，将我们的模块转成 CommonJS，导致 Rollup 的一些处理失败</li><li>我们使用<code>external-helpers</code>插件，它允许 Rollup 在包的顶部只引用一次 “helpers”，而不是每个使用它们的模块中都引用一遍（这是默认行为）<br>运行 rollup之前, 需要安装<code>latest preset</code> 和<code>external-helpers</code>插件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D babel-preset-latest babel-plugin-external-helpers</span><br></pre></td></tr></table></figure><h3 id="一个简单的配置项"><a href="#一个简单的配置项" class="headerlink" title="一个简单的配置项"></a>一个简单的配置项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">'rollup-plugin-commonjs'</span>;</span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span>;</span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'rollup-plugin-json'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input: <span class="string">'./main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        file: <span class="string">'bundle.js'</span>,</span><br><span class="line">        format: <span class="string">'umd'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        exclude: <span class="string">'node_modules/**'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        resolve(),</span><br><span class="line">        commonjs(),</span><br><span class="line">        json(),</span><br><span class="line">        babel(&#123;</span><br><span class="line">            exclude: <span class="string">'node_modules/**'</span>,</span><br><span class="line">            plugins: [<span class="string">'external-helpers'</span>],</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rollup优势"><a href="#rollup优势" class="headerlink" title="rollup优势"></a>rollup优势</h2><ul><li>自动 Tree-shaking(Tree-shaking, 也被称为 “live code inclusion,” 它是清除实际上并没有在给定项目中使用的代码的过程，但是它可以更加高效。)</li><li>打包速度快</li><li>配置简单</li></ul><h2 id="rollup-VS-webpack"><a href="#rollup-VS-webpack" class="headerlink" title="rollup VS webpack"></a>rollup VS webpack</h2><p>rollup更适合构建javascript库,也可用于构建绝大多数应用程序;但是rollup 还不支持一些特定的高级功能，尤其是用在构建一些应用程序的时候，特别是代码拆分和运行时态的动态导入 dynamic imports at runtime.如果你的项目中需要这些功能,则使用webpack更为适合;</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Meteor 填坑之旅</title>
      <link href="/2018/02/11/2018-02-11-Meteor%E5%A1%AB%E5%9D%91%E4%B9%8B%E6%97%85/"/>
      <url>/2018/02/11/2018-02-11-Meteor%E5%A1%AB%E5%9D%91%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3972597870,2157974534&amp;fm=27&amp;gp=0.jpg" alt="title"><br><a id="more"></a></p><h2 id="1-是否有一个事件可以出发-放插入一条新的消息-我可以订阅"><a href="#1-是否有一个事件可以出发-放插入一条新的消息-我可以订阅" class="headerlink" title="1. 是否有一个事件可以出发,放插入一条新的消息,我可以订阅?"></a>1. 是否有一个事件可以出发,放插入一条新的消息,我可以订阅?</h2><p>做一个聊天的功能,当有新消息插入到数据库时,我需要判断当前聊天是否存在于用户的聊天列表中(如果不存在也需要创建有新消息的聊天)以及在这个页面做声音,但是Meteor的前后端数据都是响应的,后端数据增加,前端数据自动更新显示.是否有一个事件可以出发,放插入一条新的消息,我可以订阅?<br><a href="https://stackoverflow.com/questions/29022760/meteor-event-for-subscriber-of-collection-for-new-insert-of-document-in-mongodb" target="_blank" rel="noopener">meteor insert document event</a><br><a href="https://krishprasadar.wordpress.com/" target="_blank" rel="noopener">METEOR COLLECTIONFS – GET NOTIFIED WHEN A FILE STORAGE COMPLETES</a><br><a href="https://github.com/CollectionFS/Meteor-CollectionFS/issues/264" target="_blank" rel="noopener">Meteor-CollectionFS</a></p><p>我的实现方法: 每条消息加一个ReadedMembers字段,记录消息是谁已经读过了,如果 <code>ReadedMembers.includes(selfId)</code>的值为false,就表明当前消息你还未读,依次来表示未读消息</p><h2 id="2-取出populate关联表数据"><a href="#2-取出populate关联表数据" class="headerlink" title="2. 取出populate关联表数据"></a>2. 取出populate关联表数据</h2><p>Message 表的 from 字段关联到了 User 表, 默认情况下查询结果的 from 字段是 user id, 而我们需要的是该 user 的数据. 我们使用 <a href="https://atmospherejs.com/reywood/publish-composite" target="_blank" rel="noopener">reywood:publish-composite</a> 获取关联表数据, 例如取出 message 的 from 字段的数据:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">publishComposite(<span class="string">'message'</span>, &#123;</span><br><span class="line">    find() &#123;</span><br><span class="line">        <span class="keyword">return</span> Message.find(&#123;&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [&#123;</span><br><span class="line">        find(message) &#123;</span><br><span class="line">            message.from = Meteor.users.findOne(</span><br><span class="line">                &#123; <span class="attr">_id</span>: message.from &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    fields: &#123;</span><br><span class="line">                        username: <span class="number">1</span>,</span><br><span class="line">                        profile: <span class="number">1</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            );</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="自己定义populate方法"><a href="#自己定义populate方法" class="headerlink" title="自己定义populate方法"></a>自己定义populate方法</h3><p>在做邀请新的好友入群的时候,添加新的好友,利用<a href="https://atmospherejs.com/reywood/publish-composite" target="_blank" rel="noopener">reywood:publish-composite</a>并不会自动更新数据,所以以后直接自己在客户端定义方法<br>这样做的好处是解决了取关联数据不会自动更新的bug,但是有点麻烦的是每次需要关联数据的时候必须在客户端调用一次方法,正在考虑有没有更好的解决方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Meteor &#125; <span class="keyword">from</span> <span class="string">'meteor/meteor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PopulateUtil = &#123;</span><br><span class="line">    group(group) &#123;</span><br><span class="line">        <span class="keyword">if</span> (group) &#123;</span><br><span class="line">            group.members = Meteor.users.find(&#123; <span class="attr">_id</span>: &#123; <span class="attr">$in</span>: group.members &#125; &#125;).fetch();</span><br><span class="line">            group.admin = Meteor.users.findOne(&#123; <span class="attr">_id</span>: group.admin &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    groups(groups) &#123;</span><br><span class="line">        groups.forEach(<span class="function"><span class="params">group</span> =&gt;</span> PopulateUtil.group(group));</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> PopulateUtil;</span><br></pre></td></tr></table></figure></p><h2 id="3-代码高亮"><a href="#3-代码高亮" class="headerlink" title="3.代码高亮"></a>3.代码高亮</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getHighlightedText = <span class="function">(<span class="params">text, higlight</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Split on higlight term and include term into parts, ignore case</span></span><br><span class="line">        <span class="keyword">const</span> parts = text.split(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`(<span class="subst">$&#123;higlight&#125;</span>)`</span>, <span class="string">'gi'</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">&lt;span&gt; &#123;parts.map((part, i</span>) =&gt;</span></span><br><span class="line">            (&lt;span key=&#123;i&#125; style=&#123;part.toLowerCase() === higlight.toLowerCase() ? &#123; color: '#29b6f6' &#125; : &#123;&#125;&#125;&gt;</span><br><span class="line">                &#123;part&#125;</span><br><span class="line">            &lt;/span&gt;))</span><br><span class="line">        &#125; &lt;<span class="regexp">/span&gt;);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure><h2 id="4-如何在Meteor-call-改为promise-async-await形式"><a href="#4-如何在Meteor-call-改为promise-async-await形式" class="headerlink" title="4. 如何在Meteor.call()改为promise,async/await形式"></a>4. 如何在Meteor.call()改为promise,async/await形式</h2><p>方法一:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callMeteorMethod</span>(<span class="params">methodName, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        Meteor.call(methodName, ...args, (error, result) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) reject(error)</span><br><span class="line">            <span class="keyword">else</span> resolve(result)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> callMeteorMethod(<span class="string">'foo'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></p><p>方法二:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meteor add deanius:promise</span><br></pre></td></tr></table></figure><p><a href="https://forums.meteor.com/t/start-using-async-await-instead-of-promises-and-callbacks/17037/5" target="_blank" rel="noopener"></a><br><a href="https://github.com/deanius/meteor-promise" target="_blank" rel="noopener">deanius/meteor-promise</a></p><p>更多坑待填…</p><h2 id="5-Meteor实现数据实时响应的原理"><a href="#5-Meteor实现数据实时响应的原理" class="headerlink" title="5.Meteor实现数据实时响应的原理"></a>5.Meteor实现数据实时响应的原理</h2><h2 id="6-Meteor和socket-io结合使用-总是重复的自己断开-自己连接"><a href="#6-Meteor和socket-io结合使用-总是重复的自己断开-自己连接" class="headerlink" title="6.Meteor和socket.io结合使用,总是重复的自己断开,自己连接"></a>6.Meteor和socket.io结合使用,总是重复的自己断开,自己连接</h2><h2 id="7-写文件名的时候层级过长-有没有一种方法可以想vue-那套可以配置-用-代替的"><a href="#7-写文件名的时候层级过长-有没有一种方法可以想vue-那套可以配置-用-代替的" class="headerlink" title="7.写文件名的时候层级过长,有没有一种方法可以想vue,那套可以配置,用@代替的"></a>7.写文件名的时候层级过长,有没有一种方法可以想vue,那套可以配置,用@代替的</h2>]]></content>
      
      
      <categories>
          
          <category> Meteor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Meteor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中检测不到数组变化的解决方案</title>
      <link href="/2018/01/17/2018-01-17-vue%E4%B8%AD%E6%A3%80%E6%B5%8B%E4%B8%8D%E5%88%B0%E6%95%B0%E7%BB%84%E5%8F%98%E5%8C%96%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2018/01/17/2018-01-17-vue%E4%B8%AD%E6%A3%80%E6%B5%8B%E4%B8%8D%E5%88%B0%E6%95%B0%E7%BB%84%E5%8F%98%E5%8C%96%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><img src="//upload-images.jianshu.io/upload_images/1541368-d9be1b3b39abc037?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"></p><p>数组中当你利用索引设置一个项时,发现视图不发生变化</p><a id="more"></a><h3 id="场景"><a href="#场景" class="headerlink" title="场景:"></a>场景:</h3><p>最近做一个功能,要根据数组的index去修改对应项的<code>isSave</code>字段;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        arr: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">'测试1'</span>,</span><br><span class="line">                id: <span class="number">1</span>,</span><br><span class="line">                isSave: <span class="literal">false</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">'测试2'</span>,</span><br><span class="line">                id: <span class="number">2</span>,</span><br><span class="line">                isSave: <span class="literal">false</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">changeStatus(index) &#123;</span><br><span class="line">    <span class="keyword">this</span>.arr[index].isSave = !<span class="keyword">this</span>.arr[index].isSave;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后视图并没有更新;</p><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><p>查了一下官方文档关于列表渲染的注意事项<a href="https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">讲解</a>;</p><p>由于javascript的限制,Vue不能检测一下变动的数组</p><p>1.当你利用索引设置一个项时, 例如: vm.items[indexOfItem] = newValue;<br>2.当你修改数组的长度时,例如: vm.items.length = newLength;</p><p>为了解决第一类问题,一下方式都可以实现和 vm.items[indexOfItem] = newValue相同的效果,同时也将触发状态更新;<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(example1.item, indexOfItem, newValue);</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example1.items.splice(indexOfItem, <span class="number">1</span>, newValue);</span><br></pre></td></tr></table></figure><p>为解决第二类问题,你可以使用splice:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example1.items.splice(newLength)</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">changeStatus(index) &#123;</span><br><span class="line">    <span class="keyword">const</span> obj = <span class="keyword">this</span>.ticketWatcher.goodVos[index];</span><br><span class="line">    obj.isSave = !obj.isSave;</span><br><span class="line">    <span class="keyword">this</span>.$<span class="keyword">set</span>(this.ticketWatcher, index, obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">vue官网</a></li><li><a href="http://blog.csdn.net/websoftware/article/details/73200957#reply" target="_blank" rel="noopener">vue数组中数据变化但是视图没有更新解决方案</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git仓库迁移</title>
      <link href="/2018/01/06/2018-01-06-git%E4%BB%93%E5%BA%93%E8%BF%81%E7%A7%BB/"/>
      <url>/2018/01/06/2018-01-06-git%E4%BB%93%E5%BA%93%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<p><img src="//static.open-open.com/lib/uploadImg/20141015/20141015084602_745.png" alt="title"></p><h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景:"></a>需求背景:</h2><p>需要将原来放置gitlab的仓库迁移到集团gitlab,需要将所有分支和tag都迁移过去</p><a id="more"></a><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>1.将代码从原有仓库中拉下来<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone remote_git_address(remote_git_address为新服务器gitLab上新建的同名项目地址)</span><br></pre></td></tr></table></figure></p><p>2.设置把本地gitlab地址替换成为集团gitlab地址<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">set</span>-url origin remote_git_address（remote_git_address为新服务器gitLab上新建的同名项目地址）</span><br></pre></td></tr></table></figure></p><p>3.本地仓库推送到远程<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin --all 推送主干和分支</span><br><span class="line"></span><br><span class="line">git push --tags 推送标签</span><br></pre></td></tr></table></figure></p><h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><h4 id="git-checkout-用法"><a href="#git-checkout-用法" class="headerlink" title="git checkout 用法"></a><code>git checkout</code> 用法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --orphan latest_branch</span><br></pre></td></tr></table></figure><p>假如你的某个分支上，积累了无数次的提交，你也懒得去打理，打印出的log也让你无力吐槽，那么这个命令将是你的神器，它会基于当前所在分支新建一个赤裸裸的分支，没有任何的提交历史，但是当前分支的内容一一俱全<br>新建的分支，严格意义上说，还不是一个分支，因为HEAD指向的引用中没有commit值，只有在进行一次提交后，它才算得上真正的分支。</p><h4 id="git-remote用法"><a href="#git-remote用法" class="headerlink" title="git remote用法"></a><code>git remote</code>用法</h4><p>git remote -v 查看现有远程仓库的地址url</p><h5 id="修改及添加远程地址"><a href="#修改及添加远程地址" class="headerlink" title="修改及添加远程地址"></a>修改及添加远程地址</h5><p>1.修改命令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">set</span>-url origin &lt;URL&gt; 更换远程仓库地址,把&lt;URL&gt;更换为新的url地址</span><br></pre></td></tr></table></figure></p><p>2.先删后加<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin remote_git_address（remote_git_address为新服务器gitLab上新建的同名项目地址）</span><br></pre></td></tr></table></figure></p><p>3.直接修改配置文件</p><p>你可能想让你的代码拥有两个甚至更多远程仓库,<br>你可以再添加一个远程库: git remote add origin2; 这个方法很低效,因为你要git push 两次才能完成push到两个库</p><p>其实还有一个方法,git的一个远程库可以对应多个地址,即我能让远程库origin拥有多个url地址,方法如下:<br>首先，我们从零开始，<br>假设你现在想要增加3个远程库地址，分别为:</p><p><url1> </url1></p><p><url2> </url2></p><p><url3><br>首先，先增加第一个地址 git remote add origin <url1><br>然后增加第二个地址 git remote set-url –add origin <url2><br>增加第三个地址 git remote set-url –add origin <url3><br>….依次类推</url3></url2></url1></url3></p><p>这样就完成了添加多个地址到origin库中了，<br>以后只要使用git push origin master 就可以一次性push到3各库里面了(使用git push也可)</p><p>原理解析<br>git remote set-url –add origin 就是往当前git项目的congig文件里增加一行记录<br>config文件打开方式有两种:</p><ul><li>使用命令 <code>git config -e</code></li><li>在当前git项目的根目录下，文件位于 .git/config (.git目录为隐藏文件)<br>你每执行一次git remote set-url –add origin 就会增加一行，如下图：</li></ul><p>git remote -v:显示当前所有远程库的详细信息，显示格式为 远程库名字 url连接(类型)<br><img src="http://static.oschina.net/uploads/space/2014/0807/173051_96yi_574576.jpg" alt="img"><br>你直接在config里面直接添加url来修改也是可以的,不必去执行git命令</p><p>注意:</p><p>使用 <code>git push origin master</code>时,你可以push到origin的的多个url地址,<br>但是使用git pull 时,只能拉去origin里的一个url地址(即fetch-url,如上图),这个fetch-url默认为添加的到origin的第一个地址;<br>如果你想更改，只需要更改config文件里，那三个url的顺序即可，fetch-url会直接对应排行第一的那个utl连接。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.csdn.net/lcyaiym/article/details/77678467" target="_blank" rel="noopener">gitlab project项目迁移</a></li><li><a href="http://blog.csdn.net/s0228g0228/article/details/45368155" target="_blank" rel="noopener">Git远程仓库 git remote</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用脚本提升发布效率</title>
      <link href="/2018/01/05/2018-01-05-shell/"/>
      <url>/2018/01/05/2018-01-05-shell/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1518340049320&amp;di=6ae86448732258b117fb5a7a2d70b3f6&amp;imgtype=0&amp;src=http%3A%2F%2Fi1.hdslb.com%2Fbfs%2Farchive%2F88d701b2b78445f2c4be2f16b1025edca196b59b.jpg" alt="title"></p><h2 id="Node-js-命令行程序开发"><a href="#Node-js-命令行程序开发" class="headerlink" title="Node.js 命令行程序开发"></a>Node.js 命令行程序开发</h2><p>问题: 1.一些重复性的工作能否用脚本来实现? 2.实现自动化发布流程</p><p>一些重复性的工作可以考虑写一些脚本,写一个脚本有两个方案,一个是直接在<code>npm scripts</code>直接写命令(固定命令,不需要参数)二是用shelljs写一个脚本</p><a id="more"></a><p>场景: 当前博客是用hexo来搭建的,public目录下的文件是真正需要放在服务器上的代码,我现在的博客仓库管理方式,有两个仓库,一个<code>funnycoderstar</code>和一个<code>deploy</code>(注:针对该仓库写了一个定时任务,服务器定时拉取该仓库下的代码,即知道推送到该仓库下就以为了上线了),<code>funnycoderstar</code>是用来放置项目源码的仓库,<code>deploy</code>是用来发布到线上的代码,(即用来存储public目录下的文件),执行 <code>hexo clean &amp;&amp; hexo g</code>之后都需要将public目录下的文件移到<code>deploy</code>仓库下,每次都可以觉得太麻烦了,于是就考虑用shelljs写了一个脚本<br>git.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shell = <span class="built_in">require</span>(<span class="string">'shelljs'</span>);</span><br><span class="line"><span class="keyword">const</span> yargs = <span class="built_in">require</span>(<span class="string">'yargs'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'shelljs/global'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!shell.which(<span class="string">'git'</span>)) &#123;</span><br><span class="line">    shell.echo(<span class="string">'Sorry, this script requires git'</span>);</span><br><span class="line">    shell.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> argv = yargs.argv._;</span><br><span class="line">cd(<span class="string">'../deploy'</span>);</span><br><span class="line">exec(<span class="string">'git add .'</span>);</span><br><span class="line">exec(<span class="string">'git commit -m'</span> +<span class="string">`feat:`</span>+ <span class="string">`<span class="subst">$&#123;argv[<span class="number">0</span>]&#125;</span>`</span>);</span><br><span class="line">exec(<span class="string">'git push'</span>);</span><br></pre></td></tr></table></figure></p><p>在<code>npm scripts</code>中写了如下脚本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"publish"</span>: <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; cp -r public/* ../deploy &amp;&amp; node ./git.js"</span>,</span><br></pre></td></tr></table></figure></p><p>嘿嘿,这样我每次发布一篇博客的时候直接在命令行执行如下命令就可以了;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run publish 新增博客</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener">npm scripts 使用指南</a><br><a href="http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html" target="_blank" rel="noopener">Node.js 命令行程序开发教程</a></p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glob简介</title>
      <link href="/2018/01/05/2018-01-05-glob/"/>
      <url>/2018/01/05/2018-01-05-glob/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>glob是shell使用的路径通配符,类似于正则表达式,但是与正则表达式不完全相同,在linux操作中如文件匹配等等已经使用了glob通配符;<br><a id="more"></a></p><h2 id="语法和使用"><a href="#语法和使用" class="headerlink" title="语法和使用"></a>语法和使用</h2><ul><li>*:匹配一个路径部分中0或多个字符, 注意不匹配以.开始的路径,比如.a</li><li>**: 匹配0个或多个子文件夹</li><li>?:匹配一个字符</li><li>[…]: 匹配以系列字符,如[abc]匹配字符a,b,c,在[^…]和[!…]表示匹配不在列表中的字符,如[^abc]匹配出了a,b,c以外的字符.</li><li>{a,b}: 匹配a或者b, a和b也是通配符,可以由其他通配符组成</li><li>!: 排除文件,如!a.js表示排除文件a.js</li></ul><p>glob非常强大的用途在于路径匹配，大部分的平台和开发语言都会在配置中使用glob路径匹配，其普遍性几乎使其成为一种标准。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h4 id="1-基于node的gulp时遇到glob匹配文件路径"><a href="#1-基于node的gulp时遇到glob匹配文件路径" class="headerlink" title="1.基于node的gulp时遇到glob匹配文件路径"></a>1.基于node的gulp时遇到glob匹配文件路径</h4><p>获取js目录下的所有js文件.(不包括以’.’开头的文件)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//*:匹配路径中某部分:0个或多个字符</span></span><br><span class="line">glob(<span class="string">"js/*.js"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">er, files</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(files)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="2-gitignore中遇到glob匹配文件路径"><a href="#2-gitignore中遇到glob匹配文件路径" class="headerlink" title="2..gitignore中遇到glob匹配文件路径"></a>2.<code>.gitignore</code>中遇到glob匹配文件路径</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 此为注释 – 将被 Git 忽略</span><br><span class="line">    # 忽略所有 .a 结尾的文件</span><br><span class="line">    *.a</span><br><span class="line">    # 但 lib.a 除外</span><br><span class="line">    !lib.a</span><br><span class="line">    # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br><span class="line">    /TODO</span><br><span class="line">    # 忽略 build/ 目录下的所有文件</span><br><span class="line">    build/</span><br><span class="line">    # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br><span class="line">    doc<span class="comment">/*.txt</span></span><br></pre></td></tr></table></figure><p>.gitigore的格式规范</p><ul><li>所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。</li><li>可以使用标准的 glob 模式匹配</li><li>匹配模式最后跟反斜杠（/）说明要忽略的是目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/isaacs/node-glob" target="_blank" rel="noopener">node-glob</a><br><a href="http://blog.csdn.net/tangxiaolang101/article/details/53931145" target="_blank" rel="noopener">node-glob使用记</a></p>]]></content>
      
      
      <categories>
          
          <category> glob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> glob </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017年末面试总结</title>
      <link href="/2018/01/01/2018-01-01-2017%E5%B9%B4%E6%9C%AB%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
      <url>/2018/01/01/2018-01-01-2017%E5%B9%B4%E6%9C%AB%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/possible.jpg" alt="interview"></p><blockquote><p>此次总结涉及<code>58到家</code>,<code>阿里</code>,<code>支付宝</code>面试;</p></blockquote><p>面试的问题大多都是针对简历上问题来问,花环相扣,一层有一层深入,知道问到你说不上来位置,所以以下面试题只针对我的个人项目经历提问的,只能大致参考一下😁</p><a id="more"></a><h1 id="58到家"><a href="#58到家" class="headerlink" title="58到家"></a>58到家</h1><h2 id="58到家一面"><a href="#58到家一面" class="headerlink" title="58到家一面"></a>58到家一面</h2><ul><li>1.DOM0级事件和DOM2级事件的区别</li><li>2.移动端和pc端的区别</li><li>3.判断变量类型</li><li>4.事件委托及使用场景</li><li>5.作用域</li><li>6.原型链</li></ul><h2 id="58到家二面"><a href="#58到家二面" class="headerlink" title="58到家二面"></a>58到家二面</h2><p>全程都在手写代码</p><ul><li>1.斐波那契数列的实现函数</li><li>2.事件委托(e.currentTarget和e.target的区别)</li><li>3.求数组的交集</li><li>4.this</li><li>5.原型链</li></ul><h2 id="58三面"><a href="#58三面" class="headerlink" title="58三面"></a>58三面</h2><ul><li>1.求数组的交集: 除了用循环的方法</li><li>2.存在两个数组,arr1和arr2,他们中的每一项满足 a1 &lt;=a2,求这两个数组的并集(按照从大到小排列,并且已去重)</li><li>3.写一个登录需求,需要知道什么: 跨域,是需要直接跳转页面还是弹出弹框,(ajax和form表单的区别),</li><li>4.已经实现该功能,但是线上代码出现一个问题,有人点击登录后无反应,怎么找问题,打断点之后发现<br>(1),请求已发送,返回的信息都正常,就是没有弹窗;(2),请求没有发送,怎么找原因,(3),代码执行时才发现错误,(4)线上代码怎么部署</li><li>5.实现一个需求两个接口返回a和b,那个先返回回来就返回哪个</li><li>6.http协议</li></ul><h2 id="58四面"><a href="#58四面" class="headerlink" title="58四面"></a>58四面</h2><ul><li>1.实现一个简单的聊天,一点进来页面就进入到这个聊天室(重点是没有登录注册,怎么区分每个人,我答的是可以通过ip,还有别的方法么)</li></ul><p>面试完，感觉自己都要被掏空了，感觉把自己会的和不会的都交代出来了。</p><p>过了一个月星期告诉我面试通过了，本来以为已经挂了，因为一直没有回信</p><h1 id="阿里文娱"><a href="#阿里文娱" class="headerlink" title="阿里文娱"></a>阿里文娱</h1><h2 id="阿里一面"><a href="#阿里一面" class="headerlink" title="阿里一面"></a>阿里一面</h2><ul><li>1.跨域是什么?什么时候会遇到跨域问题,怎么解决</li><li>2.原型链</li><li>3.有没有从零搭建过webpack/babel</li><li>4.babel怎么配置的,他会转换类似<code>String.prototype，给上面增加includes方法</code>么</li><li>5.使用vue/react做单页应用遇到什么问题么,或者说一下单页应用的优缺点(首屏渲染太慢),有没有好的解决方法</li></ul><h2 id="阿里二面"><a href="#阿里二面" class="headerlink" title="阿里二面"></a>阿里二面</h2><ul><li>1.node有什么优点和缺点</li><li>2.说出几个数组的方法</li><li>3.react和vue的区别</li><li>4.Meteor内部实现</li><li>5.在app内嵌套h5页面实现原理</li></ul><h2 id="阿里三面"><a href="#阿里三面" class="headerlink" title="阿里三面"></a>阿里三面</h2><ul><li>1.rem原理</li><li>2.javascript垃圾回收机制</li><li>3.内存原理</li><li>4.你觉得你这一年最大的进步是在什么时候</li><li>5.你除了做前端开发,还考虑做产品和测试么(不考虑)</li></ul><h2 id="阿里四面"><a href="#阿里四面" class="headerlink" title="阿里四面"></a>阿里四面</h2><ul><li>1.你为什么不考研</li><li>2.河北的为什么不考虑去雄安</li><li>3.你说之前待的公司给不了你想要的,那你去公司面试的时候为什么不提前调查清楚呢,你知道各公司的竞争力和优势么,你为什么想来我们这儿</li></ul><p>面完最后一面，感觉自己的价值观都不对了，最后一面问到的问题都不知道该怎么答（哎，看来不应该只想着提高技术，还应该提高自己的情商）；不过开心的是当天晚上被通知说面试通过了让去体检；</p><h1 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h1><h2 id="支付宝一面"><a href="#支付宝一面" class="headerlink" title="支付宝一面"></a>支付宝一面</h2><ul><li>1.你怎么转专业学的前端</li><li>2.react和vue组件通信</li><li>3.你做过最骄傲的项目是什么</li><li>4.对于node你了解过多少</li><li>5.自己配置过服务器么</li><li>6.有没有用node做过类似监听服务器动态的东西</li><li>7.项目中的消息模块你们用了几个服务器(就一个)肯定经常崩吧(刚刚崩了),有什么解决方法</li></ul><h2 id="支付宝二面"><a href="#支付宝二面" class="headerlink" title="支付宝二面"></a>支付宝二面</h2><ul><li>1.react和vue组件通信</li><li>2.egg解决了什么问题</li><li>3.你觉github上比较好的开源项目</li><li>4.你最崇拜的前端开发工作者</li><li>5.egg+react和Meteor开发有什么区别</li><li>6.Meteor开发的内部实现机制是什么</li><li>7.说一下你用Meteor实现聊天的逻辑</li><li>8.说一下你最近写的一些项目,用的什么技术栈,遇到什么问题,怎么解决的</li></ul><p>后来知道支付宝这个部门就是写antd和egg等开源库的部门，当时二面过了，三面也就是终面是视频面试来着，但是当时已经收到大文娱的offer,而且也有点不自信自己可以通过终面，所以就拒绝了。后来面试我的那个小哥哥还给我做过思想工作，说他们面试那么多人，有的都工作好几年了，都没通过面试，只有我一个通过的，而且终面都不问技术，主要是问一些价值观的问题，所以希望我好好考虑一下。真的很感谢小哥哥那么相信我。</p><p>哎，我真的是一个非常纠结的人，没收到大文娱offer之前，一直特开心，能去58到家也特别开心，后来收到阿里大文娱的offer，支付宝二面通过的好消息（阿里规定同一个人不能同时面试多个部门，所以当时支付宝面试没走系统的面试），一下子选择太多真的不知道怎么选，虽然真的是很想去支付宝，但是因为大文娱的offer有有限期，而且自己有有点不太自信能通过终面，哎，忍痛拒绝，希望自己以后技术强大可以转岗去支付宝！</p><p>希望以后遇到选择不要这么优柔寡断！</p><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><ul><li>1.基础真的很重要；</li><li>2.还有对于简历上写的一些东西一定是自己最熟悉的，不然一定要慎重往简历上写；</li><li>3.平常遇到什么问题一定要多想想为什么，有没有更好的方法</li><li>4.要懂一些原理</li></ul>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017年小结</title>
      <link href="/2017/12/29/2017-12-29-2017%E5%B9%B4%E5%B0%8F%E7%BB%93/"/>
      <url>/2017/12/29/2017-12-29-2017%E5%B9%B4%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/sumary.jpg" alt="title"><br><a id="more"></a><br>马上就2018年了,真的很快,在2017年底收到了阿里的offer,进入了自己一直都想去的公司,给2018年开了一个好头.</p><p>大概做一个2017年的简单总结,主要用于反思这一年及对2018年的展望.</p><p>很多人问我,你,一个普通学校的二本, 刚毕业半年,而且还不是计算机专业的,居然能收到阿里的offer,阿里社招不都是三年工作经验么,不都是只招211和985学校的么.先简单的给大家解答一下疑惑.</p><p>首先阿里社招并没有必须是三年工作经验,学历强制要求211和985,只要你有能力,这里就欢迎你.阿里是一个只要你有能力,这里是可以让你能力得到发挥的舞台.</p><h3 id="对于面试"><a href="#对于面试" class="headerlink" title="对于面试"></a>对于面试</h3><p>其实从面试问的问题基本就能了解到公司在技术上面主要的侧重点,之前面试都是如果有机会就会去,然后碰到很多面试不到五分钟,十分钟的就出来了,去了大多问你会切图么,会ui么,考虑转后端么,所以有面试机会的时候一定要查一下这个公司,是不是互联网公司,因为本人想去一个互联网公司(比较注重技术,有技术追求的),加入公司主要业务不是靠技术支撑,这种我就不会想去浪费时间了.</p><h3 id="关于我的经历"><a href="#关于我的经历" class="headerlink" title="关于我的经历"></a>关于我的经历</h3><p>2016年11月份刚来北京的时候,也就是第一份工作,一个前端(我),一个后端,不择手段的完成需求,不考虑性能,优化等等.也不能说公司怎么怎么样,主要是侧重点不一样吧.</p><p>后来又去了一家创业公司,从0开始重构项目,不得不说,我还是比较幸运的,因为没有接手别人写的代码,完全就是自己从0开始选择技术栈,搭建项目架构,向身边的技术大佬们请教(没事的时候就会去参加一些线下的技术分享活动,当时他们讲的我还是听不太懂,总是就是去膜拜一下各位大佬们,看看大家目前都关注哪些点),加入了eslint,用上了webpack,用vue,react进行组件式的开发,从以前用jq操作DOM,到现在用virtural dom.</p><p>经验太少,遇到问题只能自己摸索.所在公司基本都是我主要负责前端,慢慢的,差不多产品给的需求,都能实现,但是可能性能和优化上做的不够好,主要是没有那个意识,产品用户量没有那么大,所以只有极少用户会反映一些奇怪的bug,然后公司没有能复现问题的手机,哎,这个就有点难了,随之问题就被搁置了,不然就是改需求.然后有一些二三线大厂的面试机会,面试的问题很多都是我没有考虑到的,比如性能优化,最佳实践,问的问题很简单,但是面试官想知道最佳实践,我是一脸懵逼,意识到这些问题之后,就知道以后写代码的时候不能只考虑实现需求,还应该怎么去实现好需求.</p><p>7月份开始有意识的搞一个自己的博客,把自己遇到的问题总结一下,常反思,大家看到之后也会给我指出一些问题;<br>遇到新的技术出现,就会去看一下这个技术解决了什么问题,这个技术又会有什么问题;</p><h3 id="18年展望"><a href="#18年展望" class="headerlink" title="18年展望"></a>18年展望</h3><p>能进入阿里,并不是因为我现在技术多好,面试官偷偷告诉我说,我刚毕业半年,对于其他大多数毕业半年来说是不错的,但是需要不断的学习;<br>尤其在这个身边人都比自己优秀的环境,不努力怎么行;</p><h4 id="技术方面"><a href="#技术方面" class="headerlink" title="技术方面"></a>技术方面</h4><ul><li>1.深入的学习一下js,重新好好看一下<ul><li><a href="https://book.douban.com/subject/26351021/" target="_blank" rel="noopener">你不知道的javascript</a></li><li><a href="https://book.douban.com/subject/10546125/" target="_blank" rel="noopener">javascript高级程序设计(第三版)</a></li></ul></li><li>2.了解一下设计模式<ul><li><a href="https://book.douban.com/subject/2334288/" target="_blank" rel="noopener">大话设计模式</a></li><li><a href="https://book.douban.com/subject/24744217/" target="_blank" rel="noopener">javascript设计模式</a></li></ul></li><li>3.性能,http方面<ul><li><a href="https://book.douban.com/subject/25863515/" target="_blank" rel="noopener">图解HTTP</a></li><li><a href="https://book.douban.com/subject/25856314/" target="_blank" rel="noopener">Web性能权威指南</a></li></ul></li><li>4.nodejs<ul><li><a href="https://book.douban.com/subject/25870705/" target="_blank" rel="noopener">Nodejs实战</a></li></ul></li><li>5.代码质量方面的<ul><li><a href="https://book.douban.com/subject/21792530/" target="_blank" rel="noopener">编写可维护的javascript</a></li><li><a href="https://book.douban.com/subject/4881987/" target="_blank" rel="noopener">编写高质量代码</a></li><li><a href="https://book.douban.com/subject/1477390/" target="_blank" rel="noopener">代码大全(第二版)</a></li></ul></li><li>6.能看懂一些库的源码</li></ul><p>…</p><h4 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h4><ul><li>1.可以多去几个地方旅游</li><li>2.抽出时间锻炼身体</li><li>3.好好吃饭😆,好好睡觉,开开心心的写代码</li></ul><h3 id="最想说的-希望和大家共勉"><a href="#最想说的-希望和大家共勉" class="headerlink" title="最想说的,希望和大家共勉"></a>最想说的,希望和大家共勉</h3><ul><li>1.一定要夯实基础,不要盲目的去追求框架</li><li>2.学会用谷歌搜索,尽量用英文搜索,还有学习一个新技术主要是从官方文档入手,尽量看英文的</li><li>3.搜文档上MDN</li></ul><p>来一个招聘广告,欢迎有能力的人将简历发到 <a href="mailto:`yaxing.wyx@alibaba-inc.com" target="_blank" rel="noopener">`yaxing.wyx@alibaba-inc.com</a>`</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eslint配置</title>
      <link href="/2017/12/28/2017-12-28-eslint%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/12/28/2017-12-28-eslint%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/Eslint.jpg" alt="eslint"></p><a id="more"></a><h2 id="eslint配置"><a href="#eslint配置" class="headerlink" title="eslint配置"></a>eslint配置</h2><p>全局安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g eslint</span><br></pre></td></tr></table></figure></p><p>局部安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D eslint</span><br></pre></td></tr></table></figure></p><p>接下来新建一个配置文件.eslintrc.js,或执行以下命令自动生成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint --init</span><br></pre></td></tr></table></figure></p><h2 id="制定环境"><a href="#制定环境" class="headerlink" title="制定环境"></a>制定环境</h2><p>要指定配置文件中的环境，请使用env键并指定要启用的环境true。例如，以下启用浏览器和Node.js环境：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"env"</span>: &#123;</span><br><span class="line">        <span class="string">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"node"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者在一个package.json文件中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"mypackage"</span>,</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">    <span class="string">"eslintConfig"</span>: &#123;</span><br><span class="line">        <span class="string">"env"</span>: &#123;</span><br><span class="line">            <span class="string">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"node"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="配置规则"><a href="#配置规则" class="headerlink" title="配置规则"></a>配置规则</h2><p>ESLint带有大量的规则。您可以使用配置注释或配置文件修改您的项目使用的规则。要更改规则设置，您必须将规则ID设置为以下值之一：</p><ul><li>“off”或者0- 关闭该规则</li><li>“warn”或者1- 将规则打开为警告（不影响退出代码）</li><li>“error”或者2- 将规则打开为错误（触发时退出代码为1）</li></ul><h3 id="通过内联注释禁用规则"><a href="#通过内联注释禁用规则" class="headerlink" title="通过内联注释禁用规则"></a>通过内联注释禁用规则</h3><ul><li>要在整个文件中禁用规则警告，请在文件/<em> eslint-disable </em>/顶部添加块注释：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"></span><br><span class="line">alert(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure><ul><li>要禁用特定行上的所有规则，请使用以下格式之一的行注释：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'foo'</span>); <span class="comment">// eslint-disable-line</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line">alert(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure><h3 id="制定全局"><a href="#制定全局" class="headerlink" title="制定全局"></a>制定全局</h3><blockquote><p>可以使用文件内部的注释或配置文件来定义全局变量。</p></blockquote><h4 id="1-使用文件内部注释"><a href="#1-使用文件内部注释" class="headerlink" title="1.使用文件内部注释"></a>1.使用文件内部注释</h4><p>(1).要在JavaScript文件中使用注释来指定全局变量，请使用以下格式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* global var1, var2 */</span></span><br></pre></td></tr></table></figure></p><p>(2).如果你想要指定这些全局变量不应该被写入（只读），那么你可以设置每个false标志：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* global var1:false, var2:false */</span></span><br></pre></td></tr></table></figure></p><h4 id="2-要在配置文件中配置全局变量，请使用globals键并指示要使用的全局变量。将每个全局变量名称设置为等于true允许覆盖变量或false禁止覆盖。例如："><a href="#2-要在配置文件中配置全局变量，请使用globals键并指示要使用的全局变量。将每个全局变量名称设置为等于true允许覆盖变量或false禁止覆盖。例如：" class="headerlink" title="2.要在配置文件中配置全局变量，请使用globals键并指示要使用的全局变量。将每个全局变量名称设置为等于true允许覆盖变量或false禁止覆盖。例如："></a>2.要在配置文件中配置全局变量，请使用globals键并指示要使用的全局变量。将每个全局变量名称设置为等于true允许覆盖变量或false禁止覆盖。例如：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"globals"</span>: &#123;</span><br><span class="line">        <span class="string">"var1"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"var2"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>目前使用vscode,安装eslint插件,然后在配置中加入关于eslint的配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"eslint.enable"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"eslint.options"</span>: &#123;</span><br><span class="line">       <span class="string">"extensions"</span>: [<span class="string">".js"</span>, <span class="string">".vue"</span>, <span class="string">".jsx"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"eslint.validate"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">          <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"language"</span>: <span class="string">"javascript"</span>,</span><br><span class="line">          <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"language"</span>: <span class="string">"javascriptreact"</span>,</span><br><span class="line">          <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>&quot;eslint.autoFixOnSave&quot;: true,</code>配置完这个之后,当你在保存的时候可以自动按照你在<code>.eslintrc.js</code>目录中设置的规则自动修复一些空格缩进,单双引号及语句末尾是否需要加<code>;</code>或<code>,</code>的一些错误,但是有一些错误,比如变量声明未定义等得需要你手动去修改.</p><p>刚开始用到eslint的时候也是相当痛苦,毕竟在代码中看到一大堆红线(注: 红线为eslint的错误,鼠标划上去就会看到对应的违反了哪个规则,可以去eslint的官网查看),但是当你养成良好的习惯之后,这些习惯包括变量命名,函数命名等,其实会大大的提高工作效率,规范起来之后尤其会提高团队之前的工作效率.</p><p>我现在就有严重的代码洁癖,看到整洁的代码,心情就会十分愉悦.当然在看到团队有小伙伴一点都不注意这些,尤其需要忙他debug的时候,真的很难受,变量命名a,b, a1等.所以哪怕为了不坑团队成员的,也要养成良好的习惯.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://eslint.org/docs/user-guide/configuring#specifying-environments" target="_blank" rel="noopener">eslint.org/docs/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> eslint </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在npm上发布包</title>
      <link href="/2017/12/27/2017-12-27-%E5%9C%A8npm%E4%B8%8A%E5%8F%91%E5%B8%83%E5%8C%85/"/>
      <url>/2017/12/27/2017-12-27-%E5%9C%A8npm%E4%B8%8A%E5%8F%91%E5%B8%83%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1514467983152&amp;di=7f18195395ae333a47a666a961858759&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.yaohzone.com%2Fupload%2F2016_11%2F1478274881940%40yaohzone.png" alt="npm"></p><a id="more"></a><h1 id="在npm上发布自己的包"><a href="#在npm上发布自己的包" class="headerlink" title="在npm上发布自己的包"></a>在npm上发布自己的包</h1><h2 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h2><p>1.创建你要发布的包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir test-wyx</span><br><span class="line">cd test-wyx</span><br><span class="line">npm init</span><br><span class="line">touch readme.md</span><br><span class="line">touch index.js</span><br><span class="line">mkdir lib</span><br><span class="line">cd lib</span><br><span class="line">touch test.js</span><br></pre></td></tr></table></figure></p><p>/lib/test.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    fun : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">'这是我的第一个npm包'</span> );</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = a; <span class="comment">// 把a暴漏出去</span></span><br></pre></td></tr></table></figure></p><p>index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>( <span class="string">'./lib/test.js'</span> );</span><br><span class="line"><span class="built_in">module</span>.exports = a; <span class="comment">//把a暴漏出去</span></span><br></pre></td></tr></table></figure></p><p>现在的目录结构<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-test-wyx</span><br><span class="line">    -lib</span><br><span class="line">        -test.js</span><br><span class="line">    -index.js</span><br><span class="line">    -package.json</span><br><span class="line">    -readme.md</span><br></pre></td></tr></table></figure></p><p>2.创建npm账号,两种方式<br>第一种: 打开<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>注册<br>第二种: 命令行注册<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure></p><p>依次输入用户名，密码，邮箱就注册成功了。注册成功会自动登录，所以现在已经在本地登录成功。<br>如果你已经有npm账号可通过如下命名登录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure></p><p>输入用户名账号和密码即可登录</p><p>3.发布包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>4.这时你就可以在<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>官网 ,通过在搜索框中输入test-wyx来查询到你刚才发布的包了。<br>5.更新包，你修改过包里的js文件时，同时还得修改package.json里version的版本号后才可重新发布。</p><h2 id="应用包"><a href="#应用包" class="headerlink" title="应用包"></a>应用包</h2><p>1.新建一个文件夹<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir test</span><br><span class="line">cd test</span><br></pre></td></tr></table></figure></p><p>2.安装这个包<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install test-wyx</span><br></pre></td></tr></table></figure></p><p>3.然后，在test文件夹下新建index.js文件，输入如下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="built_in">require</span>( <span class="string">'test-wyx'</span> );</span><br><span class="line">test.fun();</span><br></pre></td></tr></table></figure></p><p>4.在test文件夹,右键选择git bash here,输入如下命令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure></p><p>就可以输出这是我的第一个npm包</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/penghuwan/p/6973702.html#_label3_0" target="_blank" rel="noopener">【npm】利用npm安装/删除/发布/更新/撤销发布包</a></li><li><a href="https://segmentfault.com/a/1190000010224751" target="_blank" rel="noopener">在npm发布自己的包</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react和vue对比</title>
      <link href="/2017/12/18/2017-12-18-react%E5%92%8Cvue%E5%AF%B9%E6%AF%94/"/>
      <url>/2017/12/18/2017-12-18-react%E5%92%8Cvue%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/vue&amp;&amp;react.jpeg" alt="title"><br><a id="more"></a></p><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><ul><li>都支持服务器端渲染</li><li>都有Virtual DOM,组件化开发,通过props参数进行父子组件数据的传递,都实现webComponent规范</li><li>数据驱动视图</li><li>都有支持native的方案,React的React native,Vue的weex</li></ul><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><ul><li>React严格上只针对MVC的view层,Vue则是MVVM模式</li><li>virtual DOM不一样,vue会跟踪每一个组件的依赖关系,不需要重新渲染整个组件树.而对于React而言,每当应用的状态被改变时,全部组件都会重新渲染,所以react中会需要shouldComponentUpdate这个生命周期函数方法来进行控制</li><li>组件写法不一样, React推荐的做法是 JSX + inline style, 也就是把HTML和CSS全都写进JavaScript了,即’all in js’; Vue推荐的做法是<code>webpack+vue-loader</code>的单文件组件格式,即html,css,jd写在同一个文件;</li><li>数据绑定: vue实现了数据的双向绑定,react数据流动是单向的</li><li>state对象在react应用中不可变的,需要使用setState方法更新状态;在vue中,state对象不是必须的,数据由data属性在vue对象中管理</li></ul><p>后续将会对vue和react的这些对比做详细的分析讲解,敬请期待😊</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中受控与非受控组件</title>
      <link href="/2017/12/12/2017-12-12-react%E4%B8%AD%E5%8F%97%E6%8E%A7%E4%B8%8E%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/"/>
      <url>/2017/12/12/2017-12-12-react%E4%B8%AD%E5%8F%97%E6%8E%A7%E4%B8%8E%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/1200/1*kt9otqHk14BZIMNruiG0BA.png" alt="title"><br><a id="more"></a></p><h2 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">    type=<span class="string">"text"</span></span><br><span class="line">    value=&#123;<span class="keyword">this</span>.state.value&#125;</span><br><span class="line">    onChange=&#123;(e) =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            value: e.target.value.toUpperCase(),</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;input&gt;</code>或<code>&lt;select&gt;</code>都要绑定一个change事件;每当表单的状态发生变化,都会被写入组件的state中,这种组件在React中被称为受控组件;在受控组件中,组件渲染出的状态与它的value或者checked prop向对应.react通过这种方式消除了组件的局部状态,是的应用的整个状态可控.react官方同样推荐使用受控表单组件,总结下React受控组件更新state的流程:</p><ul><li>1.可以通过初始state中设置表单的默认值;</li><li>2.每当表单的值发生变化时,调用onChange事件处理器;</li><li>3.事件处理器通过合成事件对象e拿到改变后的状态,并更新应用的state.</li><li>4.setState触发视图的重新渲染,完成表单组件值得更新</li></ul><blockquote><p>react中数据是单向流动的.从示例中,我们能看出来表单的数据来源于组件的state,并通过props传入,这也称为单向数据绑定.然后,我们又通过onChange事件处理器将新的表单数据写回到state,完成了双向数据绑定.</p></blockquote><h2 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h2><ul><li>如果一个表单组件没有value props(单选按钮和复选按钮对应的是 checked props)时,就可以称为非受控组件;</li><li>使用defaultValue和defaultChecked来表示组件的默认状态;</li><li>通过 defaultValue和defaultChecked来设置组件的默认值,它仅会被渲染一次,在后续的渲染时并不起作用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnControlled</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name.value);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">                &lt;input type=<span class="string">"text"</span> ref=&#123;i =&gt; <span class="keyword">this</span>.name = i&#125; defaultValue=<span class="string">"BeiJing"</span> /&gt;</span><br><span class="line">                &lt;button type=<span class="string">"submit"</span>&gt;Submit&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>form&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> UnControlled;</span><br></pre></td></tr></table></figure></li></ul><h2 id="对比受控组件和非受控组件"><a href="#对比受控组件和非受控组件" class="headerlink" title="对比受控组件和非受控组件"></a>对比受控组件和非受控组件</h2><p>将输入的字母转化为大写展示<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">    type=<span class="string">"text"</span></span><br><span class="line">    value=&#123;<span class="keyword">this</span>.state.value&#125;</span><br><span class="line">    onChange=&#123;(e) =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            value: e.target.value.toUpperCase(),</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p><p>直接展示输入的字母<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">    type=<span class="string">"text"</span></span><br><span class="line">    defaultValue=&#123;<span class="keyword">this</span>.state.value&#125;</span><br><span class="line">    onChange=&#123;(e) =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            value: e.target.value.toUpperCase(),</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p><h3 id="1-性能上的问题"><a href="#1-性能上的问题" class="headerlink" title="1.性能上的问题"></a>1.性能上的问题</h3><p>在受控组件中,每次表单的值发生变化,都会调用一次onChange事件处理器,这确实会带来性能上的的损耗,虽然使用费受控组件不会出现这些问题,但仍然不提倡使用非受控组件,这个问题可以通过Flux/Redux应用架构等方式来达到统一组件状态的目的.</p><h3 id="2-是否需要事件绑定"><a href="#2-是否需要事件绑定" class="headerlink" title="2.是否需要事件绑定"></a>2.是否需要事件绑定</h3><p>使用受控组件需要为每一个组件绑定一个change事件,并且定义一个事件处理器来同步表单值和组件的状态,这是一个必要条件.当然,某些情况可以使用一个事件处理器来处理多个表单域<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controlled</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">        <span class="keyword">super</span>(...args);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            name: <span class="string">'xingxing'</span>,</span><br><span class="line">            age: <span class="number">18</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    handleChange = <span class="function">(<span class="params">name, e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; value &#125; = e.target;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            [name]: value,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; name, age &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input type=<span class="string">"text"</span> value=&#123;name&#125; onChange=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>, <span class="string">'name'</span>)&#125; /&gt;</span><br><span class="line">                &lt;input type=<span class="string">"text"</span> value=&#123;age&#125; onChange=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>, <span class="string">'age'</span>,)&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Controlled;</span></span><br></pre></td></tr></table></figure></p><h2 id="表单组件的几个重要属性"><a href="#表单组件的几个重要属性" class="headerlink" title="表单组件的几个重要属性"></a>表单组件的几个重要属性</h2><h3 id="1-状态属性"><a href="#1-状态属性" class="headerlink" title="1.状态属性"></a>1.状态属性</h3><p>React的form组件提供了几个重要的属性,用来显示组件的状态</p><ul><li>value: 类型为text的input组件,textarea组件以及select组件都借助value prop来展示应用的状态</li><li>checked: 类型为radio或checkbox的组件借助值为boolean类型的selected prop来展示应用的状态</li><li>selected: 该属性可作用于select组件下面的option上,React并不建议这种方式表示状态.而推荐在select组件上使用value的方式</li></ul><h3 id="2-事件属性"><a href="#2-事件属性" class="headerlink" title="2.事件属性"></a>2.事件属性</h3><p>当状态属性改变时会触发onChange事件属性.受控组件中的change事件与HTML DOM中提供的input事件更为类似;</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中组件通信的几种方式</title>
      <link href="/2017/12/10/2017-12-10-react%E4%B8%AD%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2017/12/10/2017-12-10-react%E4%B8%AD%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3297464-87d384c658a822c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="react组件通信"><br><a id="more"></a></p><h1 id="需要组件之进行通信的几种情况"><a href="#需要组件之进行通信的几种情况" class="headerlink" title="需要组件之进行通信的几种情况"></a>需要组件之进行通信的几种情况</h1><ul><li>父组件向子组件通信</li><li>子组件向父组件通信</li><li>跨级组件通信</li><li>没有嵌套关系组件之间的通信</li></ul><h2 id="1-父组件向子组件通信"><a href="#1-父组件向子组件通信" class="headerlink" title="1. 父组件向子组件通信"></a>1. 父组件向子组件通信</h2><p>React数据流动是单向的,父组件向子组件通信也是最常见的;父组件通过props向子组件传递需要的信息<br>Child.jsx<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">&#123; name &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.propTypes = &#123;</span><br><span class="line">    name: PropTypes.string.isRequired,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Parent.jsx<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">'./Child'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Child name=<span class="string">"Sara"</span> /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Parent;</span></span><br></pre></td></tr></table></figure></p><h2 id="2-子组件向父组件通信"><a href="#2-子组件向父组件通信" class="headerlink" title="2. 子组件向父组件通信"></a>2. 子组件向父组件通信</h2><ul><li>利用回调函数</li><li>利用自定义事件机制</li></ul><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>实现在子组件中点击隐藏组件按钮可以将自身隐藏的功能</p><p>List3.jsx<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List3</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        hideConponent: PropTypes.func.isRequired,</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                哈哈,我是List3</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.props.hideConponent&#125;&gt;隐藏List3组件&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List3;</span><br></pre></td></tr></table></figure></p><p>App,jsx<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> List3 <span class="keyword">from</span> <span class="string">'./components/List3'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">        <span class="keyword">super</span>(...args);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            isShowList3: <span class="literal">false</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    showConponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            isShowList3: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    hideConponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            isShowList3: <span class="literal">false</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.showConponent&#125;&gt;显示Lists组件&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                    this.state.isShowList3 ?</span></span><br><span class="line"><span class="regexp">                        &lt;List3 hideConponent=&#123;this.hideConponent&#125; /</span>&gt;</span><br><span class="line">                    :</span><br><span class="line">                    <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>观察一下实现方法,可以发现它与传统回调函数的实现方法一样.而且setState一般与回调函数均会成对出现,因为回调函数即是转换内部状态是的函数传统;</p><h2 id="3-跨级组件通信"><a href="#3-跨级组件通信" class="headerlink" title="3. 跨级组件通信"></a>3. 跨级组件通信</h2><ul><li><p>层层组件传递props</p><blockquote><p>例如A组件和B组件之间要进行通信,先找到A和B公共的父组件,A先向C组件通信,C组件通过props和B组件通信,此时C组件起的就是中间件的作用</p></blockquote></li><li><p>使用context</p><blockquote><p>context是一个全局变量,像是一个大容器,在任何地方都可以访问到,我们可以把要通信的信息放在context上,然后在其他组件中可以随意取到;<br>但是React官方不建议使用大量context,尽管他可以减少逐层传递,但是当组件结构复杂的时候,我们并不知道context是从哪里传过来的;而且context是一个全局变量,全局变量正是导致应用走向混乱的罪魁祸首.</p></blockquote></li></ul><h3 id="使用context"><a href="#使用context" class="headerlink" title="使用context"></a>使用context</h3><p>下面例子中的组件关系: ListItem是List的子组件,List是app的子组件</p><p>ListItem.jsx<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListItem</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 子组件声明自己要使用context</span></span><br><span class="line">    <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">        color: PropTypes.string,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        value: PropTypes.string,</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; value &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;li style=&#123;&#123; <span class="attr">background</span>: <span class="keyword">this</span>.context.color &#125;&#125;&gt;</span><br><span class="line">                &lt;span&gt;&#123;value&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>li&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ListItem;</span><br></pre></td></tr></table></figure></p><p>List.jsx<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ListItem <span class="keyword">from</span> <span class="string">'./ListItem'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 父组件声明自己支持context</span></span><br><span class="line">    <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">        color: PropTypes.string,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        list: PropTypes.array,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 提供一个函数,用来返回相应的context对象</span></span><br><span class="line">    getChildContext() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            color: <span class="string">'red'</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; list &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        list.map(<span class="function">(<span class="params">entry, index</span>) =&gt;</span></span><br><span class="line">                            &lt;ListItem key=&#123;<span class="string">`list-<span class="subst">$&#123;index&#125;</span>`</span>&#125; value=&#123;entry.text&#125; /&gt;,</span><br><span class="line">                       )</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure></p><p>app.jsx<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">'./components/List'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">    &#123;</span><br><span class="line">        text: <span class="string">'题目一'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        text: <span class="string">'题目二'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;List</span><br><span class="line">                    list=&#123;list&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="4-没有嵌套关系的组件通信"><a href="#4-没有嵌套关系的组件通信" class="headerlink" title="4. 没有嵌套关系的组件通信"></a>4. 没有嵌套关系的组件通信</h2><ul><li>使用自定义事件机制</li></ul><blockquote><p>在componentDidMount事件中,如果组件挂载完成,再订阅事件;在组件卸载的时候,在componentWillUnmount事件中取消事件的订阅;<br>以常用的发布/订阅模式举例,借用Node.js Events模块的浏览器版实现</p></blockquote><h3 id="使用自定义事件的方式"><a href="#使用自定义事件的方式" class="headerlink" title="使用自定义事件的方式"></a>使用自定义事件的方式</h3><p>下面例子中的组件关系: List1和List2没有任何嵌套关系,App是他们的父组件;</p><p>实现这样一个功能: 点击List2中的一个按钮,改变List1中的信息显示<br>首先需要项目中安装events 包：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install events --save</span><br></pre></td></tr></table></figure></p><p>在src下新建一个util目录里面建一个events.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventEmitter &#125; <span class="keyword">from</span> <span class="string">'events'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> EventEmitter();</span><br></pre></td></tr></table></figure></p><p>list1.jsx<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">'../util/events'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            message: <span class="string">'List1'</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="comment">// 组件装载完成以后声明一个自定义事件</span></span><br><span class="line">        <span class="keyword">this</span>.eventEmitter = emitter.addListener(<span class="string">'changeMessage'</span>, (message) =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                message,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        emitter.removeListener(<span class="keyword">this</span>.eventEmitter);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.state.message&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default List;</span></span><br></pre></td></tr></table></figure></p><p>List2.jsx<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">'../util/events'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleClick = <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">        emitter.emit(<span class="string">'changeMessage'</span>, message);</span><br><span class="line">    &#125;;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>, <span class="string">'List2'</span>)&#125;&gt;点击我改变List1组件中显示信息&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>APP.jsx<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> List1 <span class="keyword">from</span> <span class="string">'./components/List1'</span>;</span><br><span class="line"><span class="keyword">import</span> List2 <span class="keyword">from</span> <span class="string">'./components/List2'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;List1 /&gt;</span><br><span class="line">                &lt;List2 /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>自定义事件是典型的发布订阅模式,通过向事件对象上添加监听器和触发事件来实现组件之间的通信</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>父组件向子组件通信: props</li><li>子组件向父组件通信: 回调函数/自定义事件</li><li>跨级组件通信: 层层组件传递props/context</li><li>没有嵌套关系组件之间的通信: 自定义事件</li></ul><blockquote><p>在进行组件通信的时候,主要看业务的具体需求,选择最合适的;<br>当业务逻辑复杂到一定程度,就可以考虑引入<a href="http://cn.mobx.js.org/" target="_blank" rel="noopener">Mobx</a>,<a href="https://redux.js.org/" target="_blank" rel="noopener">Redux</a>等状态管理工具</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://reactjs.org/docs/components-and-props.html" target="_blank" rel="noopener">reactjs官方文档</a><br><a href="https://book.douban.com/subject/26918038/" target="_blank" rel="noopener">深入React技术栈</a><br><a href="http://www.jianshu.com/p/fb915d9c99c4" target="_blank" rel="noopener">React中组件间通信的几种方式</a></p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript项目开发规范实例</title>
      <link href="/2017/12/04/2017-12-04-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
      <url>/2017/12/04/2017-12-04-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/guifan.jpeg" alt="title"><br>总结一下个人在开发及review同事代码的过程中遇到的因为一些项目规范带来的问题及认为比较好的解决方法;<br>由于个人经验和认知水平有限,下面仅代表我的个人观念,欢迎各位大佬多给我提建议;</p><a id="more"></a><p>以本人最近写的一个项目(技术栈为Meteor + React + MongoDB)为例</p><h1 id="readme的使用"><a href="#readme的使用" class="headerlink" title="readme的使用"></a>readme的使用</h1><p>因为一个项目往往需要很多人一起协助开发,还有可能会不断有新手接手项目,所以readme里面一定要仅可能多的信息</p><ul><li>项目启动命令</li><li>代码规范<ul><li>Commit Message 编写规范</li><li>命名: class命名,变量命名,函数命名,组件命名等</li></ul></li><li>组件</li><li>目录结构</li><li>常遇到的问题及解决方案</li></ul><p>也可以加一些项目中遇到的设计到的文档链接</p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><h3 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h3><h4 id="使用eslint来约束团队统一的代码规则"><a href="#使用eslint来约束团队统一的代码规则" class="headerlink" title="使用eslint来约束团队统一的代码规则"></a>使用eslint来约束团队统一的代码规则</h4><p>eslint规则在.eslintrc.js中定义,觉得不合理的可以跟团队成员商量禁掉某条规则,或者有好的建议的也可以添加;<br>主要注意一下几条:</p><ul><li>代码缩进用4空格</li><li>语句必须默认后加分号</li><li>使用单引号</li><li>提交代码前将console.log语句删掉或注释掉(不然影响其他开发人员调试)</li><li>禁止使用var,使用es6的let,const声明变量</li></ul><p>还有一些情况是不需要检测的,例如第3方的库, 框架、组件、ui库等等,可以将这些文件放在.eslintignore文件中,可以忽略eslint的检测</p><p>在文件顶部加上下面这行,可以禁掉整个文件的eslint规则<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br></pre></td></tr></table></figure></p><h4 id="pre-commit-的使用"><a href="#pre-commit-的使用" class="headerlink" title="pre-commit 的使用"></a>pre-commit 的使用</h4><p>使用方法<br>1.在命令行安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm  i --save-dev pre-commit</span><br></pre></td></tr></table></figure></p><p>2.在package.json中配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">        <span class="string">"eslint"</span>: <span class="string">"eslint ./ --ext js,vue --ignore-pattern .eslintignore --cache --fix"</span>,</span><br><span class="line">        <span class="string">"lint-message"</span>: <span class="string">"echo '开始 eslint 检查, 存在 error 则会拒绝提交'"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"pre-commit"</span>: [</span><br><span class="line">        <span class="string">"lint-message"</span>,</span><br><span class="line">        <span class="string">"eslint"</span> <span class="comment">// 进行eslint检查并自动修复一些简单的格式错误</span></span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码提交之前会强制code-review,不符合规范的不允许提交代码</p><p>如果项目实在没时间去改的话，可以git commit -m ‘XXX’ –no-verify 或 git commit -n ‘xxx’强制提交</p><h4 id="小技巧-vscode可以配置保存自动修复eslint错误"><a href="#小技巧-vscode可以配置保存自动修复eslint错误" class="headerlink" title="小技巧-vscode可以配置保存自动修复eslint错误"></a>小技巧-vscode可以配置保存自动修复eslint错误</h4><p>vscode安装eslint插件,在配置中配置如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="string">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="string">"eslint.enable"</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="string">"eslint.options"</span>: &#123;</span><br><span class="line">        <span class="string">"extensions"</span>: [<span class="string">".js"</span>, <span class="string">".vue"</span>, <span class="string">".jsx"</span>]</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="string">"eslint.validate"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line"></span><br><span class="line">              <span class="string">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">              <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="string">"language"</span>: <span class="string">"javascript"</span>,</span><br><span class="line">              <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="string">"language"</span>: <span class="string">"javascriptreact"</span>,</span><br><span class="line">              <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">      ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Commit-Message-编写规范"><a href="#Commit-Message-编写规范" class="headerlink" title="Commit Message 编写规范"></a>Commit Message 编写规范</h3><p>编写Commit Message需要遵循一定的范式，内容应该清晰明了，指明本次提交的目的，便于日后追踪问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">feat: 新功能</span><br><span class="line">fix: 修补bug</span><br><span class="line">docs: 文档</span><br><span class="line">style: 格式(不影响代码运行的变动)</span><br><span class="line">refactor: 重构</span><br><span class="line">test: 添加测试</span><br><span class="line">chore: 构建过程或辅助工具的变动</span><br></pre></td></tr></table></figure></p><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><p>命名的语义化真的特别特别重要,哪怕不知道要命名的这个词的英文是什么,也要去查一下;千万不要以a,b,c等没有任何语义的词去命名;之前我也总是注意不到这一点,但是最近在看同事的代码还有重构自己之前写的部分代码,命名压根看不明白这个变量的意思,总之,看这样的代码怎一个痛苦了得</p><p>常见class命名关键词：<br> 布局类：header, footer, container, main, content, aside, page, section<br> 包裹类：wrap, inner<br> 区块类：region, block, box<br> 结构类：hd, bd, ft, top, bottom, left, right, middle, col, row, grid, span<br> 列表类：list, item, field<br> 主次类：primary, secondary, sub, minor<br> 大小类：s, m, l, xl, large, small<br> 状态类：active, current, checked, hover, fail, success, warn, error, on, off<br> 导航类：nav, prev, next, breadcrumb, forward, back, indicator, paging, first, last<br> 交互类：tips, alert, modal, pop, panel, tabs, accordion, slide, scroll, overlay,<br> 星级类：rate, star<br> 分割类：group, seperate, divider<br> 等分类：full, half, third, quarter<br> 表格类：table, tr, td, cell, row<br> 图片类：img, thumbnail, original, album, gallery<br> 语言类：cn, en<br> 论坛类：forum, bbs, topic, post<br> 方向类：up, down, left, right<br> 其他语义类：btn, close, ok, cancel, switch; link, title, info, intro, more, icon; form, label, search, contact, phone, date, email, user; view, loading…</p><p>变量命名: 名字要能准确的描述出该变量所代表的事物<br>比如表示<code>user</code>的<code>id</code>就叫<code>userId</code>,而不要只叫<code>user</code></p><p>函数命名建议：可使用常见动词约定</p><table><thead><tr><th>动词</th><th>含义</th></tr></thead><tbody><tr><td>get</td><td>获取某个值</td></tr><tr><td>set</td><td>设置某个值</td></tr><tr><td>is</td><td>判断是否为某个值</td></tr><tr><td>has</td><td>判断是否有某个值</td></tr></tbody></table><p>以下规则是此项目中使用的,主要看团队代码习惯:</p><ol><li>组件名和组件所在文件名使用大驼峰式</li><li>css类名使用小写单词并用横线(-)分割</li><li>dom节点以$开头</li></ol><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ol><li>每个组件占一个文件</li><li>组件不包含状态则应写为 stateless 组件</li><li>非 stateless 组件使用 pure-render-decorator 优化</li></ol><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">├── client  </span><br><span class="line">│   ├── main.html                       客户端页面模板</span><br><span class="line">│   └── main.js                         客户端入口  </span><br><span class="line">├── imports  </span><br><span class="line">│   ├── client  </span><br><span class="line">│   │   ├── App.jsx                     顶层组件  </span><br><span class="line">│   │   ├── components                  公共组件  </span><br><span class="line">│   │   ├── routers                     前端路由  </span><br><span class="line">│   │   ├── styles                      样式  </span><br><span class="line">│   │   └── views                       视图  </span><br><span class="line">│   │       ├── header                  公共头  </span><br><span class="line">│   │       ├── login                   登录注册  </span><br><span class="line">│   ├── schema                          模型  </span><br><span class="line">│   └── util                            工具函数  </span><br><span class="line">├── packages                            自定义 meteor 包  </span><br><span class="line">├── public                              客户端资源  </span><br><span class="line">└── server   </span><br><span class="line">    ├── main.js                         服务端入口  </span><br><span class="line">    └── user                            用户接口</span><br></pre></td></tr></table></figure><h2 id="issues的使用"><a href="#issues的使用" class="headerlink" title="issues的使用"></a>issues的使用</h2><p>项目中总会遇到很多奇奇怪怪的问题,当时印象深刻,过了一段时间,就忘了具体的问题及解决办法,虽然每次可以通过查commit为fix的记录,但是这样查找起来很麻烦,我们项目是用gitlab来托管,可以合理的理由<code>issues</code>,每次遇到很棘手的问题的时候,可以提一个issues,等后期把这个问题解决了再把这个issues给关闭,并写上问题原因及解决办法分析</p><blockquote><p>下面补充的是项目中针对Meteor后端开发的一些规范</p></blockquote><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="Collection-定义"><a href="#Collection-定义" class="headerlink" title="Collection 定义"></a>Collection 定义</h3><p>所有 Collection 定义放在 imports/schema 目录, 每个 Collection 务必定义 Schema 来约束字段</p><h3 id="Schema-定义"><a href="#Schema-定义" class="headerlink" title="Schema 定义"></a>Schema 定义</h3><p>Schema 定义使用 <a href="https://github.com/aldeed/meteor-simple-schema" target="_blank" rel="noopener">SimpleSchema</a>, 数据插入数据库前必须通过 schema 校验, 调用校验语句为 <code>表名.schema.validate(要插入的数据);</code></p><h3 id="过滤-Collection-字段"><a href="#过滤-Collection-字段" class="headerlink" title="过滤 Collection 字段"></a>过滤 Collection 字段</h3><p>默认情况下, 数据查询语句会返回所有字段, 比如 <code>Memete.users.find({})</code> 会将用户的密码和 token 一并返回, 这样是不安全不正确的, find / findOne 的第二个参数是查询选项, <code>fields</code> 字段可以控制返回字段, 例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Meteor.users.find(</span><br><span class="line">    &#123; &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        fields: &#123;</span><br><span class="line">            username: <span class="number">1</span>,</span><br><span class="line">            profile: <span class="number">1</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>该查询会返回 _id, username, profile 字段, 其中 _id 是默认返回的</p><h3 id="自己定义populate方法-取出关联数据"><a href="#自己定义populate方法-取出关联数据" class="headerlink" title="自己定义populate方法(取出关联数据)"></a>自己定义populate方法(取出关联数据)</h3><p>在做邀请新的好友入群的时候,添加新的好友,利用<a href="https://atmospherejs.com/reywood/publish-composite" target="_blank" rel="noopener">reywood:publish-composite</a>并不会自动更新数据,所以以后直接自己在客户端定义方法<br>这样做的好处是解决了取关联数据不会自动更新的bug,但是有点麻烦的是每次需要关联数据的时候必须在客户端调用一次方法,正在考虑有没有更好的解决方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Meteor &#125; <span class="keyword">from</span> <span class="string">'meteor/meteor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PopulateUtil = &#123;</span><br><span class="line">    group(group) &#123;</span><br><span class="line">        <span class="keyword">if</span> (group) &#123;</span><br><span class="line">            group.members = Meteor.users.find(&#123; <span class="attr">_id</span>: &#123; <span class="attr">$in</span>: group.members &#125; &#125;).fetch();</span><br><span class="line">            group.admin = Meteor.users.findOne(&#123; <span class="attr">_id</span>: group.admin &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    groups(groups) &#123;</span><br><span class="line">        groups.forEach(<span class="function"><span class="params">group</span> =&gt;</span> PopulateUtil.group(group));</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> PopulateUtil;</span><br></pre></td></tr></table></figure></p><p>因为这次项目需要自己设计数据库,还有自己定义后端方法,之前没有任何经验,做到现在也总结出一点心得:</p><ul><li>数据库设计一定要根据具体的业务逻辑(开始设计之前一定要和产品沟通清楚产品逻辑)</li><li>能在后端取到的数据,在接口定义的时候不要让前端去传</li></ul><p>最后感觉后端的逻辑真的很复杂,需要各种判断,各种情况都得想到</p><p>推荐看一下这本<a href="https://book.douban.com/subject/1951158/" target="_blank" rel="noopener">代码大全(第二版)</a>,等看完这本书再好好的完善一下这篇文章</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/allenc/p/5178119.html" target="_blank" rel="noopener">class如何命名更规范</a><br><a href="https://book.douban.com/subject/1951158/" target="_blank" rel="noopener">代码大全(第二版)</a><br><a href="https://blog.suisuijiang.com/git-commit-written-guide/" target="_blank" rel="noopener">Commit Message 编写指南</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript中基础但是很容易忽略的点(一)</title>
      <link href="/2017/11/27/2017-11-27-javascript%E4%B8%AD%E5%9F%BA%E7%A1%80%E4%BD%86%E6%98%AF%E5%BE%88%E5%AE%B9%E6%98%93%E5%BF%BD%E7%95%A5%E7%9A%84%E7%82%B9/"/>
      <url>/2017/11/27/2017-11-27-javascript%E4%B8%AD%E5%9F%BA%E7%A1%80%E4%BD%86%E6%98%AF%E5%BE%88%E5%AE%B9%E6%98%93%E5%BF%BD%E7%95%A5%E7%9A%84%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/zhuangzhu.png" alt="title"><br>引言: 本篇文章主要总结了一些javascript中特别基础的内容,主要涉及到<code>DOM0级和DOM2级事件</code>,<code>事件流</code>, <code>事件委托</code>, <code>判断变量的类型</code>每次被问到,总是能想起一点,但是也总记不全,所以遇到这种情况的时候,就简单的记录一下.<br><a id="more"></a></p><h2 id="DOM0级事件和DOM2级事件的区别"><a href="#DOM0级事件和DOM2级事件的区别" class="headerlink" title="DOM0级事件和DOM2级事件的区别"></a>DOM0级事件和DOM2级事件的区别</h2><h3 id="DOM0事件"><a href="#DOM0事件" class="headerlink" title="DOM0事件"></a>DOM0事件</h3><ul><li>在标签内写onclick事件</li><li>在js中写onclick=function(){}函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id=<span class="string">"myButton"</span> type=<span class="string">"button"</span> value=<span class="string">"Press Me"</span> onclick=<span class="string">"console.log('thanks');"</span> &gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myButton"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'thanks'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除事件的方法是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><h3 id="DOM2级事件"><a href="#DOM2级事件" class="headerlink" title="DOM2级事件"></a>DOM2级事件</h3><p>监听方法: 两个方法用来添加和移除事件处理程序: addEventListener()和removeEventLister()<br>他们都有三个参数:</p><ul><li>事件名(如click);</li><li>事件处理程序函数</li><li>true表示在捕获阶段调用,false在冒泡阶段调用</li></ul><blockquote><p>addEventListener()可以为元素添加多个处理程序函数,触发时按照添加顺序依次调用;removeEventLister()不能移除匿名添加的函数</p></blockquote><h3 id="DOM0级事件和DOM2级事件的区别-1"><a href="#DOM0级事件和DOM2级事件的区别-1" class="headerlink" title="DOM0级事件和DOM2级事件的区别"></a>DOM0级事件和DOM2级事件的区别</h3><p>在一个标签上绑定多个事件处理程序,DOM0级只能覆盖,不会连续触发,但是DOM2级事件就不会出现这样的情况,它不会被覆盖,而且会连续触发</p><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><ul><li>事件冒泡: 事件开始时是从最具体的元素接受,然后逐级向上传播: 比如点击了div, div-&gt;body-&gt;html-&gt;Document</li><li>事件捕获: 和事件冒泡相反,从最外面的元素向下传播: 比如同样点击了div: Document-&gt;html-&gt;body-&gt;div</li></ul><p>事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。首先是事件捕获阶段；然后是实际的目标接收到事件。最后一个阶段是冒泡阶段，可以在这个阶段对事件作出相应。<br><img src="https://cdn.wangyaxing.cn/event.jpg" alt="事件流"><br>所有的浏览器都支持冒泡,我们通常使用事件冒泡,很少使用事件捕获</p><h2 id="事件委托-事件代理-及使用场景"><a href="#事件委托-事件代理-及使用场景" class="headerlink" title="事件委托(事件代理)及使用场景"></a>事件委托(事件代理)及使用场景</h2><h3 id="事件委托原理"><a href="#事件委托原理" class="headerlink" title="事件委托原理:"></a>事件委托原理:</h3><p>事件冒泡</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景:"></a>使用场景:</h3><p>DOM需要事件处理程序,一般都是直接给她这种事件处理程序;但是有很多个DOM需要添加相同的事件处理程序呢,比如,每个li都有相同的click事件,如果按照之前的做法,用for循环,给每个元素添加事件,可想而知,会出现什么样的问题;</p><p>javascript中,添加到页面上的事件程序直接影响到页面整体运行性能,因为需要不断的与DOM节点进行及哦啊胡,访问DOM次数越多,引起<a href="http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html" target="_blank" rel="noopener">浏览器重绘与重排</a>的次数也就越多,就会延长整个页面的交互准备时间,这就是为什么性能优化的重要思想之一就是减少DOM操作的原因;<br>每个函数都是一个对象,是对象就会占用内存,对象越多,内存占用率就越大,自然性能就越差;</p><p>这下子知道为什么使用事件委托,只对它的父级这一对象进行操作会大大节省内存和优化性能了吧;</p><p>事件委托的核心代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;　　</span><br><span class="line">    <span class="keyword">const</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">"ul"</span>);</span><br><span class="line">    ul.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;　　　　</span><br><span class="line">        <span class="keyword">const</span> ev = ev || <span class="built_in">window</span>.event;　　　　</span><br><span class="line">        <span class="keyword">const</span> target = ev.target || ev.srcElement;　　　　</span><br><span class="line">        <span class="keyword">if</span> (target.nodeName === <span class="string">'li'</span>) &#123;　　　　</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">123</span>);　　　　　</span><br><span class="line">            <span class="built_in">console</span>.log(target.innerHTML);　</span><br><span class="line">        &#125;　　</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Event对象提供了一个属性target,表示事件的目标节点,即触发该事件的节点(想具体了解一些这个事件的可以执行下面代码看浏览器的console内容)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="适合及不适合使用事件委托的事件"><a href="#适合及不适合使用事件委托的事件" class="headerlink" title="适合及不适合使用事件委托的事件"></a>适合及不适合使用事件委托的事件</h3><p>适合: click, mousedown, mouseup, keydown, keyup, keypress;<br>不适合:mouseover和mouseout虽然也有事件冒泡,但是需要经常计算他们的位置,处理起来有点麻烦;mousemove,每次都要计算它的位置,不好控制;还有一些本身没有冒泡的特性,如focus,blur等</p><blockquote><p>mouseenter事件类似于mouseover事件。唯一的区别是 mouseente事件不支持冒泡。</p></blockquote><h2 id="判断变量类型"><a href="#判断变量类型" class="headerlink" title="判断变量类型"></a>判断变量类型</h2><blockquote><p>javaSctipt数据类型7种: Number, String, Boolean, Null, Undefined, Object, Symbol</p></blockquote><h3 id="typeof操作符"><a href="#typeof操作符" class="headerlink" title="typeof操作符"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof" target="_blank" rel="noopener">typeof操作符</a></h3><p>可能返回的值如下</p><ul><li>undefined</li><li>boolean</li><li>string</li><li>number</li><li>object</li><li>function<br>注意: typeof 的能力有限，其对于null, Date、RegExp类型返回的都是”object”<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;; <span class="comment">// "object" </span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">// "object" </span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// "object"</span></span><br></pre></td></tr></table></figure></li></ul><p>使用场景:区分对象和原始类型,要区分一种对象类型和另一种对象类型,可以使用: instanceof运算符或对象contructor属性</p><h3 id="instanceof运算符"><a href="#instanceof运算符" class="headerlink" title="instanceof运算符"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="noopener">instanceof运算符</a></h3><p>用法: 左边的运算数是一个object,右边运算数是对象类的名字或者构造函数;返回true或false<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span> <span class="keyword">instanceof</span> <span class="built_in">Date</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>如果object是class或者构造函数的实例,则返回true,如果不是或者是null也返回false<br>instanceof运算符判断是否为数组类型<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>)</span>&#123; </span><br><span class="line">  <span class="keyword">return</span> arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="contructor属性"><a href="#contructor属性" class="headerlink" title="contructor属性"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor" target="_blank" rel="noopener">contructor属性</a></h3><p>所有的对象都有一个constructor属性,指向该对象的基本对啊性构造函数类型的属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>;</span><br><span class="line">a.constructor === <span class="built_in">Array</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">3</span>);</span><br><span class="line">n.constructor === <span class="built_in">Number</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>判断为数组还可以这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>)</span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> arr === <span class="string">"object"</span> &amp;&amp; arr.constructor === <span class="built_in">Array</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Object-ProtoType-toString"><a href="#Object-ProtoType-toString" class="headerlink" title="Object.ProtoType.toString()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString" target="_blank" rel="noopener">Object.ProtoType.toString()</a></h3><p>每个对象都有一个toString()方法,返回”[object type]”,其中type是对象的类型<br>当执行该方法时,执行以下步骤<br>1,获取对象的class属性<br>2,连接字符串 “[object “+结果1+”]” ;</p><p>所以可以通过toString()来获取每个对象的类型,为了每个对象都可以通过Object.protoType.toString()来检测,需要以Funciton.prototype.call()或Function.prototype.apply()的形式来调用,传递要检查的对象作为第一个参数,称为thisArg<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>); <span class="comment">// "[object Date]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([]); <span class="comment">// "[object Array]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/reg/ig</span>); <span class="comment">// "[object RegExp]"</span></span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.jb51.net/article/43032.htm" target="_blank" rel="noopener">JavaScript中判断对象类型的几种方法总结</a><br><a href="http://www.cnblogs.com/liugang-vip/p/5616484.html" target="_blank" rel="noopener">js中的事件委托或是事件代理详解</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html代码实现一些符号</title>
      <link href="/2017/11/22/2017-11-22-html%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%BA%9B%E7%AC%A6%E5%8F%B7/"/>
      <url>/2017/11/22/2017-11-22-html%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%BA%9B%E7%AC%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/html.jpg" alt="title"><br><a id="more"></a></p><h2 id="整理常用的一些html特殊符号"><a href="#整理常用的一些html特殊符号" class="headerlink" title="整理常用的一些html特殊符号"></a>整理常用的一些html特殊符号</h2><p>在写html的时候经常会遇到一些特殊符号,例如<code>&gt;</code>等,大家都知道直接写<code>&lt;</code>或者<code>&gt;</code>等代码会报错,原因是因为<code>&lt;div&gt;&lt;/div&gt;</code>,标签是用这个符号的,代码执行的时候会以为你只写了一半,所以报错,今天就整理一写这些特殊符号用html怎么表示</p><table><thead><tr><th>html符号</th><th style="text-align:right">特殊符号</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td><code>&amp;lt;</code></td><td style="text-align:right">&lt;</td><td style="text-align:center">小于或显示标记</td></tr><tr><td><code>&amp;gt;</code></td><td style="text-align:right">&gt;</td><td style="text-align:center">大于或者显示标记</td></tr><tr><td><code>&amp;amp;</code></td><td style="text-align:right">&amp;</td><td style="text-align:center">用于显示其他特殊字符</td></tr><tr><td><code>&amp;quot;</code></td><td style="text-align:right">&quot;</td><td style="text-align:center">引号</td></tr><tr><td><code>&amp;reg;</code></td><td style="text-align:right">&reg;</td><td style="text-align:center">已注册</td></tr><tr><td><code>&amp;copy;</code></td><td style="text-align:right">&copy;</td><td style="text-align:center">版权</td></tr><tr><td><code>&amp;trade;</code></td><td style="text-align:right">&trade;</td><td style="text-align:center">商标</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.jb51.net/onlineread/htmlchar.htm" target="_blank" rel="noopener">HTML特殊字符编码对照表</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请看我漂亮的坚持</title>
      <link href="/2017/11/21/2017-11-21-%E8%AF%B7%E7%9C%8B%E6%88%91%E6%BC%82%E4%BA%AE%E7%9A%84%E5%9D%9A%E6%8C%81/"/>
      <url>/2017/11/21/2017-11-21-%E8%AF%B7%E7%9C%8B%E6%88%91%E6%BC%82%E4%BA%AE%E7%9A%84%E5%9D%9A%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/jianchi.jpeg" alt="title"></p><h5 id="今天是2017年11月21日-一周年纪念"><a href="#今天是2017年11月21日-一周年纪念" class="headerlink" title="今天是2017年11月21日,一周年纪念~"></a>今天是2017年11月21日,一周年纪念~</h5><a id="more"></a><p>今天是2017年11月21日,嘿嘿,说的是一周年纪念不是爱情的纪念,因为去年的今天我入职第一家公司,从此开始了程序媛的生活~</p><p>记得2016年11月21日是个周一.那天下着雪,在经过一个多星期的奔波,还清晰的记得那会每天奔波的北京的各个地方,面试,很多时候,一天安排两个面试,而两个面试地点距离非常远,那会每天基本都没时间吃饭,一个星期,瘦了差不多10斤,晚上回来的时候就随便在路边买点吃的,整理今天一天面试中被问到的问题,没有回答上来或者回答不好的地方,就去网上查资料,看书查.珍惜每一次面试机会,终于找到了一家肯接受我的公司,周日那天,整整睡了一天,记得那天醒来就下午三点多了吧.<br>入职后的每一天都小心翼翼的,因为没有经验,遇到很多问题,经常加班到晚上11点才回来,然后晚上回来还要写代码到一两点,刚来北京那会,没有钱,租的那种500块钱一个人的床位,每天回来的时候大家都已经睡着了,小心翼翼的开开门,此时别人的一个转身我都害怕是被自己吵醒的,然后洗漱完,在床位上打开电脑,把屏幕调到最暗,开始解决今天遇到的在有道云笔记上记录的问题,实在太困了,就睡;那时,就是一个想法,好好干,别被开除了,还年轻,吃点苦算什么.累的时候就会跟自己对话,当初为什么要选择这一行,不是计算机专业出身,决定从事这一行业的时候,就想到要比别人付出更多才能补回来自己缺的一些东西.</p><p>记得当时还犯了一个很严重的错误,虽然只是写写静态页面,但是写了一个星期之后,技术老大(虽然当时研发只有他和我)发现我写的代码不兼容,我能看出他看着我很无奈的样子,我立马承认自己的错误,并给他保证不用重新写,是可以改好的,自己就主动申请加班,内心里想着不要开除我就好.</p><p>后来开始做移动端,技术老大说不然咱们就试试比较流行的框架,react , vue, angular,记得当时angular还是1.0,选技术栈的过程比较曲折,终于最后选择了vue,不知道有多少人和我又一样的感受,之前一直写jq,一下子换成vue,首先思考问题的角度都要转换一下,jq是直接操作DON的,但是vue不是.印象深刻的还有,当时记得写了两个星期vue,遇到很多问题,比如路由怎么实现,等等,技术老大说,咱们能hold住新技术么,不行就换回jq,我说:现在社区这么活跃,你遇到的问题大家都遇到过,肯定是可以解决的.真的很感谢,给我机会去尝试新技术.</p><p>也许是骨子里带着一股不服输的精神,坚持一直学,天道酬勤,终于后来慢慢在公司里有点权威,最起码,产品提的需求,别人实现不了,我可以实现.就是这样慢慢建立起了自信,经过自己的努力实现的那种成就感,很爽!</p><p>到今天整整一年了,技术上相比去年也增长了很多,大概在今年夏天的时候开始写自己的博客,在<a href="http://www.jianshu.com/u/92fec6da2d1a" target="_blank" rel="noopener">简书</a>上发表文章,看到下面有人给我评论,和我交流技术,真的很开心,看到很多人通过博客加我好友,支持我,鼓励我,给我提建议,还有前几天第一次在掘金上发表<a href="https://juejin.im/user/58c6a15544d9040068046025" target="_blank" rel="noopener">文章</a>,很多人给我点赞,还有大佬给我提建议,真的发自内心的感谢!</p><p>这一年接触了很多东西,写过vue,react,koa,玩过小程序,现在在用Meteor+react+mongoDB写全栈,但是对于具体的原理了解的可能还不是很深入,所以接下来一年,我给自己制定的目标,学好js的基础,在此基础上学一些主流框架原理上的一些东西,还有目前实现产品提的需求已经不是什么大的问题了,问题是如果写好,比如代码的组织和性能等,总之路漫漫其兮远,慢慢一步一步脚踏实地的来.</p><p>大概就写到这儿吧,看到这篇文章的有缘人,不知道你是否和我一样也有这些经历,不过,肯定是和我一样希望让自己变得更优秀的人,只要用心学习,付出努力,技术肯定是会慢慢提高的.</p><p>给大家推荐几本书:</p><ul><li>Javascript高级程序设计(3),(记得我看的是第三版,或者<javascript>权威指南,讲的js的知识特别全)</javascript></li><li>你不知道的JavaScript系列(深入的讲解javascript)</li><li>深入理解es6</li><li>深入浅出react技术栈</li><li>图解http</li><li>大话设计模式</li><li>NodeJs实战</li></ul>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两句话理解js中的this</title>
      <link href="/2017/11/16/2017-11-06-this/"/>
      <url>/2017/11/16/2017-11-06-this/</url>
      
        <content type="html"><![CDATA[<p><img src="//s2.51cto.com/wyfs02/M00/88/9A/wKioL1f83IXiORmNAAC9J-tzq-k871.jpg-wh_651x-s_1446494838.jpg" alt="this"><br><a id="more"></a></p><p>前言: 一直都搞不清javascript中this的指向,<code>&lt;你不知道的javascript(上卷)&gt;</code>这本书中有3章都是在讲解this,去年第一次看完还是觉得似懂非懂的,一深入的问还是不清楚,现在在看一遍,真心觉得这本书里将的是真好,想深入了解一下的,这本书是一个不错的选择.</p><p>下面我就简单的说一下我的理解,用两句话记住了javascrpt中this的指向:</p><h1 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h1><ul><li>普通函数指向函数的调用者:有个简便的方法就是看函数前面有没有点,如果有点,那么就指向点前面的那个值;</li><li>箭头函数指向函数所在的所用域: 注意理解作用域,只有<code>函数的{}</code>构成作用域,<code>对象的{}</code>以及 <code>if(){}</code>都不构成作用域;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'objName'</span>,</span><br><span class="line">    say() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    read: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.say(); <span class="comment">// objName</span></span><br><span class="line">obj.read(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li>普通函数,调用者是obj,所以结果是 objname;也是理解<code>say()</code>是普通函数,前面有点,所以<code>this</code>指向<code>obj</code>;</li><li>箭头函数,this指向函数所在的作用域,当前的作用域为全局环境,所以<code>this.name</code>为<code>undefined</code>,</li><li>举下面的例子更清楚的了解一下箭头函数this的指向,箭头函数所在的作用域是普通函数<code>say</code>,<code>say()</code>的调用者是obj<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.say(); <span class="comment">// obj,此时this指的是定义他的obj</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h2><ul><li><p>浏览器默认的this为window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">//window</span></span><br></pre></td></tr></table></figure></li><li><p>node.js中全局环境默认<code>this为{}</code>,普通函数中默认<code>this为global</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">//global</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="来两道题检查你是否掌握了"><a href="#来两道题检查你是否掌握了" class="headerlink" title="来两道题检查你是否掌握了"></a>来两道题检查你是否掌握了</h2><h4 id="example1"><a href="#example1" class="headerlink" title="example1"></a>example1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> length = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  obj = &#123;</span><br><span class="line">    length: <span class="number">5</span>,</span><br><span class="line">    method: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    fn();</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.method(fn, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>输出 10, 2</p><p>刚开始看到这道题我也是蒙蒙的,现在也终于理解了,<br>method这个函数传入了两个参数,一个参数为fn(),fn()为普通函数,this指向函数的调用者,此时指向全局(也可以看这个函数前面没有<code>点</code>),所以运行结果为10,arguments是函数的所有参数,是一个类数组的对象,arguments<a href>0</a>,可以看成是arguments.0(),调用这个函数的是arguments,此时this就是指<code>arguments</code>,this.length就是angument.length,就是传入的参数的总个数2</p><p>注: 上面例子在node环境中的运行结果为 undefined 2, <code>const length = 10</code>改成<code>global.length = 10;</code>是因为node环境下定义在全局的变量不会绑定到global,浏览器也会自动绑定到全局环境window</p><p>改成下面这样结果又是什么呢?<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> length = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    length: <span class="number">5</span>,</span><br><span class="line">    method: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        fn();</span><br><span class="line">        <span class="keyword">const</span> fun = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        fun()；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.method(fn, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>10, 10</p><h4 id="example-2"><a href="#example-2" class="headerlink" title="example 2"></a>example 2</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.val = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    val: <span class="number">2</span>,</span><br><span class="line">    dbl: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val *= <span class="number">2</span>;</span><br><span class="line">        val *= <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(val);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.dbl(); <span class="comment">// 2 4</span></span><br><span class="line"><span class="keyword">var</span> func = obj.dbl;</span><br><span class="line">func(); <span class="comment">// 8 8</span></span><br></pre></td></tr></table></figure><p>这个就是有点绕了,不过一步步来分析就很容易理解了:</p><p><code>obj.dbl()</code>;执行这行代码时，this指的是<code>obj</code>，所以<code>this.val === obj.val*=2</code>,最后结果为<code>4</code>,<code>val*=2 === window.val *= 2</code>，最后结果是<code>2</code></p><p><code>func()</code>，执行这行代码时，<code>func()</code>没有任何前缀，<code>this</code>指的是<code>window.func()</code>;所以此时this值得是<code>window</code>，<code>this.val === window.val *= 2</code>,此时<code>window.val</code> 为<code>4</code>，<code>val*=2 === window.val *2</code>,最后结果为<code>8</code>，最后<code>console.log(this.val)</code>,与<code>console.log(val)</code>,指的都是<code>window.val</code>，最后结果都是<code>8</code></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探React生命周期</title>
      <link href="/2017/11/14/2017-11-14-%E5%88%9D%E6%8E%A2React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2017/11/14/2017-11-14-%E5%88%9D%E6%8E%A2React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1536162780270.jpeg?width=740&amp;height=900&amp;imageView2/3/w/393/h/480" alt="title"><br><a id="more"></a></p><h1 id="react生命周期"><a href="#react生命周期" class="headerlink" title="react生命周期"></a>react生命周期</h1><h2 id="挂载和卸载过程"><a href="#挂载和卸载过程" class="headerlink" title="挂载和卸载过程"></a>挂载和卸载过程</h2><p>1,组件挂载是最基本的过程,这个过程主要做组件状态的初始化.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1,这两个属性被声明成静态属性,意味着你也可以再类外面访问他们: App.propTypes和 App.defaultProps</span></span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        <span class="comment">// props的类型检查</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">        <span class="comment">// props的默认类型</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2,componentWillMount和componentDidMount分别代表了渲染前后的时刻</span></span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">        <span class="comment">// 在render方法之前执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="comment">//render方法之后执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3,这个初始化过程没什么特别的,包括读取初始state和props以及这两个生命周期的方法componentWillMount和componentDidMount,这些都只会在组件初始化时运行一次</span></span><br><span class="line">    <span class="comment">// 4,如果我们在componentWillMount中执行setState方法,会发生什么呢?组件会更新state,但是组件只渲染一次,初始化的state都可以放在this.state</span></span><br><span class="line">    <span class="comment">// 5,我们在componentDidMount中执行setState方法,又会发生什么呢?组件当然会再次更新,不过在初始化阶段就渲染了两次,这并不是一件好事.</span></span><br><span class="line">    <span class="comment">// 但是实际的情况是,有一些场景不得不需要setState,比如计算组件的宽高时,就不得不让组件先渲染,更新必要的信息,再次渲染</span></span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        <span class="comment">// 组件卸载只有componentWillUnmount,这是一个卸载前状态</span></span><br><span class="line">        <span class="comment">// 在这个方法中,我们常常会执行一些清理方法,如事件回收或是清理定时器</span></span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                <span class="keyword">this</span> is demo</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure></p><h2 id="数据更新过程"><a href="#数据更新过程" class="headerlink" title="数据更新过程"></a>数据更新过程</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">        <span class="comment">// this.setState(&#123;&#125;)</span></span><br><span class="line">    &#125;</span><br><span class="line">    shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">        <span class="comment">// return true</span></span><br><span class="line">        <span class="comment">// shouldComponentUpdate是一个特别的方法,他接受需要更新的props和state,让开发者增加必要的条件判断,让其在需要时更新.因此,当方法返回false的时候,组件不再向下执行生命周期方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUpdate(nextProps, nextState) &#123;</span><br><span class="line">        <span class="comment">// 需要提供更新的props和state</span></span><br><span class="line">        <span class="comment">// 这里不能执行setState</span></span><br><span class="line">    &#125;</span><br><span class="line">    componentDidUpdate(prevProps, prevState) &#123;</span><br><span class="line">        <span class="comment">// 提供更新前的props和state</span></span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                <span class="keyword">this</span> is demo</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><ul><li><p>如果组件自身的state更新了,那么会依次执行shouldComponentUpdate,componentWillUpdate,render, componentDidUpdate.</p><blockquote><p>  shouldComponentUpdate是一个特别的方法,他接受需要更新的props和state,让开发者增加必要的条件判断,让其在需要时更新.因此,当方法返回false的时候,组件不再向下执行生命周期方法<br>  本质是用来进行正确的组件渲染(也是性能优化的手段之一):<br>  当父节点props改变的时候,在理想情况下,只渲染在一条链路省有相关props改变的节点即可,但是默认情况下,React会渲染所有的节点,因为shouldComponentUpdate默认返回true<br>  值得注意的是,无状态组件是没有生命周期方法的,这也意味着它没有shouldComponentUpdate,渲染到该类组件时,每次都会重新渲染,不少开发者在使用无状态组件开发的时候都会纠结这一点,为了更方心得使用,我们可以选择用Recompose库的pure方法;<br>  const optionmizeComponent = pure(ExpensiveComponent)<br>  pure方法做的事情就是将无状态组件转换成class语法加上PureRender后的组件</p></blockquote></li><li><p>如果组件是由父组件更新props而更新的,那么在shouldComponentUpdate之前会先执行componentWillReceiveProps方法,此方法可以作为React在props传入后,渲染之前setState的机会,在此方法中调用setState是不会二次渲染的</p><h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><p>React的生命周期流程我们用一张图来表示<br><img src="https://cdn.wangyaxing.cn/reactLife.jpeg" alt="react生命周期"></p></li></ul><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p><a href="https://github.com/funnycoderstar" target="_blank" rel="noopener">github</a><br><a href="http://wangyaxing.cn/">blog</a></p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解git系列</title>
      <link href="/2017/11/02/2017-11-02-git%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2017/11/02/2017-11-02-git%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/git1.png" alt="title"><br><a id="more"></a><br>文章参考: <a href="http://git.oschina.net/progit/" target="_blank" rel="noopener">http://git.oschina.net/progit/</a></p><h1 id="1-git简介"><a href="#1-git简介" class="headerlink" title="1,git简介"></a>1,git简介</h1><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>简而言之,就是可以报存你所有的修改,所有的历史版本;有了它,就可以将某个文件回溯到之前的状态,甚至可以将整个项目回退到过去某个时间点的状态;你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等</p><h2 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h2><h3 id="集中化的版本控制系统-eg-svn"><a href="#集中化的版本控制系统-eg-svn" class="headerlink" title="集中化的版本控制系统(eg: svn)"></a>集中化的版本控制系统(eg: svn)</h3><p><img src="http://git.oschina.net/progit/figures/18333fig0102-tn.png" alt></p><h3 id="分布式版本控制系统-eg-git"><a href="#分布式版本控制系统-eg-git" class="headerlink" title="分布式版本控制系统(eg: git)"></a>分布式版本控制系统(eg: git)</h3><p><img src="http://git.oschina.net/progit/figures/18333fig0103-tn.png" alt></p><h2 id="文件的三种状态"><a href="#文件的三种状态" class="headerlink" title="文件的三种状态"></a>文件的三种状态</h2><p>对于任何一个文件，在 Git 内都只有三种状态：</p><ul><li>已提交（committed），已提交表示该文件已经被安全地保存在本地数据库中了；</li><li>已修改（modified,已修改表示修改了某个文件，但还没有提交保存；</li><li>已暂存（staged）。已暂存表示把已修改的文件放在下次提交时要保存的清单中。<br>git管理项目时,文件流转的三个工作区域:git的工作目录,暂存区域,本地仓库<br><img src="http://git.oschina.net/progit/figures/18333fig0106-tn.png" alt></li><li>每个项目都有一个Git目录(如果 git clone 出来的话，就是其中 .git 的目录)</li><li>从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工作目录</li><li>所谓的暂存区域只不过是个简单的文件，一般都放在 Git 目录中<br><img src="https://cdn.wangyaxing.cn/git.png" alt></li></ul><h1 id="2-git基础"><a href="#2-git基础" class="headerlink" title="2,git基础"></a>2,git基础</h1><h2 id="取得项目的Git仓库"><a href="#取得项目的Git仓库" class="headerlink" title="取得项目的Git仓库"></a>取得项目的Git仓库</h2><p>有两种方法:1,在现存的目录下,通过导入所有文件来创建新的Git仓库;2,从已有的Git仓库克隆出一个新的镜像仓库</p><ul><li><p>在工作目录中初始化新仓库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment">// 初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中</span></span><br><span class="line">git add README <span class="comment">// 如果当前目录下有几个文件想要纳入版本控制,需要先用`git add`命令告诉git开始对这些文件进行跟踪,并进行提交</span></span><br><span class="line">git commit -m <span class="string">'initial project version'</span></span><br></pre></td></tr></table></figure></li><li><p>从现有仓库克隆<br>克隆仓库的命令格式为 git clone [url]。比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/schacon/grit.git</span><br></pre></td></tr></table></figure></li></ul><p>当前目录下创建一个名为<code>grit</code>的目录,其中包含一个<code>.git</code>的目录用于保存下载下来的所有版本记录,然后从中取出最新版本的文件拷贝<br>如果希望在<code>git clone</code>的时候,自己定义要新建的项目目录的名称,可以再上面的命令的末尾指定新的名字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/schacon/grit.git mygrit</span><br></pre></td></tr></table></figure></p><p>现在新建的目录就成了<code>mygrit</code></p><h2 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h2><p><code>git status</code> 可以查看文件目前处于什么状态<br><code>git add xx</code> 这是一个多功能命,根据目标文件的状态不同,此命令的效果也不同;可以用它开始跟踪新文件,或者把已跟踪的文件放到暂存区,还能用于合并时把有冲突的文件标记为已解决状态</p><h2 id="忽略某些文件"><a href="#忽略某些文件" class="headerlink" title="忽略某些文件"></a>忽略某些文件</h2><p>我们可以创建一个<code>.gitignore</code>的文件,列出要忽略的文件模式<br><code>.gitignore</code>的格式规范如下:</p><ul><li>所有空行或者以注释符号<code>#</code>开头的行都会被Git忽略</li><li>可以使用标准的glob模式匹配(shell所使用的简化了的正则表达式)</li><li>匹配模式最后跟反斜杠(/)说明要忽略的是目录</li><li>要忽略指定模式以外的文件或目录,可以再模式前加上(!)取反</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 此为注释 – 将被 Git 忽略</span><br><span class="line">    # 忽略所有 .a 结尾的文件</span><br><span class="line">    *.a</span><br><span class="line">    # 但 lib.a 除外</span><br><span class="line">    !lib.a</span><br><span class="line">    # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br><span class="line">    /TODO</span><br><span class="line">    # 忽略 build/ 目录下的所有文件</span><br><span class="line">    build/</span><br><span class="line">    # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br><span class="line">    doc<span class="comment">/*.txt</span></span><br></pre></td></tr></table></figure><h2 id="查看已暂存和未暂存的更新"><a href="#查看已暂存和未暂存的更新" class="headerlink" title="查看已暂存和未暂存的更新"></a>查看已暂存和未暂存的更新</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><h2 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br><span class="line">git commit -m&apos;docs: change readme&apos; // -m参数后跟提交的方式</span><br></pre></td></tr></table></figure><p><a href="https://blog.suisuijiang.com/git-commit-written-guide/" target="_blank" rel="noopener">git commit 规范参考</a></p><h2 id="跳过使用暂存区域-git-commit-a-m-39-feat-add-new-tasks-39"><a href="#跳过使用暂存区域-git-commit-a-m-39-feat-add-new-tasks-39" class="headerlink" title="跳过使用暂存区域 git commit -a -m&#39;feat: add new tasks&#39;"></a>跳过使用暂存区域 <code>git commit -a -m&#39;feat: add new tasks&#39;</code></h2><p>git 提供了一个跳过使用暂存区域的方式，只要在提交的时候给<code>git commit</code>加上<code>-a</code>选项，git就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code>步骤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m&apos;feat: add new tasks&apos;</span><br></pre></td></tr></table></figure></p><h2 id="移除文件-git-rm"><a href="#移除文件-git-rm" class="headerlink" title="移除文件 git rm"></a>移除文件 <code>git rm</code></h2><p>从git中移除某个文件，必须要从已跟踪文件清单移除（从暂存区域移除）,然后提交,<code>git rm</code>命令完成此项工作，并连带从工作目录中删除制定的文件，这样以后就不会出现在未跟踪文件清单了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm .test</span><br></pre></td></tr></table></figure></p><p>如果是简单从工作目录中手工删除文件，仅删除了工作目录中的，仍在追踪名单中<br>然后再运行 <code>git rm</code>记录此次移除文件的操作<br>最后提交就不会被跟踪了。但是如果删除文件之前修改过且已经放到暂存区，则必须要加<code>-f</code>(即force的首字母)<br>在实际项目中，经常会遇到下面的情况需要删除文件<br>想把文件从git仓库中删除，但是仍希望保留在工作目录中，就是仅从跟踪清单中删除，比如一些大型日志或一堆.a的编译文件，不小心纳入仓库，但是要移除追踪但不删除文件，以便稍后在<code>.gitignore</code>文件中补上，加参数<code>--cached</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached readme.txt</span><br></pre></td></tr></table></figure></p><p>后面可以列出文件或者目录的名字，也可以使用 glob 模式。<br>注意到星号 * 之前的反斜杠 \，因为 Git 有它自己的文件模式扩展匹配方式，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm log/\*.log    // 此命令删除所有 log/ 目录下扩展名为 .log 的文件</span><br><span class="line">git rm \*~           //会递归删除当前目录及其子目录中所有 ~ 结尾的文件。必须加反斜杠</span><br></pre></td></tr></table></figure></p><h2 id="移动文件git-mv"><a href="#移动文件git-mv" class="headerlink" title="移动文件git mv"></a>移动文件<code>git mv</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv file_from file_to</span><br></pre></td></tr></table></figure><p>相当于运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv README.txt README</span><br><span class="line">git rm README.txt</span><br><span class="line">git add README</span><br></pre></td></tr></table></figure></p><h2 id="查看提交历史-git-log"><a href="#查看提交历史-git-log" class="headerlink" title="查看提交历史 git log"></a>查看提交历史 <code>git log</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log -p -2 // -p选项展开每次提交的内容差异， -2则仅显示最近两次更新， 做代码审查，或者快速浏览其他写作者提交的更新都做了哪些</span><br><span class="line">git log --stat // 仅显示简要的增改行数</span><br><span class="line">git log --pretty // 指定使用完全不同于默认风格的方式展示提交历史，比如`git log --pretty=oneline`将每个提示放在一行显示，另外还有short， full和fuller</span><br></pre></td></tr></table></figure><h4 id="format，可以定制要显示的记录格式，这样的输出便于后期编程提取分析"><a href="#format，可以定制要显示的记录格式，这样的输出便于后期编程提取分析" class="headerlink" title="format，可以定制要显示的记录格式，这样的输出便于后期编程提取分析"></a>format，可以定制要显示的记录格式，这样的输出便于后期编程提取分析</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=format:&quot;%h - %an, %ar : %s&quot;</span><br><span class="line">ca82a6d - Scott Chacon, 11 months ago : changed the version number</span><br><span class="line">085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code</span><br><span class="line">a11bef0 - Scott Chacon, 11 months ago : first commit</span><br></pre></td></tr></table></figure><h4 id="用-oneline-或-format-时结合-–graph-选项，可以看到开头多出一些-ASCII-字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况"><a href="#用-oneline-或-format-时结合-–graph-选项，可以看到开头多出一些-ASCII-字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况" class="headerlink" title="用 oneline 或 format 时结合 –graph 选项，可以看到开头多出一些 ASCII 字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况"></a>用 oneline 或 format 时结合 –graph 选项，可以看到开头多出一些 ASCII 字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=format:&quot;%h %s&quot; --graph</span><br><span class="line">    * 2d3acf9 ignore errors from SIGCHLD on trap</span><br><span class="line">    * 5e3ee11 Merge branch &apos;master&apos; of git://github.com/dustin/grit</span><br><span class="line">    |\</span><br><span class="line">    | * 420eac9 Added a method for getting the current branch.</span><br><span class="line">    * | 30e367c timeout code and tests</span><br><span class="line">    * | 5a09431 add timeout protection to grit</span><br><span class="line">    * | e1193f8 support for heads with slashes in them</span><br><span class="line">    |/</span><br><span class="line">    * d6016bc require time for xmlschema</span><br><span class="line">    * 11d191e Merge branch &apos;defunkt&apos; into local</span><br></pre></td></tr></table></figure><h4 id="列出了常用的格式占位符写法及其代表的意义。"><a href="#列出了常用的格式占位符写法及其代表的意义。" class="headerlink" title="列出了常用的格式占位符写法及其代表的意义。"></a>列出了常用的格式占位符写法及其代表的意义。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">选项 说明</span><br><span class="line">    %H 提交对象（commit）的完整哈希字串</span><br><span class="line">    %h 提交对象的简短哈希字串</span><br><span class="line">    %T 树对象（tree）的完整哈希字串</span><br><span class="line">    %t 树对象的简短哈希字串</span><br><span class="line">    %P 父对象（parent）的完整哈希字串</span><br><span class="line">    %p 父对象的简短哈希字串</span><br><span class="line">    %an 作者（author）的名字</span><br><span class="line">    %ae 作者的电子邮件地址</span><br><span class="line">    %ad 作者修订日期（可以用 -date= 选项定制格式）</span><br><span class="line">    %ar 作者修订日期，按多久以前的方式显示</span><br><span class="line">    %cn 提交者(committer)的名字</span><br><span class="line">    %ce 提交者的电子邮件地址</span><br><span class="line">    %cd 提交日期</span><br><span class="line">    %cr 提交日期，按多久以前的方式显示</span><br><span class="line">    %s 提交说明</span><br></pre></td></tr></table></figure><h4 id="一些其他常用的选项及其释义。"><a href="#一些其他常用的选项及其释义。" class="headerlink" title="一些其他常用的选项及其释义。"></a>一些其他常用的选项及其释义。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">选项 说明</span><br><span class="line">    -p 按补丁格式显示每个更新之间的差异。</span><br><span class="line">    --stat 显示每次更新的文件修改统计信息。</span><br><span class="line">    --shortstat 只显示 --stat 中最后的行数修改添加移除统计。</span><br><span class="line">    --name-only 仅在提交信息后显示已修改的文件清单。</span><br><span class="line">    --name-status 显示新增、修改、删除的文件清单。</span><br><span class="line">    --abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。</span><br><span class="line">    --relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。</span><br><span class="line">    --graph 显示 ASCII 图形表示的分支合并历史。</span><br><span class="line">    --pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。</span><br></pre></td></tr></table></figure><h4 id="限制输入长度-–since-和-–unti"><a href="#限制输入长度-–since-和-–unti" class="headerlink" title="限制输入长度 –since 和 –unti"></a>限制输入长度 –since 和 –unti</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git log --since=2.weeks // 列出所有最近两周内的提交</span><br><span class="line">选项 说明</span><br><span class="line">    -(n) 仅显示最近的 n 条提交</span><br><span class="line">    --since, --after 仅显示指定时间之后的提交。</span><br><span class="line">    --until, --before 仅显示指定时间之前的提交。</span><br><span class="line">    --author 仅显示指定作者相关的提交。</span><br><span class="line">    --committer 仅显示指定提交者相关的提交。</span><br></pre></td></tr></table></figure><p>如果要查看 Git 仓库中，2017 年 10 月期间，Junio Hamano 提交的但未合并的测试脚本（位于项目的 t/ 目录下的文件），可以用下面的查询命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=&quot;%h - %s&quot; --author=gitster --since=&quot;2008-10-01&quot; \</span><br></pre></td></tr></table></figure></p><h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h2><h4 id="修改最后一次提交-git-commit-amend"><a href="#修改最后一次提交-git-commit-amend" class="headerlink" title="修改最后一次提交 git commit --amend"></a>修改最后一次提交 <code>git commit --amend</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;initial commit&apos;</span><br><span class="line">git add forgotten_file</span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 –amend 提交：上面的三条命令最终只是产生一个提交，第二个提交命令修正了第一个的提交内容。</p><h4 id="取消已经暂存的文件-git-reset-HEAD-lt-file-gt"><a href="#取消已经暂存的文件-git-reset-HEAD-lt-file-gt" class="headerlink" title="取消已经暂存的文件 git reset HEAD &lt;file&gt;..."></a>取消已经暂存的文件 <code>git reset HEAD &lt;file&gt;...</code></h4><p>有两个修改过的文件，我们想要分开提交，但不小心用 git add . 全加到了暂存区域。该如何撤消暂存其中的一个文件呢<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD benchmarks.rb</span><br></pre></td></tr></table></figure></p><h4 id="取消对文件的修改-git-checkout-lt-file-gt"><a href="#取消对文件的修改-git-checkout-lt-file-gt" class="headerlink" title="取消对文件的修改 git checkout -- &lt;file&gt;.."></a>取消对文件的修改 <code>git checkout -- &lt;file&gt;..</code></h4><p>如果觉得刚才对 benchmarks.rb 的修改完全没有必要，该如何取消修改，回到之前的状态（也就是修改之前的版本）呢<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- benchmarks.rb</span><br></pre></td></tr></table></figure></p><p>任何已经提交到 Git 的都可以被恢复。即便在已经删除的分支中的提交，或者用 –amend 重新改写的提交，都可以被恢复（关于数据恢复的内容见第九章）。所以，你可能失去的数据，仅限于没有提交过的</p><h2 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h2><ul><li>查看当前的远程库 <code>git remove -v</code>,名为 origin 的远程库，Git 默认使用这个名字来标识你所克隆的原始仓库</li><li>添加远程仓库<code>git remote add [shortname] [url]</code></li><li>从远程仓库抓取数据<code>git fetch [remote-name]</code></li><li>推送数据到远程仓库 <code>git push [remote-name] [branch-name]</code></li><li>查看某个远程仓库信息<code>git remote show [remote-name]</code></li><li>远程仓库的删除和重命名 <code>git remote rename pb paul</code> <code>git remote rename rm [remote-name]</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git remove -v</span><br><span class="line">git remote add pb git://github.com/paulboone/ticgit.git</span><br><span class="line">git fetch pb // </span><br><span class="line">git push origin master  //把本地的 master 分支推送到 origin 服务器上</span><br><span class="line">git remote show origin // 要看所克隆的 origin 仓库</span><br><span class="line"></span><br><span class="line">$ git remote rename pb paul</span><br><span class="line">    $ git remote</span><br><span class="line">    origin</span><br><span class="line">    paul</span><br><span class="line"></span><br><span class="line">git remote rm paul</span><br><span class="line">    $ git remote</span><br><span class="line">    origin</span><br></pre></td></tr></table></figure></li></ul><p>git fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支,git pull 命令自动抓取数据下来，然后将远端分支自动合并到本地仓库中当前分支</p><h2 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h2><ul><li>列显已有的标签 <code>git tag</code></li><li>新建标签,含附注的标签</li></ul><h1 id="3，分支"><a href="#3，分支" class="headerlink" title="3，分支"></a>3，分支</h1><p>简单的分支与合并，实际工作中大体的工作流程<br>1，开发某个网站<br>2，为了实现某个需求，创建一个分支<br>3，在这个分支上开展工作；<br>假设此时，突然有个紧急的问题要修复，那么你可以按照下面的方式处理:<br>1,返回原先已经发布到生产服务器上的分支；<br>2，为这次紧急修补创建一个新分支，并在其中修复问题<br>3，通过测试后，回到生产服务器所在的分支，将修补分支合并进来，然后再推送到生产服务器上<br>4，切换到之前实现新需求的分支，继续工作</p><h2 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h2><ul><li>新建分支 <code>git branch xx</code>,这条命令是新建了一个分支，但是当前工作分支仍在mater分支上，要想把当前工作分支切换到新建的分支上，要执行<code>git checkout xx</code></li></ul><p>新建并切换到某分支<code>git checkout -b xx</code>相当与下面这两条命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch xx</span><br><span class="line">git checkout xx</span><br></pre></td></tr></table></figure></p><p>切换分支的时候要确保你当前分支不存在没有提交的修改，否则git会阻止你切换分支</p><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><ul><li>删除分支 <code>git branch -d xx</code><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2></li><li><p>分支的合并，比如master分支要合并xx分支，首先切换到master分支，然后执行<code>git merge xx</code>,此时xx分支已经合并到master分支上，接下来删除xx分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge xx</span><br><span class="line">git branch -d xx</span><br></pre></td></tr></table></figure></li><li><p>遇到冲突时的合并，如果在不同的分支中都修改看同一个文件，git就无法将两者合并到一起</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;<span class="xml"><span class="tag">&lt;&lt;&lt;&lt;&lt; <span class="attr">HEAD:index.html</span></span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>contact : email.support@github.com<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    =======</span></span><br><span class="line">    &lt;div id="footer"&gt;</span><br><span class="line">    please contact us at support@github.com</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html</span></span><br></pre></td></tr></table></figure></li></ul><p><code>=======</code>隔开的上半部分，即<code>HEAD</code>(即<code>master</code>分支，在运行<code>merge</code>命令时所切换到的分支)，下半部分是<code>xx</code>分支的内容<br>你可以二者选其一或者整合两者到一起，然后删除<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code> 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>这些行.解决完所有冲突后，运行<code>git add</code>将他们标记为已解决状态(实际就是将该文件存到暂存区，因为一旦暂存，就表示冲突已经解决)</p><h2 id="分支的管理"><a href="#分支的管理" class="headerlink" title="分支的管理"></a>分支的管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch // 列出当前所有分支，注意看master分支前的 * 字符：它表示当前所在的分支</span><br><span class="line">git branch -v // 查看各个分支最后一个提交对象的信息</span><br><span class="line">git branch --merged // 筛选与当前分支合并的分支</span><br><span class="line">git branch --no-merged // 筛选与当前分支尚未合并的分支，此时如果使用`git branch -d xx`删除该分支会提示错误，因为这样会丢失数据，如果你确实想删除该分支上的改动，运行`git branch -D xx`强制删除</span><br></pre></td></tr></table></figure><h2 id="利用分支开发的工作流程"><a href="#利用分支开发的工作流程" class="headerlink" title="利用分支开发的工作流程"></a>利用分支开发的工作流程</h2><h3 id="长期分支"><a href="#长期分支" class="headerlink" title="长期分支"></a>长期分支</h3><p>在master分支中保留完全稳定的代码，即已经发布或即将发布的代码，与此同时，还有一个名为develop或next的平行分支，专门用于后续的开发<br>或仅用于稳定性测试 — 当然并不是说一定要绝对稳定，不过一旦进入某种稳定状态，便可以把它合并到 master 里。这样，在确保这些已完成的特性分支（短期分支，比如之前的 iss53 分支）能够通过所有测试，并且不会引入更多错误之后，就可以并到主干分支中，等待下一次的发布。<br>你可以用这招维护不同层次的稳定性。某些大项目还会有个 proposed（建议）或 pu（proposed updates，建议更新）分支，它包含着那些可能还没有成熟到进入 next 或 master 的内容。这么做的目的是拥有不同层次的稳定性：当这些分支进入到更稳定的水平时，再把它们合并到更高层分支中去。</p><h3 id="特性分支"><a href="#特性分支" class="headerlink" title="特性分支"></a>特性分支</h3><p>一个特性分支是指一个短期的，用来实现单一特性或与其相关工作的分支。</p><h2 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h2><p>远程分支是对远程仓库中分支的索引。<br>(远程仓库)/(分支名)表示远程分支</p><h3 id="推送远程分支"><a href="#推送远程分支" class="headerlink" title="推送远程分支"></a>推送远程分支</h3><p>git push (远程仓库名) (分支名)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> git push origin serverfix</span><br><span class="line"> Git 自动把 serverfix 分支名扩展为 refs/heads/serverfix:refs/heads/serverfix，意为“取出我在本地的 serverfix 分支，推送到远程仓库的 serverfix 分支中去”。</span><br><span class="line">仓库中去，仍旧称它为 server</span><br><span class="line">git push origin serverfix:serverfix</span><br><span class="line">上传我本地的 serverfix 分支到远程仓库中去，仍旧称它为 serverfix 分支</span><br><span class="line"></span><br><span class="line">git push origin serverfix:awesomebranch</span><br><span class="line">上传我本地的 serverfix 分支到远程仓库中去，称它为 awesomebranch 分支</span><br></pre></td></tr></table></figure></p><p>如果要把该远程分支的内容合并到当前分支，可以运行 git merge origin/serverfix</p><p>想要基于远程分支上新建一个新的分支 git checkout -b serverfix origin/serverfix</p><h3 id="跟踪远程分支"><a href="#跟踪远程分支" class="headerlink" title="跟踪远程分支"></a>跟踪远程分支</h3><p>从远程分支<code>checkout</code>出来的本地分支，成为跟踪分支。跟踪分支是一种和某个远程分支有直接联系的公司；<br>克隆仓库时，git通常会自动创建一个名为<code>master</code>分支来跟踪<code>origin/master</code>;这正是 git push 和 git pull 一开始就能正常工作的原因</p><p> git checkout -b serverfix origin/serverfix 可以用 –track 简化:</p><p> git checkout –track origin/serverfix</p><p> 本地分支设定不同于远程分支的名字，只需在第一个版本的命令里换个名字:<br> git checkout -b sf origin/serverfix</p><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p> git push [远程名] :[分支名]</p><p> git push [远程名] [本地分支]:[远程分支],如果省略 [本地分支]，如果省略 [本地分支]</p><h2 id="分支的衍合"><a href="#分支的衍合" class="headerlink" title="分支的衍合"></a>分支的衍合</h2><p>把一个分支整合到另一个分支的办法有两种: merge rebase<br>使用衍合的目的是想要得到一个能在远程分支上干净应用的补丁,简单的说就是修改提交历史<br>一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git rebase --onto master server client</span><br><span class="line">取出 client 分支，找出 client 分支和 server 分支的共同祖先之后的变化，然后把它们在 master 上重演一遍”</span><br><span class="line"></span><br><span class="line">git rebase [主分支] [特性分支] 命令会先取出特性分支 server，然后在主分支 master 上重演：</span><br><span class="line">git rebase master server</span><br></pre></td></tr></table></figure></p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1509712673742&amp;di=2068d0d393412331fd913b9c8020ddab&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.kuqin.com%2Fupimg%2Fallimg%2F151228%2F20221CG3-2.png" alt="git"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebRTC</title>
      <link href="/2017/11/02/2017-11-02-WebRTC/"/>
      <url>/2017/11/02/2017-11-02-WebRTC/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1501983814,3993636694&amp;fm=27&amp;gp=0.jpg" alt="WebRTC"><br><a id="more"></a></p><h1 id="1-WebRTC入门基础"><a href="#1-WebRTC入门基础" class="headerlink" title="1,WebRTC入门基础"></a>1,WebRTC入门基础</h1><h2 id="什么是WebRTC"><a href="#什么是WebRTC" class="headerlink" title="什么是WebRTC"></a>什么是WebRTC</h2><p>WebRtc(Web Real-Time Communication)支持网页浏览器进行实时语音对话或视频对话的技术;</p><p>浏览器本身不支持互相之间直接建立信道进行通信,都是通过服务器进行中转.比如现在有两个客户端,甲和乙,他们俩想要通信,首先需要甲和服务器.乙和服务器之间建立信道.甲给乙发送消息时,甲先将消息发送到服务器上,服务器对家的消息进行中转,发送到乙处,反过来也是一样.这样甲和乙之间的依次消息要通过两段信道,通信的效率同时受制于这两端信道的带宽.同时这样的信道并不适合数据流的传输</p><p>WebRTC是一个开源项目，旨在使得浏览器能为实时通信（RTC）提供简单的JavaScript接口;让浏览器提供JS的即时通信接口。这个接口所创立的信道并不是像WebSocket一样，打通一个浏览器与WebSocket服务器之间的通信，而是通过一系列的信令，建立一个浏览器与浏览器之间（peer-to-peer）的信道，这个信道可以发送任何数据，而不需要经过服务器。并且WebRTC通过实现MediaStream，通过浏览器调用设备的摄像头、话筒，使得浏览器之间可以传递音频和视频</p><h2 id="三个接口"><a href="#三个接口" class="headerlink" title="三个接口"></a>三个接口</h2><p>WebRTC实现了三个API,分别是:</p><ul><li>MediaStream: 通过MediaStream的API能够通过设备的摄像头及话筒获得视频,音频的同步流</li><li>RTCPeerConnection: RTCPeerConnection是WebRTC用于构建点对点之间稳定高效的流传输的组件</li><li>RTCDataChannel: RTCDataChannel使得浏览器之间(点对点)建立一个高吞吐量.低延时的信道,用于传输任意数据</li></ul><h3 id="MediaStream-getUserMedia"><a href="#MediaStream-getUserMedia" class="headerlink" title="MediaStream(getUserMedia)"></a>MediaStream(getUserMedia)</h3><p>通过MediaStream的API能够通过设备的摄像头及话筒获得视频,音频的同步流</p><h4 id="如果调用"><a href="#如果调用" class="headerlink" title="如果调用"></a>如果调用</h4><p>可以通过调用navigator.getUserMedia(),这个方法接受三个参数:<br>1,一个约束对象(constrains object)<br>2,一个调用成功的回调函数,如果调用成功,传递给他一个流对象<br>3,一个调用失败的额回调函数,如果调用失败,传递给他一个错误对象</p><h4 id="浏览器的兼容性"><a href="#浏览器的兼容性" class="headerlink" title="浏览器的兼容性"></a>浏览器的兼容性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const getUserMedia = (navigator.getUserMedia || </span><br><span class="line">                    navigator.webkitGetUserMedia || </span><br><span class="line">                    navigator.mozGetUserMedia || </span><br><span class="line">                    navigator.msGetUserMedia);</span><br></pre></td></tr></table></figure><h4 id="约束对象"><a href="#约束对象" class="headerlink" title="约束对象"></a>约束对象</h4><p>可以被设置在<code>getUserMedia()</code>和<code>RTCPeerConnection</code>的 <code>addStream</code>方法中,这个约束对象是WebRTC用来指定接受什么样的流,其中可以定义如下属性</p><ul><li>video: 是否接受视频流</li><li>audio: 是否接受音频流</li><li>MinWidth: 视频流最小宽度</li><li>MaxWidth: 视频流最大宽度</li><li>MinHeight: 视频流最小高度</li><li>MaxHeight: 视频流最大高度</li><li>MinAspectRatio: 视频流最小宽高比</li><li>MaxAspectRatio: 视频流最大宽高比</li><li>MinFramerate: 视频流最小帧速率</li><li>MaxFramerate: 视频流最大帧速率</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-CN"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;GetUserMedia实例&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;video id=<span class="string">"video"</span> autoplay&gt;<span class="xml"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    var getUserMedia = (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    getUserMedia.call(navigator, &#123;</span></span><br><span class="line"><span class="string">        video: true,</span></span><br><span class="line"><span class="string">        audio: true</span></span><br><span class="line"><span class="string">    &#125;, function(localMediaStream) &#123;</span></span><br><span class="line"><span class="string">        var video = document.getElementById('video');</span></span><br><span class="line"><span class="string">        video.src = window.URL.createObjectURL(localMediaStream);</span></span><br><span class="line"><span class="string">        video.onloadedmetadata = function(e) &#123;</span></span><br><span class="line"><span class="string">            console.log("</span>Label: <span class="string">" + localMediaStream.label);</span></span><br><span class="line"><span class="string">            console.log("</span>AudioTracks<span class="string">" , localMediaStream.getAudioTracks());</span></span><br><span class="line"><span class="string">            console.log("</span>VideoTracks<span class="string">" , localMediaStream.getVideoTracks());</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">    &#125;, function(e) &#123;</span></span><br><span class="line"><span class="string">        console.log('Reeeejected!', e);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>这里使用getUserMedia获得流之后,需要将其输出,一般绑定到<code>video</code>标签上输出,需要使用<code>window.URL.createObjectURL(localMediaStream)</code>来创造能在<code>video</code>中使用 <code>src</code>属性播放的Blob URL,注意在<code>video</code>上加入<code>autoplay</code>属性,否则只能扑火到一张图片<br>流创建完毕后可以通过label属性来获得其唯一的标识，还可以通过getAudioTracks()和getVideoTracks()方法来获得流的追踪对象数组（如果没有开启某种流，它的追踪对象数组将是一个空数组）</p><h2 id="PTCPeerConnection"><a href="#PTCPeerConnection" class="headerlink" title="PTCPeerConnection"></a>PTCPeerConnection</h2><p>WebRTC使用RTCPeerConnection来在浏览器之间传递流数据,这个流数据通道是点对点的,不需要经过服务器进行中转.但是这并不意味着我们能抛弃服务器.我们仍然需要它来为我们传递信令来建立这个信道.WebRTC没有定义用于建立信道的信令的协议：信令并不是RTCPeerConnection API的一部分</p><h4 id="信令"><a href="#信令" class="headerlink" title="信令"></a>信令</h4><p>既然没有定义具体的信令的协议，我们就可以选择任意方式（AJAX、WebSocket），采用任意的协议（SIP、XMPP）来传递信令，建立信道.比如可以用node的ws模块,在在WebSocket上传递信令<br>需要信令来交换的信息有三种：</p><ul><li>session的信息:用来初始化通信还有报错</li><li>网络配置: 比如IP地址和端口啥的</li><li>媒体适配: 发送方和接受方的浏览器能接受什么样的编码器和分辨率</li></ul><h3 id="通过服务器建立信道"><a href="#通过服务器建立信道" class="headerlink" title="通过服务器建立信道"></a>通过服务器建立信道</h3><p>就算WebRTC提供浏览器之间点对点信道的数据传输,但是建立这个信道,必须有服务器的参与,WebRTC需要服务器对其进行4方面的功能支持</p><ul><li>1,用户发现以及通信</li><li>2,信令传递</li><li>3,NAT/防火墙穿越</li><li>4,如果点对点通信建立失败,可以作为中转服务器</li></ul><h3 id="NAT-防火墙穿越技术"><a href="#NAT-防火墙穿越技术" class="headerlink" title="NAT/防火墙穿越技术"></a>NAT/防火墙穿越技术</h3><p>建立点对点信道的一个常见问题，就是NAT穿越技术。在处于使用了NAT设备的私有TCP/IP网络中的主机之间需要建立连接时需要使用NAT穿越技术。以往在VoIP领域经常会遇到这个问题。目前已经有很多NAT穿越技术，但没有一项是完美的，因为NAT的行为是非标准化的。这些技术中大多使用了一个公共服务器，这个服务使用了一个从全球任何地方都能访问得到的IP地址。在RTCPeeConnection中，使用ICE框架来保证RTCPeerConnection能实现NAT穿越</p><p>ICE，全名叫交互式连接建立（Interactive Connectivity Establishment）,一种综合性的NAT穿越技术，它是一种框架，可以整合各种NAT穿越技术如STUN、TURN（Traversal Using Relay NAT 中继NAT实现的穿透）。ICE会先使用STUN，尝试建立一个基于UDP的连接，如果失败了，就会去TCP（先尝试HTTP，然后尝试HTTPS），如果依旧失败ICE就会使用一个中继的TURN服务器。</p><h2 id="RTCDataChannel"><a href="#RTCDataChannel" class="headerlink" title="RTCDataChannel"></a>RTCDataChannel</h2><p>既然能建立点对点的信道来传递实时的视频,音频数据流.为什么不你能用这个信道传一点其他数据呢?RTCDataChannel就是用来干这个的,基于它我们可以再浏览器之间传输任意数据,DataChannel是建立在PeerConnection上的,不能单独使用</p><p>我们可以使用channel = pc.createDataCHannel(“someLabel”);来在PeerConnection的实例上创建Data Channel，并给与它一个标签<br>DataChannel使用方式几乎和WebSocket一样，有几个事件：</p><ul><li>onopen</li><li>onclose</li><li>onmessage</li><li>onerror</li></ul><p>同时它有几个状态，可以通过readyState获取：</p><ul><li>connecting: 浏览器之间正在试图建立channel</li><li>open：建立成功，可以使用send方法发送数据了</li><li>closing：浏览器正在关闭channel</li><li>closed：channel已经被关闭了<br>两个暴露的方法:</li><li>close(): 用于关闭channel</li><li>send()：用于通过channel向对方发送数据</li></ul><h3 id="通过Data-Channel发送文件大致思路"><a href="#通过Data-Channel发送文件大致思路" class="headerlink" title="通过Data Channel发送文件大致思路"></a>通过Data Channel发送文件大致思路</h3><p>JavaScript已经提供了File API从input[type=’file’]的元素中提取文件，并通过FileReader来将文件的转换成DataURL，这也意味着我们可以将DataURL分成多个碎片来通过Channel来进行文件传输</p><h1 id="2-信令"><a href="#2-信令" class="headerlink" title="2,信令"></a>2,信令</h1><h2 id="WebRTC的服务器"><a href="#WebRTC的服务器" class="headerlink" title="WebRTC的服务器"></a>WebRTC的服务器</h2><p>WebRTC提供了浏览器到浏览器（点对点）之间的通信，但并不意味着WebRTC不需要服务器。暂且不说基于服务器的一些扩展业务，WebRTC至少有两件事必须要用到服务器：</p><ol><li>浏览器之间交换建立通信的元数据（信令）必须通过服务器</li><li>为了穿越NAT和防火墙<h2 id="为什么需要信令"><a href="#为什么需要信令" class="headerlink" title="为什么需要信令"></a>为什么需要信令</h2>我们需要通过一系列的信令来建立浏览器之间的通信.而具体需要通过信令交换哪些内容,下面简单的列了一下<br>1,用来控制通信开启或者关闭的连接控制信息<br>2,发生错误时用来彼此告知的信息<br>3,媒体流元数据,比如像解码器,解码器的配置,带宽,媒体类型<br>4,用来建立安全连接的关键数据<br>5,外界所看到的网络上的数据,比如IP地址,端口等<br>在建立连接之前，浏览器之间显然没有办法传递数据。所以我们需要通过服务器的中转，在浏览器之间传递这些数据，然后建立浏览器之间的点对点连接。但是WebRTC API中并没有实现这些。</li></ol><h2 id="会话描述协议-Session-Description-Protocol"><a href="#会话描述协议-Session-Description-Protocol" class="headerlink" title="会话描述协议(Session Description Protocol)"></a>会话描述协议(Session Description Protocol)</h2><p>JSEP将客户端之前传递的信令分为两种:offer信令和answer信令.他们主要内容的格式都遵循会话描述协议(Session Description Protocol,简称SDP)<br>是一个在点对点连接中描述自己的字符串.我们可以将其封装在JSON中进行传输,在PeerConnection建立后将通过服务器中转后,将自己的SDP描述符和对方的SDP描述符交给PeerConnection就行了</p><h2 id="信令与PTCPeerConnection建立"><a href="#信令与PTCPeerConnection建立" class="headerlink" title="信令与PTCPeerConnection建立"></a>信令与PTCPeerConnection建立</h2><h4 id="1-通过offer和answer交换SDP描述符"><a href="#1-通过offer和answer交换SDP描述符" class="headerlink" title="1,通过offer和answer交换SDP描述符"></a>1,通过offer和answer交换SDP描述符</h4><p>大致上在两个用户（甲和乙）之间建立点对点连接流程应该是这个样子（这里不考虑错误的情况，RTCPeerConnection简称PC）：</p><ol><li>甲和乙各自建立一个PC实例</li><li>甲通过PC所提供的createOffer()方法建立一个包含甲的SDP描述符的offer信令</li><li>甲通过PC所提供的setLocalDescription()方法，将甲的SDP描述符交给甲的PC实例</li><li>甲将offer信令通过服务器发送给乙</li><li>乙将甲的offer信令中所包含的的SDP描述符提取出来，通过PC所提供的setRemoteDescription()方法交给乙的PC实例</li><li>乙通过PC所提供的createAnswer()方法建立一个包含乙的SDP描述符answer信令</li><li>乙通过PC所提供的setLocalDescription()方法，将乙的SDP描述符交给乙的PC实例</li><li>乙将answer信令通过服务器发送给甲</li><li>甲接收到乙的answer信令后，将其中乙的SDP描述符提取出来，调用setRemoteDescripttion()方法交给甲自己的PC实例</li></ol><p>甲和乙所创建的PC实例都包含了甲和乙的SDP描述符,接下来–获取连接两端主机的网络地址</p><h4 id="2-通过ICE框架建立NAT-防火墙穿越的连接"><a href="#2-通过ICE框架建立NAT-防火墙穿越的连接" class="headerlink" title="2,通过ICE框架建立NAT/防火墙穿越的连接"></a>2,通过ICE框架建立NAT/防火墙穿越的连接</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iceServer = &#123;</span><br><span class="line">    <span class="string">"iceServers"</span>: [&#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"stun:stun.l.google.com:19302"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> pc = <span class="keyword">new</span> RTCPeerConnection(iceServer);</span><br></pre></td></tr></table></figure><p>当然这两个地址也需要交换,交换流程如下(RTCPeerConnection简称PC);<br>1,甲,乙各创建配置了ICE服务器的PC实例,并为其添加<code>onicecandidate</code>事件回调<br>2,当网络候选可用时,将会调用<code>onicecandidate</code>函数<br>3,在回调函数内部,甲或乙将网络候选色消息封装在ICE  Candidate命令中,通过服务器中转,传递给对方<br>4,甲或乙接收到对方通过服务器中转所发送过来ICE Candidate信令时,将其解析并并获得网络候选,将其通过PC实例的<code>addIceCandidate()</code>添加到PC实例中</p><p>这样连接就创建完成了,可以向RTCPeerConnection中通过<code>addStream()</code>加入流来传输媒体流出具.将流加入到RTCPeerConnection实例中,对方就可以通过<code>onaddstream</code>所绑定的回调函数监听到了,调用<code>addStream()</code>可以再连接完成之前,在连接建立之后,对方一样能监听到媒体流</p><h3 id="聊天室中的信令"><a href="#聊天室中的信令" class="headerlink" title="聊天室中的信令"></a>聊天室中的信令</h3><h4 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h4><p>1,打开页面连接到服务器<br>2,进入聊天室<br>3,与其他所有已在聊天室的用户建立点对点的连接,输入到页面<br>4,若有聊天室内其他用户离开,得到通知,关闭与其的连接并移除其在页面中的输出<br>5,若又有其他用户加入,应得到通知,建立与新加入用户的连接,并输出在页面上<br>6.离开页面,关闭所有连接</p><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>以使用WebSocket为例<br>1,浏览器与服务器建立WebSocket连接<br>2,发送一个加入聊天室的信令(join),信令中需要包含用户所进入的聊天室名称<br>3,服务器根据用户所加入的房阿金,发送一个其他用户信令(peers);信令中包含聊天室其他用户的信息,浏览器根据信息来逐个构建与其他用户的点对点连接<br>4,若有用户离开,服务器发送一个用户离开信令(remove_peer),信令中包含离开的用户的信息,浏览器根据信息关闭与离开用户的信息,并作相应的清除操作<br>5,若有新用户加入,服务器发送一个用户加入信令(new_peer),信令中包含新加入的用户信息,浏览器根据信息来建立与这个新用户的点对点连接;<br>6,用户离开页面,关闭WebSocket连接</p><h4 id="服务器端实现"><a href="#服务器端实现" class="headerlink" title="服务器端实现"></a>服务器端实现</h4><p>由于用户可以只是建立连接，可能还没有进入具体房间，所以首先我们需要一个容器来保存所有用户的连接，同时监听用户是否与服务器建立了WebSocket的连接：<br>由于有房间的划分，所以我们需要在服务器上建立一个容器，用来保存房间内的用户信息。显然对象较为合适，键为房间名称，值为用户信息列表。</p><p>同时我们需要监听上面所说的用户加入房间的信令（join），新用户加入之后需要向新用户发送房间内其他用户信息（peers）和向房间内其他用户发送新用户信息（new_peer），以及用户离开时向其他用户发送离开用户的信息（remove_peer）:</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://segmentfault.com/a/1190000000436544" target="_blank" rel="noopener">使用WebRTC搭建前端视频聊天室——入门篇</a></li><li><a href="https://segmentfault.com/a/1190000000439103" target="_blank" rel="noopener">使用WebRTC搭建前端视频聊天室——信令篇</a></li><li><a href="https://segmentfault.com/a/1190000000733774" target="_blank" rel="noopener">使用WebRTC搭建前端视频聊天室——点对点通信篇</a></li><li><a href="https://segmentfault.com/a/1190000000733779" target="_blank" rel="noopener">使用WebRTC搭建前端视频聊天室——数据通道篇</a></li><li><a href="https://segmentfault.com/a/1190000005864228" target="_blank" rel="noopener">使用 WebRTC 构建简单的前端视频通讯</a></li><li><a href="http://ghmagical.com/article/page/id/3sHkVEi4K1JO" target="_blank" rel="noopener">直播和截图</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> WebRTC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebRTC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组减去另一数组(数组的每一项都是一个对象)</title>
      <link href="/2017/10/21/2017-10-21-%E6%95%B0%E7%BB%84%E5%87%8F%E5%8E%BB%E5%8F%A6%E4%B8%80%E6%95%B0%E7%BB%84-%E6%95%B0%E7%BB%84%E7%9A%84%E6%AF%8F%E4%B8%80%E9%A1%B9%E9%83%BD%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1/"/>
      <url>/2017/10/21/2017-10-21-%E6%95%B0%E7%BB%84%E5%87%8F%E5%8E%BB%E5%8F%A6%E4%B8%80%E6%95%B0%E7%BB%84-%E6%95%B0%E7%BB%84%E7%9A%84%E6%AF%8F%E4%B8%80%E9%A1%B9%E9%83%BD%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/timg.jpeg-blogImg" alt="title"><br>做聊天项目的时候遇要实现这样的一个功能: 邀请新的好友入群;点击邀请好友会弹出一个好友列表,显示你除了在群里面的好友外剩下的所有好友;<br>我的思路是取到你所有的好友,然后所有好友中过滤掉已经是群成员的好友<br><a id="more"></a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">    &#123;</span><br><span class="line">        _id: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">'好友1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        _id: <span class="number">2</span>,</span><br><span class="line">        name: <span class="string">'好友1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        _id: <span class="number">3</span>,</span><br><span class="line">        name: <span class="string">'好友1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> groupMembers = [</span><br><span class="line">    &#123;</span><br><span class="line">        _id: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">'好友1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        _id: <span class="number">2</span>,</span><br><span class="line">        name: <span class="string">'好友1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>现在一步一步来看数组的操作</p><h2 id="一-两个数组里的每一项分别为元素时"><a href="#一-两个数组里的每一项分别为元素时" class="headerlink" title="一,两个数组里的每一项分别为元素时"></a>一,两个数组里的每一项分别为元素时</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">''</span>, <span class="string">'100'</span>, <span class="string">'120'</span>, <span class="string">'125'</span>, <span class="string">'125'</span>, <span class="string">'130'</span>, <span class="string">'130'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">''</span>, <span class="string">'120'</span>, <span class="string">'125'</span>, <span class="string">'125'</span>, <span class="string">'130'</span>];</span><br><span class="line"></span><br><span class="line">请问如何求得两个数组之差？使得新数组为 arr3 = [<span class="string">'100'</span>,<span class="string">'130'</span>]</span><br></pre></td></tr></table></figure><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h3><p>思路:用for循环比较arr1和arr2的每一项,如果相等,就删除<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">''</span>, <span class="string">'120'</span>, <span class="string">'125'</span>, <span class="string">'125'</span>, <span class="string">'130'</span>, <span class="string">'130'</span>, <span class="string">'130'</span>, <span class="string">'130'</span>, <span class="string">'130'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">''</span>, <span class="string">'120'</span>, <span class="string">'125'</span>, <span class="string">'130'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = arr1.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    a = arr1[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = arr2.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        b = arr2[j];</span><br><span class="line">        <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">            arr1.splice(i, <span class="number">1</span>);</span><br><span class="line">            arr2.splice(j, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">// ['125','130','130','130','130']</span></span><br></pre></td></tr></table></figure></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h3><p>思路:将第一个数组存入一个对象，这样就已经去重了；再把第二个数组中的元素当作key从对象中删除。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = &#123;&#125;;</span><br><span class="line">arr1.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">al</span>)</span>&#123;m[al]=al;&#125;)</span><br><span class="line">arr2.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">bl</span>)</span>&#123;<span class="keyword">delete</span> m[bl];&#125;)</span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Object</span>.keys(m))</span><br></pre></td></tr></table></figure></p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三:"></a>方法三:</h3><p>思路:声明一个新的数组arr3,比较arr1和arr2,如果arr1中有和arr2不相等的就放入arr3中,用到了es6中关于数组的新方法<code>findIndex()</code>,稍后会详细的介绍;<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">''</span>, <span class="string">'100'</span>, <span class="string">'120'</span>, <span class="string">'125'</span>, <span class="string">'125'</span>, <span class="string">'130'</span>, <span class="string">'130'</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">''</span>, <span class="string">'120'</span>, <span class="string">'125'</span>, <span class="string">'125'</span>, <span class="string">'130'</span>];</span><br><span class="line"><span class="keyword">const</span> arr3 = [];</span><br><span class="line">arr1.forEach(<span class="function">(<span class="params">a</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> c = arr2.findIndex(<span class="function"><span class="params">b</span> =&gt;</span>a === b);</span><br><span class="line">    <span class="keyword">if</span> (c &gt; <span class="number">-1</span>) <span class="keyword">delete</span> arr2[c];</span><br><span class="line">    <span class="keyword">else</span> arr3.push(a);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr3)  <span class="comment">//['100', '130']</span></span><br></pre></td></tr></table></figure></p><h2 id="二-arr1中的每一项都是对象-arr2中的每一项都是元素"><a href="#二-arr1中的每一项都是对象-arr2中的每一项都是元素" class="headerlink" title="二, arr1中的每一项都是对象,arr2中的每一项都是元素"></a>二, arr1中的每一项都是对象,arr2中的每一项都是元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [&#123; <span class="attr">id</span>: <span class="number">15</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">-1</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">0</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">3</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">12.2</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> b = [<span class="number">15</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> !b.includes(item.id); &#125;);</span><br><span class="line">或</span><br><span class="line">a.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> b.indexOf(item.id) === <span class="number">-1</span>; &#125;);</span><br></pre></td></tr></table></figure><h3 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二:"></a>方法二:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=a.filter(<span class="function">(<span class="params">x</span>)=&gt;</span>b.every(<span class="function">(<span class="params">y</span>)=&gt;</span>y!=x.id))</span><br></pre></td></tr></table></figure><h3 id="方法三-1"><a href="#方法三-1" class="headerlink" title="方法三:"></a>方法三:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [&#123; <span class="attr">id</span>: <span class="number">15</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">-1</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">0</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">3</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">12.2</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> b = [<span class="number">15</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(index <span class="keyword">in</span> a)&#123;</span><br><span class="line">    <span class="keyword">if</span>(b.indexOf(a[index][<span class="string">'id'</span>])&gt;=<span class="number">0</span>)</span><br><span class="line">        a.splice(index,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">或</span><br><span class="line"><span class="keyword">const</span> result = a.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b.indexOf(item.id) &lt; <span class="number">0</span>;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h2 id="三-arr1中的每一项都是对象-arr2中的每一项也都是对象-现在回到主题"><a href="#三-arr1中的每一项都是对象-arr2中的每一项也都是对象-现在回到主题" class="headerlink" title="三,arr1中的每一项都是对象,arr2中的每一项也都是对象,现在回到主题"></a>三,arr1中的每一项都是对象,arr2中的每一项也都是对象,现在回到主题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [</span><br><span class="line">    &#123;<span class="attr">_id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">_id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">_id</span>: <span class="number">3</span>&#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> b = [</span><br><span class="line">    &#123;<span class="attr">_id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">_id</span>: <span class="number">4</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一:"></a>解决方法一:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = a.filter(<span class="function"><span class="params">x</span> =&gt;</span> !b.find(<span class="function"><span class="params">y</span> =&gt;</span> y._id === x._id)); <span class="comment">// [ &#123; _id: 1 &#125;, &#123; _id: 3&#125; ]</span></span><br></pre></td></tr></table></figure><h3 id="解决方法二"><a href="#解决方法二" class="headerlink" title="解决方法二:"></a>解决方法二:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = a.filter(<span class="function"><span class="params">x</span> =&gt;</span> b.every(<span class="function"><span class="params">y</span> =&gt;</span> y._id !== x._id));</span><br></pre></td></tr></table></figure><h2 id="四-介绍一下上面用到的数组实例中的find-findIndex-includes"><a href="#四-介绍一下上面用到的数组实例中的find-findIndex-includes" class="headerlink" title="四,介绍一下上面用到的数组实例中的find(), findIndex(), includes()"></a>四,介绍一下上面用到的数组实例中的<code>find()</code>, <code>findIndex()</code>, <code>includes()</code></h2><h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><p><code>find()</code>用于找出第一个符合条件的数组成员,它的参数是一个回调函数,所有的数组成员依次执行该回调函数,直到找到第一个返回值为true的成员,然后返回该成员,如果没有的话,返回undefined<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">-10</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>);</span><br><span class="line"><span class="comment">// -5</span></span><br></pre></td></tr></table></figure></p><p>上面代码找出数组中第一个小于0的成员<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure></p><p><code>find</code>方法的回调函数可以接受三个参数,当前的值,当前的位置和原数组</p><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h3><p><code>findIndex()</code>方法的用法与<code>find()</code>方法类似,返回第一个符合条件的数组成员的位置,如果所有成员都不符合,则返回<code>-1</code>.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>两个方法都可以发现NAN,弥补了数组的<code>indexOf</code>方法的不足<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">NaN</span>].indexOf(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">[<span class="literal">NaN</span>].findIndex(<span class="function"><span class="params">y</span> =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, y))</span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure></p><p><code>indexOf</code>方法无法识别数组的<code>NaN</code>成员,但是<code>findIndex</code>方法可以借助<code>Object.is</code>方法做到</p><h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a><code>includes()</code></h3><p><code>Array.prototype.includes</code>方法返回一个布尔值,表达某个数组是否包含给定的值,与字符串的<code>includes</code>方法类似</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)     <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>)     <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>该方法的第二个参数表示搜索的起始位置,默认为<code>0</code>,如果第二个参数为负数,表示倒数的位置;如果这是它大于数组长度(比如第二个参数为<code>-4</code>.但是数组长度为<code>3</code>),则会重置为从<code>0</code>开始<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>没有该方法之前,我们通常使用数组的<code>indexOf</code>方法,检查是否包含某个值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (arr.indexOf(el) !== <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>indexOf</code>方法有两个缺点,一是不够语义化.它的含义是找到参数值的第一个出现位置.所以要去比较是否不等于<code>-1</code>,而是,它内部使用严格相等运算符(<code>===</code>)进行判断,这会导致对<code>NaN</code>的误判<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">NaN</span>].indexOf(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// -1</span></span><br></pre></td></tr></table></figure></p><p>includes使用的是不一样的判断算法，就没有这个问题。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://segmentfault.com/q/1010000004981935" target="_blank" rel="noopener">数组减去另一个数组</a></li><li><a href="https://segmentfault.com/q/1010000008836875" target="_blank" rel="noopener">js 根据一个数组元素，删除另一个数组中的对象</a></li><li><a href="http://es6.ruanyifeng.com/#docs/array" target="_blank" rel="noopener">ECMAScript6入门之数组的拓展</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongoDB</title>
      <link href="/2017/10/14/2017-10-14-mongoDB/"/>
      <url>/2017/10/14/2017-10-14-mongoDB/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/mongodb.jpg" alt="mongoDB"><br><a id="more"></a><br>MongoDB是一个通用的<code>非关系型</code>数据库;把文档存在集合中;它们不需要相同的schema,每个文档都可以有不同的schema<br>Mongoose是一个Node模块;Mongoose的基础知识如下:</p><ul><li>打开或关闭MongoDB连接;</li><li>注册schema;</li><li>添加任务;</li><li>搜索文档</li><li>更新文档</li><li>删除文档<br>首先可以用npm 命令安装Mongoose;</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongoose</span><br></pre></td></tr></table></figure><h2 id="1-连接的打开和关闭"><a href="#1-连接的打开和关闭" class="headerlink" title="1,连接的打开和关闭"></a>1,连接的打开和关闭</h2><p>装好Mongoose,启动MongoDB服务器,用下面的代码建立到MongoDBd的连接,在下面的例子中是一个叫tasks的数据库<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">' mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> db = mongoose.connect(<span class="string">' mongodb:// localhost/ tasks'</span>);</span><br></pre></td></tr></table></figure></p><p>如果要终止MongoDB创建的连接,<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoose.disconnect();</span><br></pre></td></tr></table></figure></p><h2 id="2-注册schema"><a href="#2-注册schema" class="headerlink" title="2,注册schema"></a>2,注册schema</h2><p>在用MongoDB管理数据时,需要注册schema<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"><span class="keyword">const</span> Tasks = <span class="keyword">new</span> Schema(&#123; </span><br><span class="line">    project: <span class="built_in">String</span>,</span><br><span class="line">     description: <span class="built_in">String</span> </span><br><span class="line">&#125;);</span><br><span class="line">mongoose.model(<span class="string">' Task'</span>, Tasks);</span><br></pre></td></tr></table></figure></p><p>Mongoose的schema很强大.除了定义数据结构,还可以设定默认值,处理输入,以及加强校验</p><h2 id="3-添加任务"><a href="#3-添加任务" class="headerlink" title="3,添加任务"></a>3,添加任务</h2><p>schema注册好后,你可以访问它,让Mongoose去工作,下面的代码用模型添加了一项任务<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Task = mongoose. model(<span class="string">' Task'</span>);</span><br><span class="line"><span class="keyword">const</span> task = <span class="keyword">new</span> Task();</span><br><span class="line">task.project = <span class="string">'Bikeshed'</span>;</span><br><span class="line">task.description = <span class="string">'Paint the bikeshed red.'</span>;</span><br><span class="line">task.save( <span class="function"><span class="keyword">function</span>(<span class="params"> err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">' Task saved.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="4-搜索文档"><a href="#4-搜索文档" class="headerlink" title="4,搜索文档"></a>4,搜索文档</h2><p>Task模型的find方法可以用来查找所有文档,或者用一个JavaScript对象指明一个过滤标准来选择特定的文.下面这段代码搜索跟特定项目相关的任务,并输出每项任务的唯一ID和描述<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Task = mongoose.model(<span class="string">' Task'</span>);</span><br><span class="line">Task.find(&#123;<span class="string">' project'</span>: <span class="string">'Bikeshed'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"> err, tasks</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> i = <span class="number">0</span>; i &lt; tasks.length; i++) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">' ID:'</span> + tasks[ i]._ id);</span><br><span class="line">        <span class="built_in">console</span>.log( tasks[ i]. description);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="5-更新文档"><a href="#5-更新文档" class="headerlink" title="5,更新文档"></a>5,更新文档</h2><p>尽管用模型的find方法可以定位一个文档,然后修改并保存它,但Mongoose还有一个update方法专门来做这个.<br>下面的代码用Mongoose更新了一个新的文档</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Task = mongoose. model(<span class="string">' Task'</span>);</span><br><span class="line">Task.update(</span><br><span class="line">    &#123;<span class="attr">_id</span>: <span class="string">'4e65b793d0cf5ca508000001'</span>&#125;, 　 　<span class="comment">// 用 内部 ID 更新</span></span><br><span class="line">    &#123;<span class="attr">description</span>: <span class="string">'Paint the bikeshed green.'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">multi</span>: <span class="literal">false</span>&#125;, <span class="comment">//只 更新 一个 文档</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"> err, rows_ updated</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">' Updated.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="6-删除文档"><a href="#6-删除文档" class="headerlink" title="6,删除文档"></a>6,删除文档</h2><p>在Mongoose中,一旦你取到了文档,要删除它很容易.你可以用文档的内部ID(或其他任何条件,如果你用find代替finById的话)获取和删除文档,代码就像下面弄这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Task = mongoose.model(<span class="string">' Task'</span>);</span><br><span class="line">Task.findById(<span class="string">' 4e65b3dce1592f7d08000001'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> err, task</span>)</span>&#123;</span><br><span class="line">    task. remove();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul><li><a href="https://robomongo.org/download" target="_blank" rel="noopener">robomongo下载</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> mongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2017/10/12/2017-10-12-git/"/>
      <url>/2017/10/12/2017-10-12-git/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1536162873587.png?width=580&amp;height=271&amp;imageView2/3/w/537/h/250" alt="title"><br><a id="more"></a></p><h3 id="1-工作区-暂存区-本地仓库-远程仓库"><a href="#1-工作区-暂存区-本地仓库-远程仓库" class="headerlink" title="1,工作区,暂存区,本地仓库,远程仓库"></a>1,工作区,暂存区,本地仓库,远程仓库</h3><p><img src="https://cdn.wangyaxing.cn/git.png" alt></p><h3 id="2-git-添加远程仓库地址-拉项目-推项目"><a href="#2-git-添加远程仓库地址-拉项目-推项目" class="headerlink" title="2,git 添加远程仓库地址/拉项目/推项目"></a>2,git 添加远程仓库地址/拉项目/推项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git remote add mayun https://git.oschina.net/fenmiaojinrong/fmjr.git</span><br><span class="line"></span><br><span class="line">git branch --set-upstream master mayun/master</span><br><span class="line"></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m&quot;解决冲突&quot;</span><br><span class="line"></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h3 id="3-git-版本回退"><a href="#3-git-版本回退" class="headerlink" title="3,git -版本回退"></a>3,git -版本回退</h3><h4 id="本地回退版本"><a href="#本地回退版本" class="headerlink" title="本地回退版本"></a>本地回退版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;the-hash&gt;</span><br></pre></td></tr></table></figure><h4 id="远程回退版本"><a href="#远程回退版本" class="headerlink" title="远程回退版本"></a>远程回退版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git push --force &lt;remote&gt; &lt;the-hash&gt;:&lt;the remote branch&gt;</span><br></pre></td></tr></table></figure><h4 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i &lt;the-hash&gt;</span><br></pre></td></tr></table></figure><h4 id="清空本地改动"><a href="#清空本地改动" class="headerlink" title="清空本地改动"></a>清空本地改动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -fd</span><br></pre></td></tr></table></figure><h4 id="取消应该被跟踪的改动"><a href="#取消应该被跟踪的改动" class="headerlink" title="取消应该被跟踪的改动"></a>取消应该被跟踪的改动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure><h4 id="临时取消工作区指定文件改动"><a href="#临时取消工作区指定文件改动" class="headerlink" title="临时取消工作区指定文件改动"></a>临时取消工作区指定文件改动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git update-index --assume-unchanged &lt;file&gt; </span><br><span class="line">git update-index --no-assume-unchanged &lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="4-在master上建了一个分支next-但是master上有改动-需要next主动去合并master分支"><a href="#4-在master上建了一个分支next-但是master上有改动-需要next主动去合并master分支" class="headerlink" title="4,在master上建了一个分支next,但是master上有改动,需要next主动去合并master分支"></a>4,在master上建了一个分支next,但是master上有改动,需要next主动去合并master分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next merge master</span><br></pre></td></tr></table></figure><h3 id="5-git-远程仓库法人删除和重命名"><a href="#5-git-远程仓库法人删除和重命名" class="headerlink" title="5,git -远程仓库法人删除和重命名"></a>5,git -远程仓库法人删除和重命名</h3><p>在新版 Git 中可以用 git remote rename 命令修改某个远程仓库在本地的简称，比如想把 pb 改成paul，可以这么运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rename pb paul</span><br><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line">paul</span><br></pre></td></tr></table></figure></p><p>注意，对远程仓库的重命名，也会使对应的分支名称发生变化，原来的 pb/master分支现在成了paul/master。</p><p>碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库，可以运行 git remote rm 命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rm paul</span><br><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure></p><h3 id="git-拉取远程分支"><a href="#git-拉取远程分支" class="headerlink" title="git -拉取远程分支"></a>git -拉取远程分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --track remotes/origin/react</span><br></pre></td></tr></table></figure><h3 id="6-友情链接"><a href="#6-友情链接" class="headerlink" title="6,友情链接"></a>6,友情链接</h3><ul><li><a href="http://pan.baidu.com/s/1i5L40aL" target="_blank" rel="noopener">windows上Git下载</a></li><li><a href="http://git.oschina.net/progit/" target="_blank" rel="noopener">progit</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017年国庆节-杭州&amp;&amp;上海</title>
      <link href="/2017/10/09/2017-10-09-%E5%9B%BD%E5%BA%86%E8%8A%82/"/>
      <url>/2017/10/09/2017-10-09-%E5%9B%BD%E5%BA%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/IMG_yunhe.JPG" alt="京杭大运河"></p><a id="more"></a><h2 id="10-01-10-02-coding-at-home"><a href="#10-01-10-02-coding-at-home" class="headerlink" title="10.01~10.02 coding at home"></a>10.01~10.02 coding at home</h2><p>今年的国庆节和中秋节一共八天假,期待了很久的假期;<br>前两天自己在家写了两天代码,研究了一下项目用meteor和react结合做全栈;</p><h2 id="10-03-浙大-将军山"><a href="#10-03-浙大-将军山" class="headerlink" title="10.03 浙大 + 将军山"></a>10.03 浙大 + 将军山</h2><ul><li>5点起床,打车去首都机场,前往杭州,打印登机牌,办理行李托运,最后安检的时候被扣下了一瓶海飞丝,(规定是不允许带超过100ml的液体,哎,也是第一次做飞机,平常去的地方都特别近),大概在天上飞了两个半小时,飞机上的风景很美很美,看到了蓝天白云,上午10点左右,到达杭州,跟在天上看到的完全是两个样子,没有蓝天白云.</li><li>查找路线,坐公交去定好的酒店,杭州的公交支持支付宝直接付款,这个真的很方便,不用直接去换零钱;</li><li>在酒店里休息了一下就开始规划这几天在杭州的路线,浙大就在酒店的附近,就骑着车子去了,杭州的路比北京的要宽很多,路两边的树很多,而且树长的都很大;</li></ul><h4 id="浙大玉泉校区"><a href="#浙大玉泉校区" class="headerlink" title="浙大玉泉校区"></a>浙大玉泉校区</h4><p><img src="https://cdn.wangyaxing.cn/IMG_zd.jpg" alt></p><h4 id="将军山"><a href="#将军山" class="headerlink" title="将军山"></a>将军山</h4><p><img src="https://cdn.wangyaxing.cn/IMG_jjs.jpg" alt><br><img src="https://cdn.wangyaxing.cn/IMG_sd.jpg" alt></p><h2 id="10-04-西湖-杭州海底世界-京杭运河"><a href="#10-04-西湖-杭州海底世界-京杭运河" class="headerlink" title="10.04 西湖 + 杭州海底世界 + 京杭运河"></a>10.04 西湖 + 杭州海底世界 + 京杭运河</h2><p>来杭州当然一定要去看一下西湖,于是就骑着车子去西湖了,人特别的多,<br><img src="https://cdn.wangyaxing.cn/IMG_xh.jpg" alt><br><img src="https://cdn.wangyaxing.cn/IMG_leifeng.JPG" alt></p><p><img src="https://cdn.wangyaxing.cn/hd.jpg" alt></p><h4 id="晚上-游京杭运河-夜景真的很美很美-杭州真的很会使用灯光搭配-武林门码头坐游船-差不多一百元一位-白天有水上的公交-才三元-所以你可以晚上早点去-然后做最后一班公交-这样即会节省一部分开支-又可以看到晚上的夜景"><a href="#晚上-游京杭运河-夜景真的很美很美-杭州真的很会使用灯光搭配-武林门码头坐游船-差不多一百元一位-白天有水上的公交-才三元-所以你可以晚上早点去-然后做最后一班公交-这样即会节省一部分开支-又可以看到晚上的夜景" class="headerlink" title="晚上,游京杭运河,夜景真的很美很美,杭州真的很会使用灯光搭配;武林门码头坐游船,差不多一百元一位,白天有水上的公交,才三元,所以你可以晚上早点去,然后做最后一班公交,这样即会节省一部分开支,又可以看到晚上的夜景"></a>晚上,游京杭运河,夜景真的很美很美,杭州真的很会使用灯光搭配;武林门码头坐游船,差不多一百元一位,白天有水上的公交,才三元,所以你可以晚上早点去,然后做最后一班公交,这样即会节省一部分开支,又可以看到晚上的夜景</h4><p><img src="https://cdn.wangyaxing.cn/IMG_yunhe1.JPG" alt><br><img src="https://cdn.wangyaxing.cn/IMG_yunhe2.JPG" alt><br><img src="https://cdn.wangyaxing.cn/IMG_yunhe3.JPG" alt></p><h2 id="10-05-西溪-断桥"><a href="#10-05-西溪-断桥" class="headerlink" title="10.05 西溪 + 断桥"></a>10.05 西溪 + 断桥</h2><p><img src="https://cdn.wangyaxing.cn/XIXI.jpg" alt><br><img src="https://cdn.wangyaxing.cn/IMG_xixi.JPG" alt><br><img src="https://cdn.wangyaxing.cn/IMG_xixi1.JPG" alt><br><img src="https://cdn.wangyaxing.cn/IMG_xixi2.JPG" alt></p><h4 id="大概断桥就是被人压断的吧-O-∩-∩-O哈哈"><a href="#大概断桥就是被人压断的吧-O-∩-∩-O哈哈" class="headerlink" title="大概断桥就是被人压断的吧,O(∩_∩)O哈哈~"></a>大概断桥就是被人压断的吧,O(∩_∩)O哈哈~</h4><p><img src="https://cdn.wangyaxing.cn/IMG_duanqiao.jpeg" alt></p><h2 id="10-06-东方明珠-上海世贸大厦最高观光厅"><a href="#10-06-东方明珠-上海世贸大厦最高观光厅" class="headerlink" title="10.06 东方明珠 + 上海世贸大厦最高观光厅"></a>10.06 东方明珠 + 上海世贸大厦最高观光厅</h2><p><img src="https://cdn.wangyaxing.cn/IMG_sh.jpeg" alt><br><img src="https://cdn.wangyaxing.cn/IMG_sh1.jpeg" alt><br><img src="https://cdn.wangyaxing.cn/IMG_sh2.JPG" alt><br><img src="https://cdn.wangyaxing.cn/IMG_sh3.JPG" alt></p><h2 id="10-07-上海迪士尼"><a href="#10-07-上海迪士尼" class="headerlink" title="10.07 上海迪士尼"></a>10.07 上海迪士尼</h2><p>迪士尼人真的太多了,基本玩一个项目都得等一个多小时,所以去玩的时候一定要提前做好攻略;<br>(看过欢乐颂2的大概都知道,里面有一个特别浪漫的情节就是在迪士尼拍的,但是电视剧毕竟是电视,看看就好,✧(≖ ◡ ≖✿)嘿嘿,真实的情况你懂得)<br><img src="https://cdn.wangyaxing.cn/IMG_dsn1.jpg" alt><br><img src="https://cdn.wangyaxing.cn/IMG_dsn.jpg" alt></p><h2 id="10-08-回北京"><a href="#10-08-回北京" class="headerlink" title="10.08 回北京"></a>10.08 回北京</h2>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> 旅游 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css实现toolTip</title>
      <link href="/2017/09/27/2017-09-27-css%E5%AE%9E%E7%8E%B0toolTip/"/>
      <url>/2017/09/27/2017-09-27-css%E5%AE%9E%E7%8E%B0toolTip/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1506491736485&amp;di=c04a08b7627d2a6733d9ffdb1c1c8df3&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.58pic.com%2F58pic%2F16%2F04%2F82%2F00F58PIC8Ny_1024.jpg" alt="title"><br><a id="more"></a></p><h3 id="1-常用border来实现三角形"><a href="#1-常用border来实现三角形" class="headerlink" title="1,常用border来实现三角形"></a>1,常用border来实现三角形</h3><blockquote><p>原理: 宽高都不设置(即为0),只设置边框,如果4个边框都设置宽度(border-width),样式(border-style)和颜色(border-color)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.test &#123;</span><br><span class="line">    width:0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-top: 100px solid red ;</span><br><span class="line">    border-bottom: 100px solid blue;</span><br><span class="line">    border-left: 100px solid green;</span><br><span class="line">    border-right: 100px solid yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>效果如图<br><img src="https://cdn.wangyaxing.cn/border.jpg" alt></p><p>上面看到的都是三角形,其实想实现单个三角形只需把其他三个三角形的<code>border-color</code>设置为透明色就可以了<br>这样就实现了三角形<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>各种三角形<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">     * &#123;</span><br><span class="line">         margin: 0;</span><br><span class="line">         padding: 0;</span><br><span class="line">         list-style: none;</span><br><span class="line">     &#125;</span><br><span class="line">     li &#123;</span><br><span class="line">         margin-top: 50px;</span><br><span class="line">     &#125;</span><br><span class="line">     .triangle-up &#123;</span><br><span class="line">        width: 0;</span><br><span class="line">        height: 0;</span><br><span class="line">        border-left: 50px solid transparent;</span><br><span class="line">        border-right: 50px solid transparent;</span><br><span class="line">        border-bottom: 100px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">    .triangle-down &#123;</span><br><span class="line">        width: 0;</span><br><span class="line">        height: 0;</span><br><span class="line">        border-left: 50px solid transparent;</span><br><span class="line">        border-right: 50px solid transparent;</span><br><span class="line">        border-top: 100px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">    .triangle-left &#123;</span><br><span class="line">        width: 0;</span><br><span class="line">        height: 0;</span><br><span class="line">        border-top: 50px solid transparent;</span><br><span class="line">        border-right: 100px solid red;</span><br><span class="line">        border-bottom: 50px solid transparent;</span><br><span class="line">    &#125;</span><br><span class="line">    .triangle-right &#123;</span><br><span class="line">        width: 0;</span><br><span class="line">        height: 0;</span><br><span class="line">        border-top: 50px solid transparent;</span><br><span class="line">        border-left: 100px solid red;</span><br><span class="line">        border-bottom: 50px solid transparent;</span><br><span class="line">    &#125;</span><br><span class="line">    .triangle-topleft &#123;</span><br><span class="line">        width: 0;</span><br><span class="line">        height: 0;</span><br><span class="line">        border-top: 100px solid red;</span><br><span class="line">        border-right: 100px solid transparent;</span><br><span class="line">    &#125;</span><br><span class="line">    .triangle-topright &#123;</span><br><span class="line">        width: 0;</span><br><span class="line">        height: 0;</span><br><span class="line">        border-top: 100px solid red;</span><br><span class="line">        border-left: 100px solid transparent; </span><br><span class="line">    &#125;</span><br><span class="line">    .triangle-bottomleft &#123;</span><br><span class="line">        width: 0;</span><br><span class="line">        height: 0;</span><br><span class="line">        border-bottom: 100px solid red;</span><br><span class="line">        border-right: 100px solid transparent;</span><br><span class="line">    &#125;</span><br><span class="line">    .triangle-bottomright &#123;</span><br><span class="line">        width: 0;</span><br><span class="line">        height: 0;</span><br><span class="line">        border-bottom: 100px solid red;</span><br><span class="line">        border-left: 100px solid transparent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"triangle-up"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"triangle-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"triangle-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"triangle-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"triangle-topleft"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"triangle-topright"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"triangle-bottomleft"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"triangle-bottomright"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="2-css实现toolTip-实心三角箭头"><a href="#2-css实现toolTip-实心三角箭头" class="headerlink" title="2,css实现toolTip(实心三角箭头)"></a>2,css实现toolTip(实心三角箭头)</h3><p>原理: </p><ul><li>一个三角形绝对定位到主体元素边界处并连接起来</li><li>把三角形的颜色换成和主体元素一致的背景色就可以<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#A5C4EC</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">20px</span> solid transparent ;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">20px</span> solid <span class="number">#A5C4EC</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://cdn.wangyaxing.cn/border-arrow.jpg" alt></p><h3 id="3-css实现toolTip-空心三角箭头-源码如下"><a href="#3-css实现toolTip-空心三角箭头-源码如下" class="headerlink" title="3,css实现toolTip(空心三角箭头)源码如下"></a>3,css实现toolTip(空心三角箭头)源码如下</h3><p>原理:</p><ul><li>一个边框颜色的三角形绝对定位到主体元素边界处并连接起来</li><li>另一个主体元素背景色的三角形绝对定位并覆盖到第一个三角形上面</li><li>第二个三角形相较于第一个三角形定位上偏移距离应等于边框厚度<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">6px</span> solid blue;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#A5C4EC</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">20px</span> solid transparent ;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">20px</span> solid blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">20px</span> solid <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://cdn.wangyaxing.cn/border1.jpg" alt="title"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line">            width: 1000px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* 向下 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.toolTip-bottom</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#A5C4EC</span>;</span></span><br><span class="line">            border-radius: 20px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">         &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.toolTip-bottom</span><span class="selector-pseudo">:before</span>&#123;</span></span><br><span class="line">            content: '';</span><br><span class="line">            display: block;</span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: -20px;</span><br><span class="line">            left: 80px;</span><br><span class="line">            border-left: 20px solid transparent ;</span><br><span class="line">            border-right: 20px solid transparent;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-top</span>: 20<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#A5C4EC</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.toolTip-bottom</span><span class="selector-pseudo">:after</span>&#123;</span></span><br><span class="line">            content: '';</span><br><span class="line">            display: block;</span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">bottom</span>: <span class="selector-tag">-17</span><span class="selector-class">.6px</span>;</span></span><br><span class="line">            left: 80px;</span><br><span class="line">            border-left: 20px solid transparent;</span><br><span class="line">            border-right: 20px solid transparent;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-top</span>: 20<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">          <span class="comment">/* 向上 */</span></span></span><br><span class="line"><span class="css">          <span class="selector-class">.toolTip-top</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#A5C4EC</span>;</span></span><br><span class="line">            border-radius: 20px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">         &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.toolTip-top</span><span class="selector-pseudo">:before</span>&#123;</span></span><br><span class="line">            content: '';</span><br><span class="line">            display: block;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: -20px;</span><br><span class="line">            left: 80px;</span><br><span class="line">            border-left: 20px solid transparent ;</span><br><span class="line">            border-right: 20px solid transparent;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span>: 20<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#A5C4EC</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.toolTip-top</span><span class="selector-pseudo">:after</span>&#123;</span></span><br><span class="line">            content: '';</span><br><span class="line">            display: block;</span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">top</span>: <span class="selector-tag">-17</span><span class="selector-class">.6px</span>;</span></span><br><span class="line">            left: 80px;</span><br><span class="line">            border-left: 20px solid transparent;</span><br><span class="line">            border-right: 20px solid transparent;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span>: 20<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* 向左 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.toolTip-left</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#A5C4EC</span>;</span></span><br><span class="line">            border-radius: 20px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.toolTip-left</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">            content: '';</span><br><span class="line">            display: block;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: -20px;</span><br><span class="line">            top: 30px;</span><br><span class="line">            border-top: 20px solid transparent ;</span><br><span class="line">            border-bottom: 20px solid transparent;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-right</span>: 20<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#A5C4EC</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.toolTip-left</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">            content: '';</span><br><span class="line">            display: block;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: -18px;</span><br><span class="line">            top: 30px;</span><br><span class="line">            border-top: 20px solid transparent ;</span><br><span class="line">            border-bottom: 20px solid transparent;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-right</span>: 20<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 向右 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.toolTip-right</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#A5C4EC</span>;</span></span><br><span class="line">            border-radius: 20px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.toolTip-right</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">            content: '';</span><br><span class="line">            display: block;</span><br><span class="line">            position: absolute;</span><br><span class="line">            right: -20px;</span><br><span class="line">            top: 40px;</span><br><span class="line">            border-top: 20px solid transparent ;</span><br><span class="line">            border-bottom: 20px solid transparent;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-left</span>: 20<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#A5C4EC</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.toolTip-right</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">            content: '';</span><br><span class="line">            display: block;</span><br><span class="line">            position: absolute;</span><br><span class="line">            right: -18px;</span><br><span class="line">            top: 40px;</span><br><span class="line">            border-top: 20px solid transparent ;</span><br><span class="line">            border-bottom: 20px solid transparent;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-left</span>: 20<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolTip-bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolTip-top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolTip-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolTip-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="效果图如下"><a href="#效果图如下" class="headerlink" title="效果图如下"></a>效果图如下</h3><p><img src="https://cdn.wangyaxing.cn/toolTip.png" alt="效果图"></p><p><a href="https://juejin.im/post/59c9e9276fb9a00a616f4842" target="_blank" rel="noopener">参考</a></p><p><a href="http://wangyaxing.deercv.com/" target="_blank" rel="noopener">aboutme</a><br><a href="https://github.com/funnycoderstar" target="_blank" rel="noopener">github</a><br><a href="http://wangyaxing.cn/2017/09/27/css%E5%AE%9E%E7%8E%B0toolTip/#more">blog</a></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下运行Rocket.chat</title>
      <link href="/2017/09/17/2017-09-17-Mac%E4%B8%8B%E8%BF%90%E8%A1%8CRocket-chat/"/>
      <url>/2017/09/17/2017-09-17-Mac%E4%B8%8B%E8%BF%90%E8%A1%8CRocket-chat/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/rocketLogo.png-blogImg" alt="title"><br><a id="more"></a></p><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1,简介"></a>1,简介</h3><ul><li><a href="https://github.com/RocketChat/Rocket.Chat" target="_blank" rel="noopener">github</a></li><li>Rocket.chat是特性最丰富的Slack开源替代品之一</li><li>主要功能：群组聊天，直接通信，私聊群，桌面通知，媒体嵌入，文件上传，语音/视频聊天，截图等等</li><li>Rocket.chat原生支持windows,Mac OSX, Linux, ios和Android平台</li></ul><h3 id="2，准备工作"><a href="#2，准备工作" class="headerlink" title="2，准备工作"></a>2，准备工作</h3><p>由于Rocket.chat使用的是Meteor框架，而Meteor框架是对Node.js的封装，源码中又使用到了CoffeeScript.js,使用数据库是MongDB，所以在Rocker.chat上做二次开发，需要学习的技术有Meteor, Node.js, CoffeeScript.js,MongDB；</p><h4 id="其他资料"><a href="#其他资料" class="headerlink" title="其他资料"></a>其他资料</h4><ul><li><a href="http://coffee-script.org/" target="_blank" rel="noopener">CoffeeScipt中文网</a></li><li><a href="http://zh.discovermeteor.com" target="_blank" rel="noopener">Meteor中文网</a></li></ul><p>Rocket.chat要运行，必须安装Node.js,NPM,Meteor(包含了Mongdb)<br>node和npm的安装大家肯定特别熟悉，下面说一下meteor的安装过程</p><h4 id="3-安装meteor"><a href="#3-安装meteor" class="headerlink" title="3,安装meteor"></a>3,安装meteor</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://install.meteor.com/ | sh</span><br></pre></td></tr></table></figure><p>创建一个小工程的指令，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meteor create meteorApp</span><br><span class="line"><span class="built_in">cd</span> meteorApp</span><br><span class="line">meteor</span><br></pre></td></tr></table></figure></p><p>在浏览器中输入：<a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a></p><h4 id="4-下载和运行Rocket-chat"><a href="#4-下载和运行Rocket-chat" class="headerlink" title="4,下载和运行Rocket.chat"></a>4,下载和运行Rocket.chat</h4><p>下载Rocet.chat最好使用git 的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git clone https://github.com/RocketChat/Rocket.Chat.git</span><br></pre></td></tr></table></figure></p><p>等工程源码下载完毕后，进入对应的文件夹，然后运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd Rocket.Chat</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure></p><blockquote><p>在执行npm start的过程中，需要注意一下问题，否则可能会启动不了</p><ul><li>1,运行会特别慢,建议加上修改源为淘宝源，具体方法如下<a href="http://blog.csdn.net/bugall/article/details/45765979" target="_blank" rel="noopener">参考</a>：</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ul><li>2,运行过程需要<code>翻墙</code>，因为国外的npm包在国内下载可能就被墙了</li></ul><blockquote><p>我在安装的过程中出现报错：<br> <img src="https://cdn.wangyaxing.cn/phantomjs-error.png" alt><br> 找了phantomjs<a href="https://npm.taobao.org/mirrors/phantomjs" target="_blank" rel="noopener">镜像</a>单独安装了一下速度很快，就成功了,😊,然后把phantomjs添加到环境变量(方法如下)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1,cd phantomjs</span><br><span class="line">2,cd bin</span><br><span class="line">3,pwd     //注: 需要输出的复制地址</span><br><span class="line">4,cd ~    // 回到根目录</span><br><span class="line">5,vim .zshrc</span><br><span class="line">6,添加到path</span><br><span class="line">7,source .zshrc // 保存修改</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="//upload-images.jianshu.io/upload_images/3297464-b97ab1ba31b426eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="phantomjst添加到Path.png"></p></blockquote><blockquote><p>运行成功命令行如下<br><img src="https://cdn.wangyaxing.cn/rocketChatSucess.png" alt></p></blockquote><blockquote><p>运行成功浏览器中如下<br> <img src="https://cdn.wangyaxing.cn/rocketChat.png" alt></p></blockquote><p><a href="http://blog.csdn.net/u011619283/article/details/52971473" target="_blank" rel="noopener">参考</a></p><p>如果运行中出现其他的问题欢迎与我交流<br><a href="http://wangyaxing.deercv.com/" target="_blank" rel="noopener">aboutme</a><br><a href="https://github.com/funnycoderstar" target="_blank" rel="noopener">github</a><br><a href="http://wangyaxing.cn/2017/09/01/wxapp/#more">blog</a></p>]]></content>
      
      
      <categories>
          
          <category> meteor </category>
          
          <category> Rocket.chat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> meteor </tag>
            
            <tag> Rocket.chat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端路由history vs hash</title>
      <link href="/2017/09/10/2017-09-10-%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1history-vs-hash/"/>
      <url>/2017/09/10/2017-09-10-%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1history-vs-hash/</url>
      
        <content type="html"><![CDATA[<p><img src="//7xr2s7.com1.z0.glb.clouddn.com/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%861.jpg" alt><br><a id="more"></a></p><h2 id="history路由机制"><a href="#history路由机制" class="headerlink" title="history路由机制"></a>history路由机制</h2><p>用户访问网页的历史记录通常会被保存在一个类似栈对象中,即history对象,点击返回就出栈,跳下一页就入栈.它提供了一些方法来操作页面的前进和后退:</p><ul><li>window.history.back()返回到上一个页面</li><li>window.history.forward()进入到下一个页面</li><li>window.history.go([delta])跳转到指定页面<br>HTML5对history Api进行了增强,新增了两个Api和一个事件,分别为pushState,replaceState和onpopstate<br>pushState是往history对象里添加一个新的历史记录,即压栈<br>replaceState是替换history对象中的当前历史;<br>这两个API相同之处都会操作浏览器的历史记录,而不会引起页面的刷新;不同之处在于,pushState会增加一条新的历史记录,而replaceState则会替换当前的历史记录<br>当点击浏览器后退按钮或js调用history.back都会触发onpopstate事件,与其类似的还有一个事件:onhashchange</li></ul><h2 id="hash路由机制"><a href="#hash路由机制" class="headerlink" title="hash路由机制"></a>hash路由机制</h2><p>我们经常在url中看到#,这个#有两个情况,一个是我们所谓的锚点,比如典型的回到顶部按钮原理,github上各个标题之间的跳转等,路由里的#不叫锚点,我们称之为hash,大型框架的路由系统大多都是哈希实现的<br>onhashchange 事件在当前 URL 的锚部分(以 ‘#’ 号为开始) 发生改变时触发</p><h2 id="hashhistory与browserhistory"><a href="#hashhistory与browserhistory" class="headerlink" title="hashhistory与browserhistory"></a>hashhistory与browserhistory</h2><ul><li>使用 hashHistory，浏览器上看到的 url 会是这样的: /#/user/haishanh?_k=adseis</li><li>使用 browserHistory，浏览器上看到的 url 会是这样的：/user/haishanh</li><li>看起来当然browerHistory很好很理想,但browweHistory需要server端支持,而使用hashHistory的时候，因为 url 中 # 符号的存在，从 /#/ 到 /#/user/haishanh 浏览器并不会去发送一次 request，react-router 自己根据 url 去 render 相应的模块。</li><li>而使用 browserHistory 的时候，浏览器从 / 到 /user/haishanh 是会向 server 发送 request 的。所以 server 端是要做特殊配置的。比如用的 express 的话，你需要 handle 所有的路由 app.get(‘*’, (req, res) =&gt; { … })，使用了 nginx 的话，nginx也要做相应的配置。<br>所以你的 App 是静态，没有服务端的话，只能用 hashHistory。</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心塞！又一次被自己蠢哭</title>
      <link href="/2017/09/08/2017-09-08-%E8%A2%AB%E9%AA%97%E8%AE%B0/"/>
      <url>/2017/09/08/2017-09-08-%E8%A2%AB%E9%AA%97%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/perfect.jpg" alt="title"><br><a id="more"></a></p><p>很晚了，但是今天就是睡不着，想把今天发生在我身上的事情总结一下，看完之后肯定会觉得我很傻很笨，这一次我将不会再为自己辩解；<br>承认自己被骗是一个很痛苦的事情，不知道谁能体会到；</p><p>我发现我真的好笨，这次被骗很难过，并不仅仅是骗了200块钱，而是她还欺骗了我的感情，我那么相信她，跟她聊了好多实话，很多人跟我说过不要太容易去相信别人，我爸妈，还有很多朋友都这么跟我说，我很不愿意接受现实生活中哪有那么多坏人，每次都会反驳一句：你们不要老把别人想得那么坏。。。<br>所以就有了之后的一次又一次被骗，之前碰到乞丐都会给一些钱，还有路边说钱包被偷的没钱吃饭的，借钱回家的，还有1700多买了个酷派合约机，一个月话费120(当时都没工作，那来那么多钱交话费)甚至还有骗你拿自己身份证办银行卡的，很多很多，经历了那么多被骗，以为自己现在成熟很多了，</p><p>这次美容院被骗事件，我真的是不知道怎么办，只是问个路，然后那个人就拐着你的胳膊就说我领你去，当时还特庆幸自己遇到一个特别好的人，结果就把我领到店里了，我真的很生气，当时准备扭头就走，可是接下来发生的事就像下面百度到的这些美容院骗术发生的一模一样；</p><p>//jingyan.baidu.com/article/a17d52855420a78098c8f2f9.html</p><p>让脸上抹了一些膏状液体，拿着电疗忆，过一会就变成了黑色(（PS 涂的东西是一种重金属测试膏，百度“美容院用重金属测试膏欺诈顾客”，可以看到相关新闻报道，据说这是十年前就有的骗局。。）)，说是原价700多的现在因为4周年店庆，300多，最后一天，我坚持不做，想走，她死活不让我走，说现在不能走，出去就会感染，过敏，皮囊炎，毁容。。。。(正常人听到这些多少都会还害怕吧，不过现在想想她说怎样就会怎么样么，20多年了，皮肤就这样，很多人一辈子没去去过美容院，也没见自己长着长着毁容的)说你现在不能走，她要对你负责，怎么办，她又说这样吧，给你个学生特惠的190，然后你下次来体验一把全脸的，我意识到这是不掏钱不让走的节奏啊，而且他们人多，我自己，又不敢怎么，但是又不愿相信自己被骗了，还是愿意相信那个人所说的，还傻乎乎的打算有空来体验一把（被自己蠢哭）。</p><p>百度完之后，终于意识到自己真的是被骗了，看着百度搜索出来的<a href="http://bbs.tianya.cn/post-funinfo-6488346-1.shtml" target="_blank" rel="noopener">美容院骗局</a>，<a href="//jingyan.baidu.com/article/a17d52855420a78098c8f2f9.html">解析街边美容院骗局</a>；很多评论都是2017年的。老掉牙的骗局，现在我还被骗，哎，不过看到他们比我骗得钱多，而且很多人都被骗过，心里平衡了很多（明明知道这是一种很不好的心里活动，就当是安慰自己吧）<br><img src="https://cdn.wangyaxing.cn/jiao.jpeg" alt="title"></p><p>真的很希望骗子你们不要再找我了，骗我就是一骗一个准，突然想到，自己能安全活这么大还是很不容易的，所以身边的你们要好好珍惜</p><p>很渴望骗子能少一些，人与人之前多一点真诚。这样当真正有需要帮助的人需要帮助的时候，大家才不会那么冷漠。希望那些骗子们不要再玩心理战了，这样真的很可恶，不仅骗钱，还骗感情。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> 感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用vue,你知道 keep-alive 么</title>
      <link href="/2017/09/06/2017-09-06-vue%E7%BB%84%E4%BB%B6%E4%B9%8Bkeep-alive/"/>
      <url>/2017/09/06/2017-09-06-vue%E7%BB%84%E4%BB%B6%E4%B9%8Bkeep-alive/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/keep-alive.jpg" alt="title"><br><a id="more"></a></p><p>项目中写vue也没注意到<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>这个组件,最近在深入的研究vue组件的生命周期函数,每一个函数都是干嘛的,然后其中有<code>activated</code>和<code>deactivated</code>这两个函数与<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>这个组件有关</p><ul><li><code>activated</code>: keep-alive组件激活时调用</li><li><code>deactivated</code>: keep-alive组件停用时调用<h3 id="keep-alive用法"><a href="#keep-alive用法" class="headerlink" title="keep-alive用法"></a><a href="https://cn.vuejs.org/v2/api/?#keep-alive" target="_blank" rel="noopener">keep-alive用法</a></h3></li><li><code>&lt;keep-alive&gt;</code>包裹动态组件时,会缓存不活动的组件实例,而不是销毁它们</li><li><code>&lt;keep-alive&gt;</code>是一个抽象组件:它自身不会渲染一个DOM元素,也不会出现在父组件链中</li><li>当组件在<code>&lt;keep-alive&gt;</code>内被切换,它的<code>activated</code>和<code>deactivated</code>这两个生命周期钩子函数将会被对应执行<h3 id="具体的实例如下"><a href="#具体的实例如下" class="headerlink" title="具体的实例如下"></a>具体的实例如下</h3></li><li>是一个简单的tab切换,可以尝试把<code>&lt;keep-alive&gt;</code>去掉之后,对比一下,然后就会发现它的好处</li></ul><p>test.vue<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"test"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"testNav"</span>&gt;</span><br><span class="line">            &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;'selected':tab === 1,'testTitle':true&#125;"</span> @click=<span class="string">"toTab(1)"</span>&gt;标题一&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div :class="&#123;'selected':tab === 2,'testTitle':true&#125;"  @click="toTab(2)"&gt;标题二&lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="container"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;keep-alive&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Test1 v-if="tab === 1"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>Test1&gt;</span><br><span class="line">                &lt;Test2 v-<span class="keyword">else</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/Test2&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>keep-alive&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    import Test1 from './</span>test1.vue<span class="string">';</span></span><br><span class="line"><span class="string">    import Test2 from '</span>./test2.vue<span class="string">';</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        data() &#123;</span></span><br><span class="line"><span class="string">            return &#123;</span></span><br><span class="line"><span class="string">                tab: 1,</span></span><br><span class="line"><span class="string">            &#125;;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        components: &#123;</span></span><br><span class="line"><span class="string">            Test1,</span></span><br><span class="line"><span class="string">            Test2,</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods: &#123;</span></span><br><span class="line"><span class="string">            toTab(index) &#123;</span></span><br><span class="line"><span class="string">                this.tab = index;</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style lang="less"&gt;</span></span><br><span class="line"><span class="string">.test &#123;</span></span><br><span class="line"><span class="string">    width: 100%;</span></span><br><span class="line"><span class="string">    .testNav &#123;</span></span><br><span class="line"><span class="string">        height: 60px;</span></span><br><span class="line"><span class="string">        line-height: 60px;</span></span><br><span class="line"><span class="string">        display: flex;</span></span><br><span class="line"><span class="string">        border-bottom: 1px solid #e5e5e5;</span></span><br><span class="line"><span class="string">        .testTitle &#123;</span></span><br><span class="line"><span class="string">            flex: 1;</span></span><br><span class="line"><span class="string">            text-align: center;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        .selected &#123;</span></span><br><span class="line"><span class="string">            color: red;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure></p><p>测试结果如下:<br>注意看一下页面和控制台输出的信息,可以更加直观的注意到<code>&lt;keep-alive&gt;</code>的作用及<code>activated</code>和<code>deactivated</code>这两个函数什么时候会被触发</p><ul><li>打开页面,会出现下面这样<br><img src="https://cdn.wangyaxing.cn/keep-alive1.png" alt="1"></li></ul><p>用setTimeout模拟请求后端接口的场景</p><ul><li>点击<code>title2</code>,出现下面的情况<br><img src="https://cdn.wangyaxing.cn/keep-alive2.png" alt="2"></li><li>再次点击<code>title1</code>,出现下面的情况,你会发现从后端请求的数据会快速显示出来,但是如果你此时不用,会重新请求数据,你可以尝试一下<br><img src="https://cdn.wangyaxing.cn/keep-alive3.png" alt="3"></li></ul><blockquote><p><code>test1.vue</code>和<code>test2.vue</code>的相关代码如下:</p></blockquote><p>test1.vue<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"test1"</span>&gt;</span><br><span class="line">      test1</span><br><span class="line">      &#123;&#123;testInfo1&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                testInfo1: <span class="string">''</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        activated() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'测试1被激活'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        deactivated() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'测试1被缓存'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.testInfo1 = <span class="string">'这是测试一的数据'</span>;</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>test2.vue<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      test2</span><br><span class="line">      &#123;&#123;testInfo2&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                testInfo2: <span class="string">''</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,  </span><br><span class="line">        activated() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'测试2被激活'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        deactivated() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'测试2被缓存'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.testInfo2 = <span class="string">'这是测试二的数据'</span>;</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex布局</title>
      <link href="/2017/09/06/2017-09-06-flex%E5%B8%83%E5%B1%80/"/>
      <url>/2017/09/06/2017-09-06-flex%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/flex.jpg" alt="title"><br><a id="more"></a></p><h3 id="使用flex布局"><a href="#使用flex布局" class="headerlink" title="使用flex布局"></a>使用flex布局</h3><p>flex使用方法很简单,只需要将其display属性设置为flex即可,也可以设置行内的flex,记得webkit内核的浏览器,必须加上-webkit,</p><ul><li>注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.ele &#123;</span><br><span class="line">    display: -webkit-flex;</span><br><span class="line">    diaplay: flex;</span><br><span class="line">    display: inline-flex;</span><br><span class="line">    display: -webkit-inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在flex中,最核心的概念就是容器和轴,其中容器分为父容器和子容器,轴分为主轴和交叉轴(主轴默认为水平方向,方向向右,交叉轴为主轴顺时针旋转90度)</p><blockquote><h3 id="父容器属性"><a href="#父容器属性" class="headerlink" title="父容器属性"></a>父容器属性</h3><p>父容器有六个属性</p><ul><li>1,flex-direction: 主轴方向.</li><li>2,flex-wrap: 超出父容器子容器的排列方式</li><li>3,flex-flow: flex-direction属性和flex-wrap属性的简写方式</li><li>4,justify-content: 子容器在主轴的排列方向</li><li>5,align-items: 子容器的交叉轴上的排列方式</li><li>6,align-content: 多根轴线的对齐方式</li></ul></blockquote><h4 id="flex-direciton属性"><a href="#flex-direciton属性" class="headerlink" title="flex-direciton属性"></a>flex-direciton属性</h4><p>flex-direction属性决定主轴的方向(主轴的方向不一定是水平的,这个属性就是设置主轴的方向,主轴默认是水平方向,从左至右)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    flex-direction: row;           // 默认值,主轴为水平方向,起点在左端,从左到右</span><br><span class="line">    flex-direction: row-reverse;   // 主轴为水平方向,起点在右端,从右到左</span><br><span class="line">    flex-direction: column;        // 主轴为垂直方向,起点在上端,从上到下</span><br><span class="line">    flex-direction: column;        // 主轴为垂直方向,起点在下端,从下到上</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h4><p>flex-wrap属性决定自容器如果在一条轴线排不下时,如何换行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    flex-wrap: nowrap;           // 默认,不换行</span><br><span class="line">    flex-wrap: wrap;       // 换行,第一行在下面</span><br><span class="line">    flex-wrap: column;     // 换行,第一行在=上面</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><h3 id="子容器也有6个属性"><a href="#子容器也有6个属性" class="headerlink" title="子容器也有6个属性"></a>子容器也有6个属性</h3><ul><li>1,order: 子容器的排列顺序</li><li>2,flex-grow: 子容器剩余空间的拉伸比例</li><li>3,flex-shrink: 子容器超出空间的压缩比例</li><li>4,flex-basis: 子容器不伸缩情况下的原始尺寸</li><li>5,flex: 子元素的flex属性是flex-grow, flex-shrink, flex-basis的简写</li><li>6,align-self: 允许单个子容器与其他字容器不一样的对齐方式,可覆盖父元素aligns-items属性(交叉轴),默认是auto,表示继承父元素的align-items属性,如果没有付元素,则等同于strech</li></ul></blockquote><h4 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a>order属性</h4><p>order属性定义子容器的排列顺序,数值越小,排列越靠前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">item &#123;</span><br><span class="line">    order: &lt;interger&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a>flex-grow属性</h3><p>flex-grow属性定义子容器的放大比例,默认为0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">item &#123;</span><br><span class="line">    flex-grow: &lt;number&gt;; /* default 0 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果子容器的flex-grow属性都为1,则他们将等分剩余空间(如果有的话).如果一个项目的flex-grow属性为2,其他项目都为1,则前者占据的剩余空间将比其他项多一倍;</p><h3 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h3><p>flex-shrink定义了子容器的缩小比例,默认为1,如果空间不足,该项目将缩小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">item &#123;</span><br><span class="line">    flex-shrink: &lt;number&gt;; /* default 1 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果所有子容器的flex-shrink属性都为1,当空间不足时,都将等比例缩小.如果一个项目的flex-shrink的属性为0,其他项目都为1,则空间不足时,前者不缩小;<br>负值对该属性无效</p><h3 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h3><p>flex-basis属性定义了在分配多余空间之前,项目占据了主轴空间,浏览器根据这个属性,计算主轴是否有多余空间.它的默认值为auto,即项目的本来大小;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">item &#123;</span><br><span class="line">    flex-basis: &lt;length&gt; | auto; /* default auto */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它可以设置跟width和height属性一样的值(比如350px),则项目将占据固定空间</p><h3 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h3><p>flex是flex-grow,flex-shrink,flex-basis的缩写,默认值为0 1 auto。后两个属性可选<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h3><p>align-self属性允许单个子容器有与其他子容器不一样的对齐方式，可覆盖align-items属性，默认为auto,表示继承父元素align-items属性，如果没有父元素，则等同于stretch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">    align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该属性可能取6个值，除了auto,其他都与align-items属性完全一致。</p><blockquote><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">参考</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清除css默认样式的总结</title>
      <link href="/2017/09/06/2017-09-06-css%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F%E7%9A%84%E6%B8%85%E9%99%A4/"/>
      <url>/2017/09/06/2017-09-06-css%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F%E7%9A%84%E6%B8%85%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/css.jpg" alt="title"><br><a id="more"></a></p><p>我们写css的时候经常会遇到要清楚一些默认的样式,其实每次做项目中需要清除的样式就经常是那么几个,最常见的比如</p><ul><li>清除表单元素<code>input</code>,<code>select</code>,<code></code>textarea`的默认样式,</li><li>CSS3中隐藏滚动条但仍能继续滚动,</li><li>多行文本溢出省略号显示等等,<blockquote><p>所以就总结了一下,持续更新中…,也请大家多多贡献更多的常见的需要清除默认样式的方法😊</p></blockquote></li></ul><h4 id="1-多行文本溢出省略号显示"><a href="#1-多行文本溢出省略号显示" class="headerlink" title="1,多行文本溢出省略号显示"></a>1,多行文本溢出省略号显示</h4><ul><li>让文本只显示一行，然后溢出省略号显示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">white-space: nowrap;</span><br></pre></td></tr></table></figure><ul><li>让文本显示两行，然后溢出部分省略号显示<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">line-height: 1.3rem;</span><br><span class="line">max-height: 2.6rem;</span><br><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: 2;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2，CSS3中隐藏滚动条但仍能继续滚动"><a href="#2，CSS3中隐藏滚动条但仍能继续滚动" class="headerlink" title="2，CSS3中隐藏滚动条但仍能继续滚动"></a>2，CSS3中隐藏滚动条但仍能继续滚动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    width: 0px;</span><br><span class="line">    height: 0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-解决iPhone中overflow-scroll-滑动速度慢或者卡的问题"><a href="#3-解决iPhone中overflow-scroll-滑动速度慢或者卡的问题" class="headerlink" title="3, 解决iPhone中overflow:scroll;滑动速度慢或者卡的问题"></a>3, 解决iPhone中overflow:scroll;滑动速度慢或者卡的问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-webkit-overflow-scrolling : touch;</span><br></pre></td></tr></table></figure><h4 id="4-消除input-textarea等的默认样式"><a href="#4-消除input-textarea等的默认样式" class="headerlink" title="4,消除input,textarea等的默认样式"></a>4,消除<code>input</code>,<code>textarea</code>等的默认样式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">input, button, select, textarea &#123;</span><br><span class="line">    outline: none;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">    border-radius: <span class="number">0</span>;</span><br><span class="line">    border:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">textarea&#123;</span><br><span class="line">    resize:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>outline: none;</code>去掉chrome浏览器自带的点击input框出现边框情况</li><li><code>-webkit-appearance: button;</code>使元素标签看起来像个按钮样式,意思定义了按钮样式<br><code>-webkit-appearance: none;</code>去掉按钮样式</li><li><code>border-radius: 0;</code> 去掉圆角<br><code>border:0;</code> 去掉border</li><li><code>textarea{resize:none}</code>取消chrome下textarea可拖动放大：<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><a href="https://hacknical.com/resume/S1VKezRp-?locale=zh" target="_blank" rel="noopener">aboutme</a><br><a href="https://github.com/funnycoderstar" target="_blank" rel="noopener">github</a><br><a href="http://wangyaxing.cn/">blog</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结微信小程序开发中遇到的坑</title>
      <link href="/2017/09/01/2017-09-01-wxapp/"/>
      <url>/2017/09/01/2017-09-01-wxapp/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1536162943482.png?width=359&amp;height=298&amp;imageView2/3/w/430/h/357" alt="title"><br>总结微信小程序开发中遇到的坑,一些坑你得一个一个的跳啊,/(ㄒoㄒ)/~~<br><a id="more"></a></p><h3 id="1-页面跳转和参数传递实例"><a href="#1-页面跳转和参数传递实例" class="headerlink" title="1,页面跳转和参数传递实例"></a>1,<a href="//www.jb51.net/article/103590.htm">页面跳转和参数传递实例</a></h3><blockquote><p>首先说一下我遇到的需求<br>有一个我的消息页面,里面的数据都是后端返回的,返回的数据大致如下,有一个是数据url是要控制跳转到哪个页面,可能是tab页面也可能是非tab页面,但是微信小程序中跳转到tab和非tab页面用的api不是同一个,但是在页面中渲染肯定是要用到循环的,难道要再多个参数来判断是跳转到tab页面还是非tab页面?</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">2121</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"test"</span>,</span><br><span class="line">        <span class="string">"body"</span>: <span class="string">"test"</span>,</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"url"</span>,</span><br><span class="line">        <span class="string">"pic"</span>: <span class="string">"pic"</span>,</span><br><span class="line">        <span class="string">"created_at"</span>: <span class="string">"2017-07-01 12:34:56"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">2122</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"test"</span>,</span><br><span class="line">        <span class="string">"body"</span>: <span class="string">"test"</span>,</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"url"</span>,</span><br><span class="line">        <span class="string">"pic"</span>: <span class="string">"pic"</span>,</span><br><span class="line">        <span class="string">"created_at"</span>: <span class="string">"2017-07-01 12:34:56"</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>后一般的小程序中我用的框架是wepy,底部的tab组件就是我自己写的,没有用到小程序自己提供的那一个,因为我们还要实现一个需求,有消息时,底部tab会出现小红点,还有以下弹窗要把底部tab覆盖掉,这些需求如果用小程序提供的那一个tab组件的话根本实现不了;而且不用wepy框架的话,自己做一个tab实现的过程很恶心,小程序虽然实现了组件化,但是它实现的组件化bong不想vue和react那样实现的是真正的组件化,你需要哪个组件就直接import进来,小程序的组件化实现可查看<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/module.html" target="_blank" rel="noopener">官方文档</a>,js,css和html都是要分别引入的</li><li>自己实现的tab页面整体是一个非tab页面,所有整个小程序中就不存在绝对的tab页面,所以用navigator这个组件,想要跳转到tab页面可以通过在url上拼接参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"mesList"</span> wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123;unReadList&#125;&#125;"</span> wx:key=<span class="string">"unique"</span>&gt;</span><br><span class="line">    &lt;navigator url=<span class="string">"/pages/index?tab=0"</span> hover-<span class="class"><span class="keyword">class</span></span>=<span class="string">"none"</span> &gt;</span><br><span class="line">        &lt;text&gt;&#123;&#123;item.body&#125;&#125;&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;view class="messageTime"&gt;&#123;&#123;item.created_at&#125;&#125;&lt;/</span>view&gt;</span><br><span class="line">    &lt;<span class="regexp">/navigator&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br></pre></td></tr></table></figure><p>然后再index页面的onload中判断显示哪个tab<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onLoad(options) &#123;</span><br><span class="line">    <span class="keyword">if</span> (options &amp;&amp; options.tab) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tab = <span class="built_in">parseInt</span>(options.tab);</span><br><span class="line">        <span class="keyword">this</span>.$apply();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-微信小程序授权处理"><a href="#2-微信小程序授权处理" class="headerlink" title="2,微信小程序授权处理"></a>2,<a href="https://devework.com/weixin-weapp-auth-failed.html" target="_blank" rel="noopener">微信小程序授权处理</a></h3><ul><li>微信小程序提示授权弹窗,如果用户第一次点击拒绝之后,一段时间将不会再次弹出来,然后用户又不知道什么原因用不了小程序,这是个很糟糕的用户体验,我们应该优雅的处理这种情况</li><li>采用的解决方法<a href="https://devework.com/weixin-weapp-auth-failed.html" target="_blank" rel="noopener">参考</a></li></ul><h3 id="3-登录问题的处理"><a href="#3-登录问题的处理" class="headerlink" title="3, 登录问题的处理"></a>3, 登录问题的处理</h3><ul><li>两个登录接口,一个get,判断是否已经还需要登录,如果返回true,则需要登录,如果返回false,则不需要登录</li><li>如果返回true,则需要去请求更一个post的登录接口,这时,你需要获取第一个get请求的返回信息中的session,之后每次请求求都需要带上他</li><li>在返回true的时候还需要做一件事儿,就是把返回信息中的session存储到storage,即调用setStorage,然后在之后每次请求数据的时候在headers里加上这个字段<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStorage</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 先判断本地数据存储有没有cookie</span></span><br><span class="line">        wx.getStorage(&#123;</span><br><span class="line">            key: key,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                resolve(res.data);</span><br><span class="line">            &#125;,</span><br><span class="line">            fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                resolve(<span class="literal">null</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStorage</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        wx.setStorage(&#123;</span><br><span class="line">            key: key,</span><br><span class="line">            data: value,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> 不知道返回什么</span></span><br><span class="line">                resolve(res.data);</span><br><span class="line">            &#125;,</span><br><span class="line">            fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                reject(res.errMsg);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-wx-getStorage安卓手机上返回的错误信息是getStorage-fail-ios-getStorage-fail-data-not-found"><a href="#4-wx-getStorage安卓手机上返回的错误信息是getStorage-fail-ios-getStorage-fail-data-not-found" class="headerlink" title="4,wx.getStorage安卓手机上返回的错误信息是getStorage:fail,ios,getStorage:fail data not found"></a>4,wx.getStorage安卓手机上返回的错误信息是getStorage:fail,ios,getStorage:fail data not found</h3><ul><li>在判断一些api返回的错误信息时,最好不要通过判断具体的错误信息来处理错误<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStorage</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 先判断本地数据存储有没有cookie</span></span><br><span class="line">        wx.getStorage(&#123;</span><br><span class="line">            key: key,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                resolve(res.data);</span><br><span class="line">            &#125;,</span><br><span class="line">            fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                resolve(<span class="literal">null</span>);</span><br><span class="line">                <span class="comment">// 下面注释的部分即为刚开始犯的错误,导致有可能ios或安卓或部分机型显示不出数据</span></span><br><span class="line">                <span class="comment">// if (res.errMsg == 'getStorage:fail' || res.errMsg == 'getStorage:fail data not found') &#123;</span></span><br><span class="line">                <span class="comment">//     console.log('没有cookie');</span></span><br><span class="line">                <span class="comment">//     resolve(null);</span></span><br><span class="line">                <span class="comment">// &#125; else &#123;</span></span><br><span class="line">                <span class="comment">//     console.log('这是一个问题');</span></span><br><span class="line">                <span class="comment">//     reject(res.errMsg);</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-小程序解决异步"><a href="#5-小程序解决异步" class="headerlink" title="5,小程序解决异步"></a>5,小程序解决异步</h3><ul><li><p>如果项目中没有用到babal,小程序本身的支持只支持到es6的语法,所以解决异步的问题就不能使用es7的async和await,只能使用promise来解决异步,但是每个api上都进行一次封装(如下),这种做法太恶心了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        wx.login(&#123;</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                resolve(res);</span><br><span class="line">            &#125;,</span><br><span class="line">            fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                reject(res.errMsg);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基于微信的API的prototype上进行了promise的封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promiseify</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">args = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            func.call(wx, <span class="built_in">Object</span>.assign(args, &#123;</span><br><span class="line">                success: resolve,</span><br><span class="line">                fail: reject,</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> wx) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(wx, key) &amp;&amp; <span class="keyword">typeof</span> wx[key] === <span class="string">'function'</span>) &#123;</span><br><span class="line">        wx[<span class="string">`_<span class="subst">$&#123;key&#125;</span>`</span>] = promiseify(wx[key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-怎么保证在调用其他接口之前已经调用过登录的接口了"><a href="#6-怎么保证在调用其他接口之前已经调用过登录的接口了" class="headerlink" title="6,怎么保证在调用其他接口之前已经调用过登录的接口了"></a>6,怎么保证在调用其他接口之前已经调用过登录的接口了</h3><ul><li>我采用执行队列的方式来解决,问题可以简化为有两个按钮,点击第一个按钮输出这是第几次输出d1,但是必须在点击完d2之后,isPrint变为true时,才允许输出,在isPrint为false的时候点击d1,需要把要输出的内容暂时存储起来,等isPrint变为true时,暂存起来的输出现在才可以输出出来<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"first"</span>&gt;按钮一&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div class="second"&gt;按钮二&lt;/</span>div&gt;</span><br><span class="line"><span class="comment">// js</span></span><br><span class="line">  <span class="keyword">const</span> d1 = <span class="built_in">document</span>.querySelector(<span class="string">'.first'</span>);</span><br><span class="line">  <span class="keyword">const</span> d2 = <span class="built_in">document</span>.querySelector(<span class="string">'.second'</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>; <span class="comment">// 用来记录第几次输出</span></span><br><span class="line">  <span class="keyword">let</span> isPrint = <span class="literal">false</span>; <span class="comment">// 是否允许输出</span></span><br><span class="line">  <span class="keyword">let</span> arr = []; <span class="comment">// 声明一个数组,用来存储</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">clickCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是第'</span> + count + <span class="string">'次输出d1'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  d1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(isPrint);</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">    <span class="keyword">if</span> (isPrint) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">        clickCount();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">          arr[i]();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      arr.push(clickCount);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'不允许输出'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  d2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    isPrint = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(isPrint);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-小程序问题"><a href="#6-小程序问题" class="headerlink" title="6,小程序问题"></a>6,小程序问题</h3><ul><li>不支持跳转外部链接</li><li>text可以解析/n,</li><li>目前不支持识别图中二维码，</li><li>背景图片不能用本地图片，</li><li>wx.navigateTo需要跳转的应用内非 tabBar 的页面的路径</li><li>wx.switchTab跳转到tabBar页面，</li><li>wx.showToast(),icon只支持success和loading,但是支持image,且image优先级高于icon</li><li>tabBar页面A   navigatorTo 到页面B，然后B   switchTab 到A，这里A会执行onShow()；<br>但是我再从A跳到B再switchTab回来，A就不会再执行onShow()了，</li></ul><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7,总结"></a>7,总结</h3><ul><li>有时候在开发者工具上测试时是没有问题的,但是真机测试却有问题,所有开发过程中一定要在多个不同型号的手机上测试;很多时候IOS和安卓api返回的信息不同</li><li>在手机上打开调试的时候是好的,但是关闭调试后就会出现各种bug,遇到这种情况一定要一步步的去排查原因</li></ul><h4 id="8-后采用wepy重构小程序遇到的一些坑"><a href="#8-后采用wepy重构小程序遇到的一些坑" class="headerlink" title="8,后采用wepy重构小程序遇到的一些坑"></a>8,后采用wepy重构小程序遇到的一些坑</h4><p><a href="https://wepyjs.github.io/wepy/#/" target="_blank" rel="noopener">wepy文档</a><br>1，Q: 怎么在page组件和component组件中回去到getApp(),就是app里面定义的函数,通过this.$parent只能拿到数据，拿不到方法?<br>A:可以在this.$parent的_proto上拿到方法,即this.$parent.onLogin<br>2, Q:怎么实现按需加载<br>A:在compoent组件中自定义生命周期函数,并手动触发</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue生命周期详解</title>
      <link href="/2017/08/29/2017-08-29-vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/"/>
      <url>/2017/08/29/2017-08-29-vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.wangyaxing.cn/vuelife.jpg" alt="title"><br>vue声明周期,在每个声明周期中都干了些什么?<br><a id="more"></a></p><h4 id="1-vue的生命周期"><a href="#1-vue的生命周期" class="headerlink" title="1, vue的生命周期"></a>1, vue的生命周期</h4><ul><li>beforeCreate: 组件实例刚刚被创建,组件属性计算之前,如data属性</li><li>created: 组件实例创建完成,属性已绑定,但是DOM还未完成,$el属性还不存在</li><li>beforeMount:模板编译/挂载之前</li><li>mounted: 模板编译/挂载之后</li><li>beforeUpdate: 组件更新之前</li><li>updated: 组件更新之后</li><li>activated: for <code>keep-alive</code>,组件被激活时调用</li><li>deactivated: for <code>keep-alive</code>,组件被移除时调用</li><li>beforeDestroy: 组件销毁前被调用</li><li>destoryed: 组件销毁后调用<blockquote><p>ps:下面代码可以直接复制出去执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://cdn.jsdelivr.net/vue/2.1.3/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;&#123;&#123;a&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">            el: '#app',</span></span><br><span class="line"><span class="regexp">            data: &#123;</span></span><br><span class="line"><span class="regexp">                a: 'vuejs',</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            beforeCreate: function() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('创建前');</span></span><br><span class="line"><span class="regexp">                console.log(this.a);</span></span><br><span class="line"><span class="regexp">                console.log(this.$el);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            created: function() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('创建之后');</span></span><br><span class="line"><span class="regexp">                console.log(this.a);</span></span><br><span class="line"><span class="regexp">                console.log(this.$el);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            beforeMount: function() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('mount之前');</span></span><br><span class="line"><span class="regexp">                console.log(this.a);</span></span><br><span class="line"><span class="regexp">                console.log(this.$el);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            mounted: function() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('mount之后');</span></span><br><span class="line"><span class="regexp">                console.log(this.a);</span></span><br><span class="line"><span class="regexp">                console.log(this.$el);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            beforeUpdate: function() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('更新之前');</span></span><br><span class="line"><span class="regexp">                console.log(this.a);</span></span><br><span class="line"><span class="regexp">                console.log(this.$el);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            updated: function() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('更新完成');</span></span><br><span class="line"><span class="regexp">                console.log(this.a);</span></span><br><span class="line"><span class="regexp">                console.log(this.$el);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            beforeDestroy: function() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('组件销毁之前');</span></span><br><span class="line"><span class="regexp">                console.log(this.a);</span></span><br><span class="line"><span class="regexp">                console.log(this.$el);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            destroyed: function() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('组件销毁之后');</span></span><br><span class="line"><span class="regexp">                console.log(this.a);</span></span><br><span class="line"><span class="regexp">                console.log(this.$el);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul><blockquote><p>beforeCreated: el和data并未初始化<br>created: 完成data数据的初始化,el没有<br>beforeMount: 完成了el和data初始化<br>mounted: 完成挂载</p></blockquote><p><img src="https://cdn.wangyaxing.cn/vueLife.png" alt="title"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打开命令行在命令行中输入vm.a = &apos;change&apos;;查看效果</span><br></pre></td></tr></table></figure></p><p><img src="https://cdn.wangyaxing.cn/vueUpdate.png" alt="title"></p><blockquote><p><code>activated</code>和<code>deactivated</code>这两个生命周期函数涉及到<code>&lt;keep-alive&gt;</code>这个组件,所以想了解这个生命周期函数的可以看一下我的<a href="//wangyaxing.cn/2017/09/06/vue%E7%BB%84%E4%BB%B6%E4%B9%8Bkeep-alive/#more">另一篇文章</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件通信</title>
      <link href="/2017/08/29/2017-08-29-vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
      <url>/2017/08/29/2017-08-29-vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="//upload-images.jianshu.io/upload_images/1541368-d9be1b3b39abc037?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br>组件通信是很重要的一部分,父组件怎么传数据给子组件,子组件怎么传递数据给父组件?<br><a id="more"></a></p><h3 id="1-父组件给子组件传递数据"><a href="#1-父组件给子组件传递数据" class="headerlink" title="1,父组件给子组件传递数据"></a>1,父组件给子组件传递数据</h3><blockquote><p> vue中使用props向子组件传递数据<br>1): 子组件在props中创建一个属性,用于接收父组件传过来的值<br>2): 父组件中注册子组件<br>3): 在子组件标签中添加子组件props中创建的属性<br>4): 把需要传给子组件的值赋给该属性  </p></blockquote><h3 id="2-子组件向父组件传递数据"><a href="#2-子组件向父组件传递数据" class="headerlink" title="2,子组件向父组件传递数据"></a>2,子组件向父组件传递数据</h3><blockquote><p>子组件主要通过事件传递数据给父组件<br>1), 子组件中需要以某种方式,例如点击事件的方法来触发一个自定义事件<br>2),将需要传的值作为$emit的第二个参数,该值将作为实参数传给相应自定义事件的方法<br>3),在父组件中注册子组件并在子组件标签上绑定自定义事件的监听</p></blockquote><h3 id="3-子组件向子组件传递数据"><a href="#3-子组件向子组件传递数据" class="headerlink" title="3,子组件向子组件传递数据"></a>3,子组件向子组件传递数据</h3><blockquote><p>vue找那个没有直接子组件对子组件传参的方法,建议将需要传递数据的在组件,都合并为一个组件,如果一定需要子组件对子组件传参,可以先传到父组件,再传到子组件,为了方便开发,vue推出了一个状态管理工具vuex,可以啃方便的实现组件之间的参数传递</p></blockquote><p>具体的实例代码如下:可以自行参考相关代码在编辑器中尝试</p><ul><li><p>父组件向子组件传递数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件向子组件传递数据</span></span><br><span class="line">&lt;!--</span><br><span class="line">msg 是在data中(父组件)定义的变量</span><br><span class="line">如果需要从父组件中获取logo的值,就需要使用props[<span class="string">'msg'</span>], 如<span class="number">30</span>行</span><br><span class="line">在props中添加了元素以后,就不需要在data中(子组件)中再添加变量了</span><br><span class="line">--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child  @transferuser=<span class="string">"getUser"</span> :msg=<span class="string">"msg"</span>&gt;&lt;/child&gt;  </span><br><span class="line">    &lt;p&gt;用户名为:&#123;&#123;user&#125;&#125;(我是子组件传递给父组件的数据)&lt;<span class="regexp">/p&gt;  </span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    import child from './</span>child.vue<span class="string">';</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        components: &#123;</span></span><br><span class="line"><span class="string">            child,</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data() &#123;</span></span><br><span class="line"><span class="string">            return &#123;</span></span><br><span class="line"><span class="string">                user: '</span><span class="string">',</span></span><br><span class="line"><span class="string">                msg: '</span>我是父组件传给子组件的信息<span class="string">',</span></span><br><span class="line"><span class="string">            &#125;;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods: &#123;</span></span><br><span class="line"><span class="string">            getUser(msg) &#123;</span></span><br><span class="line"><span class="string">                this.user = msg;</span></span><br><span class="line"><span class="string">                console.log(msg);</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>子组件向父组件传递数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件向父组件传递数据</span></span><br><span class="line">&lt;!--</span><br><span class="line"><span class="number">1.</span>@ : 是  v-on的简写</span><br><span class="line"><span class="number">2.</span>子组件主要通过事件传递数据给父组件</span><br><span class="line"><span class="number">3.</span>当input的值发生变化时,将username传递给parent.vue,首先声明了一个setUser,用change事件来调用setUser</span><br><span class="line"><span class="number">4.</span>在setUser中,使用了$emit来遍历transferUser事件,并返回<span class="keyword">this</span>.username,其中transferuser是一个自定义事件,功能类似一个中转,<span class="keyword">this</span>.username通过这个事件传递给父组件</span><br><span class="line">--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span&gt;用户名&lt;/</span>span&gt;</span><br><span class="line">      &lt;input v-model=<span class="string">"username"</span> @change=<span class="string">'setUser'</span>&gt;向父组件传值&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">        data() &#123;</span></span><br><span class="line"><span class="regexp">            return &#123;</span></span><br><span class="line"><span class="regexp">                username: '测试',</span></span><br><span class="line"><span class="regexp">            &#125;;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        props: &#123;</span></span><br><span class="line"><span class="regexp">            msg: &#123;</span></span><br><span class="line"><span class="regexp">                type: String,</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        methods: &#123;</span></span><br><span class="line"><span class="regexp">            setUser() &#123;</span></span><br><span class="line"><span class="regexp">                this.$emit('transferuser', this.username);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js的函数节流</title>
      <link href="/2017/08/27/2017-08-27-js%E7%9A%84%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81/"/>
      <url>/2017/08/27/2017-08-27-js%E7%9A%84%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p><img src="//upload-images.jianshu.io/upload_images/1096130-fe7e33473c926bcc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br>什么是函数节流?为什么要用到函数节流?函数节流可以解决哪写问题?<br><a id="more"></a></p><blockquote><p><a href="//www.alloyteam.com/2012/11/javascript-throttle/">函数节流</a></p></blockquote><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景:"></a>使用场景:</h4><ul><li>(1)对于常见的场景，如网页滚动时，经常会有滚动到哪时做什么样的动画效果，遂要注册onscroll事件，如何减少触发次数，到达优化性能，同时又满足效果要求不卡顿，一个是优化事件内代码，减少代码量，二就是做函数节流。</li><li>(2)在前端开发中，有时会为页面绑定resize事件，或者为一个页面元素绑定拖拽事件（其核心就是绑定mousemove），这种事件有一个特点，就是用户不必特地捣乱，他在一个正常的操作中，都有可能在一个短的时间内触发非常多次事件绑定程序。而大家知道，DOM操作时很消耗性能的，这个时候，如果你为这些事件绑定一些操作DOM节点的操作的话，那就会引发大量的计算，在用户看来，页面可能就一时间没有响应，这个页面一下子变卡了变慢了。甚至在IE下，如果你绑定的resize事件进行较多DOM操作，其高频率可能直接就使得浏览器崩溃。<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4></li><li>定时器，当触发一个事件时，先setTimeout让这个事件延迟一会再执行，如果在这个时间间隔内又触发了事件，那我们就clear掉原来的定时器，再setTimeout一个新的定时器延迟一会执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">method, context</span>) </span>&#123;</span><br><span class="line">    clearTimeout(method, tId);</span><br><span class="line">    method.tId = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        method.call(context);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     throttle(myFunc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>, args = <span class="built_in">arguments</span>;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onresize = throttle(myFunc, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttleV2 = <span class="function"><span class="keyword">function</span> (<span class="params">fn, delay, mustRunDelay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> t_start;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>, args = <span class="built_in">arguments</span>, t_curr = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        <span class="keyword">if</span>(!t_start) &#123;</span><br><span class="line">            t_start = t_curr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t_curr - t_start &gt;= mustRunDelay) &#123;</span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                fn.apply(context, args);</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onresize = throttleV2(myFunc, <span class="number">50</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js垃圾回收机制</title>
      <link href="/2017/08/27/2017-08-27-js%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2017/08/27/2017-08-27-js%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="//upload-images.jianshu.io/upload_images/4369238-b38891061c7cd794.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540/q/50" alt="title"><br>你了解javascript的垃圾回收机制么?<br><a id="more"></a></p><ul><li>引用计数<br>此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。</li></ul><p>限制：无法处理循环引用。在下面的例子中，两个对象被创建，并互相引用，形成了一个循环。它们被调用之后不会离开函数作用域，所以它们已经没有用了，可以被回收了。然而，引用计数算法考虑到它们互相都有至少一次引用，所以它们不会被回收。</p><ul><li>标记清除<br>当变量进入环境时，例如，在函数中声明一个变量，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。</li></ul><p>垃圾回收器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记（闭包）。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾回收器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个怎样都不想认输的🌹</title>
      <link href="/2017/08/26/2017-08-26-%E4%B8%8D%E6%83%B3%E5%83%8F%E7%94%9F%E6%B4%BB%E4%BD%8E%E5%A4%B4/"/>
      <url>/2017/08/26/2017-08-26-%E4%B8%8D%E6%83%B3%E5%83%8F%E7%94%9F%E6%B4%BB%E4%BD%8E%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<p><img src="//upload-images.jianshu.io/upload_images/1442902-12ed174df8fe5651?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br>毕业两个月,在北京已待了一年多,我成长了很多,无论技术,还是心理…<br><a id="more"></a><br>现在有点开始明白之前为什么一个要晚上十点下班的公司,当时面试技术过了,但是最后却要了一个男生,(最后没被面试上,那个技术面试官还特意打电话说,不是因为你技术不行,而是我们这儿加班很严重,所以综合考虑招了个男同事,让我继续💪);</p><p>连续快一个月了,每天晚上一点睡,现在感觉真的身体快吃不消了,昨天上班头疼的已坚持不住,所有跟老大说了一下,晚上八点就早点回去了,电梯里碰到了清洁工阿姨,阿姨会问,吃饭了么,又加班了么,这个点下班真的是太晚了,回去早点休息…(突然想起我妈对我的唠叨)</p><p>本来打算晚上回去就睡,躺在床上,突然想起一个解决今天复杂的数据关系的一个思路,于是爬起来打开电脑开始尝试,看了看时间,晚上9点,心里想着最晚11点一定要睡,可是写代码的过程中又遇到很多不会的问题,于是好奇心促使我弄明白我什么…</p><p>就这样过了12点…,</p><p>一点的时候,实在太困,匆忙把代码传到git上,倒头就睡…<br><img src="//upload-images.jianshu.io/upload_images/5325674-1a64ccd89f904f17.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50" alt="title"></p><p>闹钟响了,实在挣不开眼,想着再睡十分钟,一会洗漱一定不墨迹;</p><p>10分钟搞定,出门的时候看着天气不对,又赶紧找了把伞,看了一个,好,衣服没穿反,放心的找了辆小黄,骑着飞速跑起来,不好,这两车骑得有点费劲,算了,还是赶紧走吧,有辆车就不错了,路上很堵,堵到一路上都被自行车骑着走,但是心理还是很庆幸自己今天没有做公交车;</p><p>到了一个红绿灯路口,看到指挥交通的大爷,等红灯的时候大爷很热情的跟我聊天,说今天要下大雨,问我有没有带雨伞,(有一次因为胃疼差点晕倒,这位大爷看到了就扶了我一下,还打算送我去医院,说小姑娘一个人在外面要好好照顾自己,当时眼泪真的就下来了,在帝都这样冷漠的城市,有个陌生人能对你这样,突然感觉很温暖)</p><hr><p>有时候会想是不是自己老了啊,去年这会刚工作,也是每天很累,因为很多东西要学,记得当时每天晚上看书到两点,周末不加班的时候,也是推了很多’约会’,睡上一上午,然后又开始敲代码…</p><p>很累的时候,有时候真的是想放弃,有亲戚跟我打电话,说他们那儿招这种刚毕业的学计算机的,一个月刚开始5000,还给解决住房问题,问我要不要考虑回去,毕竟帝都真的很恐怖;可是我刚毕业技术还有很大的上升空间,还是北京这样的大城市技术发展比较好,更能快速成长,</p><p>有时候也会想不如拿着自己的高中教师证回去当老师,或者考个公务员,或者找的对自己好的男的,直接结婚,像很多身边的女朋友一样,然后带孩子…可是那样的生活好像一眼就能望到头,那是我喜欢的生活么?</p><p>想起当初自己为什么铁了心的要转行,当时也是能想到以后会遇到很多困难,会很累,找工作的时候,学历就是普通本科,专业又是农业,我只能靠自己过硬的技术来比过自己的竞争者.</p><p>我正在为自己想要的生活去奋斗,不想平庸的过一辈子,在外面的时候,不要把自己当成一个女生,因为生活并不会因为你是女生而对你手下留情,所有还是像个汉子一样去努力吧,我相信越努力越幸运</p><p><img src="//upload-images.jianshu.io/upload_images/4968905-11f9b598d609bff1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"></p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嘿,使用vue,你注意到了这些了么?</title>
      <link href="/2017/08/23/2017-08-23-vue%E4%B8%AD%E6%A3%80%E6%B5%8B%E4%B8%8D%E5%88%B0%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/"/>
      <url>/2017/08/23/2017-08-23-vue%E4%B8%AD%E6%A3%80%E6%B5%8B%E4%B8%8D%E5%88%B0%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><img src="//upload-images.jianshu.io/upload_images/1541368-d9be1b3b39abc037?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br>使用vue过程中,遇到了一些问题,这里先总结以下两个:<br><a id="more"></a></p><h1 id="问题一"><a href="#问题一" class="headerlink" title="问题一:"></a>问题一:</h1><p>vue组件之间传递数据,在子组件中我想改变一个从父组件中传过来的值</p><blockquote><p>这是父组件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;Child :message=<span class="string">"message"</span>&gt;&lt;/Child&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">'./child.vue'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            message: <span class="string">'这是传给子组件的信息'</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这是子组件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div @click=<span class="string">"handleChange"</span>&gt;</span><br><span class="line">      &#123;&#123;message&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">            message: &#123;</span><br><span class="line">                type: <span class="built_in">String</span>,</span><br><span class="line">                <span class="keyword">default</span>: <span class="string">'这是默认信息'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleChange() &#123;</span><br><span class="line">                <span class="keyword">this</span>.message = <span class="string">'我是子组件修改后的信息'</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>如果你这样写就会报一下错误<br><img src="https://cdn.wangyaxing.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-24%20%E4%B8%8B%E5%8D%883.12.16.png" alt="title"><br>但是在子组件中，我们不要去修改 prop。如果你必须要修改到这些数据，你可以使用以下方法：</p><ul><li>把 prop 赋值给一个局部变量，然后需要修改的话就修改这个局部变量，而不影响 prop<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div @click=<span class="string">"handleChange"</span>&gt;</span><br><span class="line">      &#123;&#123;newMessage&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">            message: &#123;</span><br><span class="line">                type: <span class="built_in">String</span>,</span><br><span class="line">                <span class="keyword">default</span>: <span class="string">'这是默认信息'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                newMessage: <span class="keyword">this</span>.message,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleChange() &#123;</span><br><span class="line">                <span class="keyword">this</span>.newMessage = <span class="string">'我是子组件修改后的信息'</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="问题二"><a href="#问题二" class="headerlink" title="问题二:"></a>问题二:</h1><p>vue中检测不到data的变化,我想把给data中的a赋值一个新的对象(添加一个它本身不存在的属性),然而经过尝试发现直接赋值是行不通的,以下是我做的一下尝试<br><!--more--><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &#123;&#123;a&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> data() &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">         a: &#123;&#125;,</span><br><span class="line">     &#125;;</span><br><span class="line"> &#125;,</span><br><span class="line"> created() &#123;</span><br><span class="line">     setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">this</span>.a.b = <span class="number">1</span>;</span><br><span class="line">     &#125;, <span class="number">1000</span>)</span><br><span class="line"> &#125;,</span><br><span class="line"> watch: &#123;</span><br><span class="line">    a(newVal, oldVal) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;oldVal&#125;</span>现在变成了<span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>上面这样写(给对象a添加一个本来不存在的属性b,并给他赋值)并不会触发watch,<br><img src="https://cdn.wangyaxing.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-24%20%E4%B8%8B%E5%8D%882.33.48.png" alt="title"></li><li><a href="https://cn.vuejs.org/v2/guide/reactivity.html#变化检测问题" target="_blank" rel="noopener">vue文档中</a>也明确表示添加到对象上的新属性不会触发更新,所以我们应该新建一个新的对象并将这个心对象的值赋值给原有的对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            a: &#123;&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.a = &#123;</span><br><span class="line">                b: <span class="number">1</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        a(newVal, oldVal) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;oldVal&#125;</span>现在变成了<span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="由此给大家拓展一个对象的一些知识"><a href="#由此给大家拓展一个对象的一些知识" class="headerlink" title="由此给大家拓展一个对象的一些知识"></a>由此给大家拓展一个对象的一些知识</h2><h3 id="tips1-js取值的两种方式的区别"><a href="#tips1-js取值的两种方式的区别" class="headerlink" title="tips1: js取值的两种方式的区别"></a>tips1: js取值的两种方式的区别</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">abc</span>:<span class="string">"ss"</span>,<span class="attr">nn</span>:<span class="number">90</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> v1 = obj.abc; <span class="comment">// 使用点的方式</span></span><br><span class="line"><span class="keyword">const</span> v2 = obj[<span class="string">"abc"</span>]; <span class="comment">// 使用中括号的方式</span></span><br></pre></td></tr></table></figure><p>在实际项目中一般使用.会方便很多,但是key是变量的话就不能使用.,js对象会理解变量为对象的key值,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v3 = obj[key];</span><br></pre></td></tr></table></figure><h3 id="tips2-对象深拷贝实现方法"><a href="#tips2-对象深拷贝实现方法" class="headerlink" title="tips2: 对象深拷贝实现方法"></a>tips2: 对象深拷贝实现方法</h3><blockquote><p> 先解释什么是深拷贝和浅拷贝</p></blockquote><ul><li>浅拷贝是对对象地址的复制,并没有开辟新的栈,复制的结果是两个对象指向同一个地址,修改其中一个对象的属性,另一个对象的属性也会改变</li><li>深拷贝是开辟新的栈,两个对象对应两个不同的地址,修改一个对象的属性,不会改变另一个对象的属性<blockquote><p>最简单的如下(方法一)</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="built_in">JSON</span>.parse( <span class="built_in">JSON</span>.stringify(a) )</span><br></pre></td></tr></table></figure><p>但是会存在一些问题</p><ul><li>无法复制函数</li><li>原型链没了，对象就是object，所属的类没了。<blockquote><p>使用递归(方法二)</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">'cehsi'</span>,</span><br><span class="line">    age: <span class="number">13</span>,</span><br><span class="line">    friends:[<span class="string">'sk'</span>,<span class="string">'ls'</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">o, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = c || &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">in</span> o) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> o[i] === <span class="string">'object'</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断是对象</span></span><br><span class="line">            <span class="keyword">if</span>(o[i].constructor === <span class="built_in">Array</span>) &#123;</span><br><span class="line">                <span class="comment">// 数组</span></span><br><span class="line">                c[i] = [];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                c[i] = &#123;&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            deepCopy(o[i], c[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c[i] = o[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">name</span>: <span class="string">'result'</span>&#125;;</span><br><span class="line">obj2 = deepCopy(obj1, obj2);</span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// &#123; name: 'cehsi', age: 13, friends: [ 'sk', 'ls' ] &#125;</span></span><br><span class="line">obj2.age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2, obj1); <span class="comment">// &#123; name: 'cehsi', age: 20, friends: [ 'sk', 'ls' ] &#125; &#123; name: 'cehsi', age: 13, friends: [ 'sk', 'ls' ] &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.npmjs.com/package/deepcopy" target="_blank" rel="noopener">使用npm install deepcopy</a></p></blockquote><h3 id="tips3-深对比-方法参考-http-stackoverflow-com-questions-1068834-object-comparison-in-javascript"><a href="#tips3-深对比-方法参考-http-stackoverflow-com-questions-1068834-object-comparison-in-javascript" class="headerlink" title="tips3: 深对比,方法参考 http://stackoverflow.com/questions/1068834/object-comparison-in-javascript"></a>tips3: 深对比,方法参考 <a href="http://stackoverflow.com/questions/1068834/object-comparison-in-javascript" target="_blank" rel="noopener">http://stackoverflow.com/questions/1068834/object-comparison-in-javascript</a></h3><blockquote><p>方法一:Object.toJSON()</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个方法简单,但是只适用于两个对象属性相同的情况,在没有方法和DOM节点的情况下，您可以使用简单的JSON样式对象：</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj3 = &#123;</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1) === <span class="built_in">JSON</span>.stringify(obj2)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1) === <span class="built_in">JSON</span>.stringify(obj3)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p>方法二: 深度比较两个对象</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比较对象而不挖掘原型，然后递归地比较属性的投影，还可以比较构造函数。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCompare</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, l, leftChain, rightChain;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">compare2Objects</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// remember that NaN === NaN returns false</span></span><br><span class="line">        <span class="comment">// and isNaN(undefined) returns true</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isNaN</span>(x) &amp;&amp; <span class="built_in">isNaN</span>(y) &amp;&amp; <span class="keyword">typeof</span> x === <span class="string">'number'</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">'number'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Compare primitives and functions.     </span></span><br><span class="line">        <span class="comment">// Check if both arguments link to the same object.</span></span><br><span class="line">        <span class="comment">// Especially useful on the step where we compare prototypes</span></span><br><span class="line">        <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Works in case when functions are created in constructor.</span></span><br><span class="line">        <span class="comment">// Comparing dates is a common scenario. Another built-ins?</span></span><br><span class="line">        <span class="comment">// We can even handle functions passed across iframes</span></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">typeof</span> x === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">'function'</span>) ||</span><br><span class="line">            (x <span class="keyword">instanceof</span> <span class="built_in">Date</span> &amp;&amp; y <span class="keyword">instanceof</span> <span class="built_in">Date</span>) ||</span><br><span class="line">            (x <span class="keyword">instanceof</span> <span class="built_in">RegExp</span> &amp;&amp; y <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) ||</span><br><span class="line">            (x <span class="keyword">instanceof</span> <span class="built_in">String</span> &amp;&amp; y <span class="keyword">instanceof</span> <span class="built_in">String</span>) ||</span><br><span class="line">            (x <span class="keyword">instanceof</span> <span class="built_in">Number</span> &amp;&amp; y <span class="keyword">instanceof</span> <span class="built_in">Number</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> x.toString() === y.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// At last checking prototypes as good as we can</span></span><br><span class="line">        <span class="keyword">if</span> (!(x <span class="keyword">instanceof</span> <span class="built_in">Object</span> &amp;&amp; y <span class="keyword">instanceof</span> <span class="built_in">Object</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x.isPrototypeOf(y) || y.isPrototypeOf(x)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x.constructor !== y.constructor) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x.prototype !== y.prototype) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check for infinitive linking loops</span></span><br><span class="line">        <span class="keyword">if</span> (leftChain.indexOf(x) &gt; <span class="number">-1</span> || rightChain.indexOf(y) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Quick checking of one object being a subset of another.</span></span><br><span class="line">        <span class="comment">// todo: cache the structure of arguments[0] for performance</span></span><br><span class="line">        <span class="keyword">for</span> (p <span class="keyword">in</span> y) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> y[p] !== <span class="keyword">typeof</span> x[p]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (p <span class="keyword">in</span> x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> y[p] !== <span class="keyword">typeof</span> x[p]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (<span class="keyword">typeof</span>(x[p])) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'object'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'function'</span>:</span><br><span class="line"></span><br><span class="line">                    leftChain.push(x);</span><br><span class="line">                    rightChain.push(y);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!compare2Objects(x[p], y[p])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    leftChain.pop();</span><br><span class="line">                    rightChain.pop();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">if</span> (x[p] !== y[p]) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//Die silently? Don't know how to handle such case, please help...</span></span><br><span class="line">        <span class="comment">// throw "Need two or more arguments to compare";</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line"></span><br><span class="line">        leftChain = []; <span class="comment">//Todo: this can be cached</span></span><br><span class="line">        rightChain = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!compare2Objects(<span class="built_in">arguments</span>[<span class="number">0</span>], <span class="built_in">arguments</span>[i])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>已知问题（他们的优先级很低，可能你永远不会注意到）</p></li><li><p>具有不同原型结构但相同投影的物体</p></li><li>函数可能具有相同的文本，但是指的是不同的闭包原型</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>揭开vue神秘面纱</title>
      <link href="/2017/08/20/2017-08-20-%E6%8F%AD%E5%BC%80vue%E7%A5%9E%E7%A7%98%E9%9D%A2%E7%BA%B1/"/>
      <url>/2017/08/20/2017-08-20-%E6%8F%AD%E5%BC%80vue%E7%A5%9E%E7%A7%98%E9%9D%A2%E7%BA%B1/</url>
      
        <content type="html"><![CDATA[<p><img src="//upload-images.jianshu.io/upload_images/1541368-d9be1b3b39abc037?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br>带你一步一步走进vue<br><a id="more"></a></p><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p><a href="https://github.com/funnycoderstar/vue-demo" target="_blank" rel="noopener">源码</a><br><a href="http://wangyaxing.deercv.com/" target="_blank" rel="noopener">aboutme</a><br><a href="https://github.com/funnycoderstar" target="_blank" rel="noopener">github</a><br><a href="https://github.com/funnycoderstar/blog" target="_blank" rel="noopener">blog</a></p><h4 id="实现过程-直接上代码"><a href="#实现过程-直接上代码" class="headerlink" title="实现过程,直接上代码"></a>实现过程,直接上代码</h4><h5 id="1-实现简单的v-model的绑定"><a href="#1-实现简单的v-model的绑定" class="headerlink" title="1,实现简单的v-model的绑定"></a>1,实现简单的v-model的绑定</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">v-model</span>=<span class="string">"a"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>可以打开控制台,然后输入vm.查看view到model的绑定;然后改变input的值,再次在控制台输出vm.查看model到view的绑定<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="https://cdn.bootcss.com/vue/2.4.2/vue.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                b: 10000,</span><br><span class="line">                a: 1</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            el: <span class="string">'#input'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">            vm.a++;</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.querySelector(data.el);</span><br><span class="line">    <span class="keyword">let</span> model = input.getAttribute(<span class="string">'v-model'</span>);</span><br><span class="line">    <span class="keyword">if</span>(!data.data) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">`你没有定义data`</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(model &amp;&amp; data.data.hasOwnProperty(model))&#123;</span><br><span class="line">        <span class="comment">// 实现model到view的绑定</span></span><br><span class="line">        input.value = data.data[model];</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, model, &#123;</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            <span class="keyword">get</span>: function() &#123;</span><br><span class="line">                <span class="keyword">return</span> data.data[model];</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">set</span>: function(newVal) &#123;</span><br><span class="line"></span><br><span class="line">                input.value = data.data[model] = newVal;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 实现view到model的绑定</span></span><br><span class="line">        input.addEventListener(<span class="string">"input"</span>, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>[model] = input.value;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">`你没有定义<span class="subst">$&#123;model&#125;</span>属性`</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>把一个普通 JavaScript 对象传给 Vue 实例的 data<br>选项，Vue 将遍历此对象所有的属性，并使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">Object.defineProperty</a> 把这些属性全部转为 getter/setter。</li><li>给input添加oninput事件实现view到model的绑定,即在input中输入一个值,vm.a也会跟着发生变化</li></ul><h5 id="2-实现多个v-model的绑定"><a href="#2-实现多个v-model的绑定" class="headerlink" title="2,实现多个v-model的绑定"></a>2,实现多个v-model的绑定</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"b"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"c"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="https://cdn.bootcss.com/vue/2.4.2/vue.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                a: 0,</span><br><span class="line">                b: 100,</span><br><span class="line">                c: 2,</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            el: <span class="string">'#form'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.querySelectorAll(<span class="string">'input'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> input) &#123;</span><br><span class="line">        <span class="keyword">let</span> model = item.getAttribute(<span class="string">'v-model'</span>);</span><br><span class="line">        item.value = data.data[model];</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, model, &#123;</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            <span class="keyword">get</span>: function () &#123;</span><br><span class="line">                <span class="keyword">return</span> data.data[model];</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">set</span>: function (newVal) &#123;</span><br><span class="line">                item.value = data.data[model] = newVal;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        item.addEventListener(<span class="string">"input"</span>, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>[model] = item.value;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现原理个实现一个v-model差不多</li></ul><h5 id="3-实现模板的绑定"><a href="#3-实现模板的绑定" class="headerlink" title="3,实现模板的绑定"></a>3,实现模板的绑定</h5><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; a  &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"b"</span> /&gt;</span></span><br><span class="line">        &#123;&#123; b &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"c"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; c  &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; c  &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="https://cdn.bootcss.com/vue/2.4.2/vue.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                a: 0,</span><br><span class="line">                b: 100,</span><br><span class="line">                c: 2,</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            el: <span class="string">'#form'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(vm);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>用正则匹配到html中的模板字符串,然后将相应的部分替换成变量</p></li><li>匹配html中多个模板,必须先了解dom的结构<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.querySelectorAll(<span class="string">'input'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> input) &#123;</span><br><span class="line">        <span class="keyword">let</span> model = item.getAttribute(<span class="string">'v-model'</span>);</span><br><span class="line">        item.value = data.data[model];</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, model, &#123;</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            <span class="keyword">get</span>: function () &#123;</span><br><span class="line">                <span class="keyword">return</span> data.data[model];</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">set</span>: function (newVal) &#123;</span><br><span class="line">                item.value = data.data[model] = newVal;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        item.addEventListener(<span class="string">"input"</span>, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>[model] = item.value;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> pss = <span class="built_in">document</span>.querySelector(data.el).childNodes;</span><br><span class="line">    <span class="keyword">let</span> ps = [];</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = value.length; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value[i].nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">                getText(value[i].childNodes);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value[i].nodeType === <span class="number">3</span>) &#123;</span><br><span class="line">                ps.push(value[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    getText(pss);</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/&#123;&#123;(.*)&#125;&#125;/</span>;</span><br><span class="line">    ps.forEach(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (reg.test(i.nodeValue)) &#123;</span><br><span class="line">            arr.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> p <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="keyword">let</span> $p = reg.exec(p.nodeValue)[<span class="number">0</span>].slice(<span class="number">2</span>, p.nodeValue.length - <span class="number">2</span>).replace(<span class="regexp">/\s/g</span>, <span class="string">''</span>);</span><br><span class="line">        p.nodeValue = data.data[$p];</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, $p, &#123;</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            <span class="keyword">get</span>: function () &#123;</span><br><span class="line">                <span class="keyword">return</span> data.data[$p];</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">set</span>: function (newVal) &#123;</span><br><span class="line">                p.nodeValue = data.data[$p] = newVal;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错在多次赋值被覆盖的错误,所以思路应该变为找到所有绑定a, b, c的值,然后统一赋值</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="4-实现v-bind-v-on的绑定"><a href="#4-实现v-bind-v-on的绑定" class="headerlink" title="4,实现v-bind,v-on的绑定"></a>4,实现v-bind,v-on的绑定</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是测试v-model的效果<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是测试&#123;&#123;&#125;&#125;的效果<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; a &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; a &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; a &#125;&#125;&#123;&#123; b &#125;&#125; <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"b"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; b &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"c"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; c &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是测试v-bind和v-on的效果<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"src"</span> <span class="attr">v-bind:width</span>=<span class="string">"width1"</span> <span class="attr">:height</span>=<span class="string">"height"</span> <span class="attr">v-on:click</span>=<span class="string">"log"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>打开控制台,点击img,查看v-on的绑定效果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="https://cdn.bootcss.com/vue/2.4.2/vue.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.obj = &#123;</span></span><br><span class="line">            a: 0,</span><br><span class="line">            b: 100,</span><br><span class="line"><span class="javascript">            c: <span class="string">'这是测试'</span>,</span></span><br><span class="line"><span class="javascript">            src: <span class="string">"http://cdn.suisuijiang.com/message_1492395396308.png?imageView2/2/w/40/h/40"</span>,</span></span><br><span class="line">            width1: 100,</span><br><span class="line">            height: 100,</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#form'</span>,</span></span><br><span class="line">            data: obj,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="javascript">                log: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'你点击了图片'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">`当前c的值为 <span class="subst">$&#123;<span class="keyword">this</span>.c&#125;</span>`</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code class="js"><span class="comment">/**</span><span class="comment"> * 解析dom指令</span><span class="comment"> * @param {*} $dom 根节点</span><span class="comment"> * @param {*} instructs 解析结果</span><span class="comment"> */</span><span class="function"><span class="keyword">function</span> <span class="title">handleInstruct</span>(<span class="params">$dom, instructs = {}</span>) </span>{    <span class="function"><span class="keyword">function</span> <span class="title">addInstruct</span>(<span class="params">model, type, $node</span>) </span>{        <span class="keyword">if</span> (instructs[model]) {            <span class="keyword">if</span> (instructs[model][type]) {                instructs[model][type].push($node);            } <span class="keyword">else</span> {                instructs[model][type] = [$node];            }        } <span class="keyword">else</span> {            instructs[model] = {                [type]: [$node]            };        }    }    <span class="keyword">if</span> ($dom.attributes) {        <span class="keyword">for</span> (<span class="keyword">const</span> attr <span class="keyword">of</span> $dom.attributes) {            <span class="keyword">if</span> (attr.name === <span class="string">'v-model'</span>) {                <span class="keyword">const</span> model = $dom.getAttribute(<span class="string">'v-model'</span>);                addInstruct(model, <span class="string">'model'</span>, $dom);            } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^(v-bind|:)/</span>.test(attr.nodeName)) {                <span class="keyword">const</span> parseResult = attr.nodeName.match(<span class="regexp">/^(?:v-bind)?:([a-zA-Z_$][a-zA-Z0-9_$]*)/</span>);                <span class="keyword">if</span> (parseResult &amp;&amp; parseResult[<span class="number">1</span>]) {                    addInstruct(attr.nodeValue.trim(), <span class="string">'bind'</span>, {                        $dom,                        attr: parseResult[<span class="number">1</span>]                    });                }            } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^(v-on|@)/</span>.test(attr.name)) {                <span class="keyword">const</span> parseResult = attr.name.match(<span class="regexp">/^(?:v-on:|@)?([a-zA-Z_$][a-zA-Z0-9_$]*)/</span>);                <span class="keyword">if</span> (parseResult &amp;&amp; parseResult[<span class="number">1</span>]) {                    addInstruct(attr.nodeValue.trim(), <span class="string">'on'</span>, {                        $dom,                        event: parseResult[<span class="number">1</span>]                    });                }            }        }    }    <span class="keyword">if</span> ($dom.childNodes) {        <span class="keyword">for</span> (<span class="keyword">const</span> $child <span class="keyword">of</span> $dom.childNodes) {            <span class="keyword">switch</span> ($child.nodeType) {                <span class="comment">// ELEMENT_NODE</span>                <span class="keyword">case</span> <span class="number">1</span>: {                    handleInstruct($child, instructs);                    <span class="keyword">break</span>;                }                <span class="comment">// TEXT_NODE</span>                <span class="keyword">case</span> <span class="number">3</span>: {                    <span class="keyword">const</span> parseResult = $child.data.match(<span class="regexp">/{{[ ]*([a-zA-Z_$][a-zA-Z0-9_$]*)[ ]*}}/g</span>);                    <span class="keyword">if</span> (parseResult) {                        parseResult.forEach(<span class="function"><span class="params">x</span> =&gt;</span> {                            <span class="keyword">const</span> model = x.match(<span class="regexp">/[a-zA-Z_$][a-zA-Z0-9_$]*/</span>);                            <span class="keyword">if</span> (model) {                                addInstruct(model, <span class="string">'expression'</span>, {                                    $dom: $child,                                    exp: $child.data                                });                            }                        });                    }                    <span class="keyword">break</span>;                }                <span class="keyword">default</span>:                    <span class="keyword">break</span>;            }        }    }    <span class="keyword">return</span> instructs;}<span class="function"><span class="keyword">function</span> <span class="title">updateDom</span>(<span class="params">vm, instructs, model, shouldRegisterEvent = false</span>) </span>{    <span class="comment">// 实现v-model的绑定</span>    <span class="keyword">if</span> (instructs[model].model) {        <span class="keyword">for</span> (<span class="keyword">const</span> $el <span class="keyword">of</span> instructs[model].model) {            $el.value =  vm[model];            <span class="keyword">if</span> (shouldRegisterEvent) {                $el.oninput = <span class="function"><span class="params">()</span> =&gt;</span> {                    <span class="keyword">this</span>[model] = $el.value;                };            }        }    }    <span class="comment">// 实现{{}}的绑定</span>    <span class="keyword">if</span> (instructs[model].expression) {        <span class="keyword">for</span> (<span class="keyword">let</span> { $dom, exp } <span class="keyword">of</span> instructs[model].expression) {            <span class="keyword">const</span> parseResult = exp.match(<span class="regexp">/{{[ ]*([a-zA-Z_$][a-zA-Z0-9_$]*)[ ]*}}/g</span>);            <span class="keyword">if</span> (parseResult) {                parseResult.forEach(<span class="function"><span class="params">x</span> =&gt;</span> {                    <span class="keyword">const</span> m = x.match(<span class="regexp">/[a-zA-Z_$][a-zA-Z0-9_$]*/</span>);                    <span class="keyword">if</span> (m) {                        exp = exp.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`{{[ ]*${m[0]}[ ]*}}`</span>), vm[m[<span class="number">0</span>]]);                    }                });            }            $dom.textContent = exp;        }    }    <span class="comment">// 实现v-bind的绑定</span>    <span class="keyword">if</span> (instructs[model].bind) {        <span class="keyword">for</span> (<span class="keyword">const</span> {$dom, attr} <span class="keyword">of</span> instructs[model].bind) {            $dom.setAttribute(attr, vm[model]);        }    }}<span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">params</span>) </span>{    <span class="keyword">const</span> $dom = <span class="built_in">document</span>.querySelector(params.el);    <span class="keyword">if</span> (!$dom) {        <span class="built_in">console</span>.error(<span class="string">`dom "<span class="subst">${params.el}</span>" not exist`</span>);        <span class="keyword">return</span>;    }    <span class="keyword">const</span> vm = {};    <span class="keyword">const</span> instructs = handleInstruct($dom);    <span class="comment">// console.log(instructs);</span>    <span class="keyword">for</span> (<span class="keyword">const</span> model <span class="keyword">in</span> instructs) {        <span class="keyword">if</span> (model &amp;&amp; params.data &amp;&amp; <span class="built_in">Object</span>.prototype.hasOwnProperty.call(params.data, model)) {            vm[model] = params.data[model];            <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, model, {                <span class="keyword">get</span>: function() {                    <span class="keyword">return</span> vm[model];                },                <span class="keyword">set</span>: function(newValue) {                    vm[model] = newValue;                    updateDom(vm, instructs, model);                }            });            updateDom.call(<span class="keyword">this</span>, vm, instructs, model, <span class="literal">true</span>);        }        <span class="comment">// 实现v-on的绑定</span>        <span class="keyword">if</span> (instructs[model].on) {            <span class="keyword">for</span> (<span class="keyword">const</span> { $dom, event } <span class="keyword">of</span> instructs[model].on) {                $dom.addEventListener(event, params.methods[model].bind(<span class="keyword">this</span>));            }        }    }}<span class="built_in">window</span>.Vue = Vue;</code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for in vs for of</title>
      <link href="/2017/07/03/2017-07-03-for-in-vs-for-of/"/>
      <url>/2017/07/03/2017-07-03-for-in-vs-for-of/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=1652442167,4081781189&amp;fm=173&amp;s=67CAF30748133CC46E9D988C0300F083&amp;w=630&amp;h=379&amp;img.JPEG" alt="title"><br><a id="more"></a></p><h3 id="for-in-和-for-of-的区别"><a href="#for-in-和-for-of-的区别" class="headerlink" title="for in 和 for of 的区别"></a>for in 和 for of 的区别</h3><ul><li><p>for in 更适合遍历对象，不要使用for in 遍历数组</p></li><li><p>for in 遍历的是数组的索引(即键名)，而for of 遍历的是数组元素值</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.methods = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line">使用<span class="keyword">for</span> <span class="keyword">in</span> 遍历对象的键名</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> myObject) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(key);</span><br><span class="line"> &#125;</span><br><span class="line"> a</span><br><span class="line"> b</span><br><span class="line"> c</span><br><span class="line"> methods</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">in</span> 可以遍历到myObject的原型方法methods，如果不想遍历原型方法和属性的话.可以用hasOwnPropery方法可以判断某属性是否是该对象的实例属性</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> myObject) &#123;</span><br><span class="line">     <span class="keyword">if</span>(myObject.hasOwnProperty(key))&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(key);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> a</span><br><span class="line"> b</span><br><span class="line"> c</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(myObject));  [ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ]</span><br><span class="line"><span class="built_in">Object</span>.keys(myObject).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key, index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, myObject[key]);</span><br><span class="line">&#125;)</span><br><span class="line"> a <span class="number">1</span></span><br><span class="line"> b <span class="number">2</span></span><br><span class="line"> c <span class="number">3</span></span><br><span class="line"> 同样可以通过ES5的<span class="built_in">Object</span>.keys(myObject)获取对象的实例属性组成的数组，不包括原型方法和属性。</span><br></pre></td></tr></table></figure><ul><li>for of 用来遍历数组的值</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中scroll的用法</title>
      <link href="/2017/06/23/2017-06-23-vue-scroll/"/>
      <url>/2017/06/23/2017-06-23-vue-scroll/</url>
      
        <content type="html"><![CDATA[<p><img src="//upload-images.jianshu.io/upload_images/1541368-d9be1b3b39abc037?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    scrolled: <span class="literal">false</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  handleScroll () &#123;</span><br><span class="line">    <span class="keyword">this</span>.scrolled = <span class="built_in">window</span>.scrollY &gt; <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">created () &#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.handleScroll);</span><br><span class="line">&#125;,</span><br><span class="line">destroyed () &#123;</span><br><span class="line">  <span class="built_in">window</span>.removeEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.handleScroll);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程之尾调用</title>
      <link href="/2017/06/01/2017-06-01-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B0%BE%E8%B0%83%E7%94%A8/"/>
      <url>/2017/06/01/2017-06-01-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B0%BE%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="//www.ruanyifeng.com/blogimg/asset/2017/bg2017022201.jpg" alt="title"><br><a id="more"></a></p><h2 id="尾调用，就是在函数的最后一步调用另一个函数"><a href="#尾调用，就是在函数的最后一步调用另一个函数" class="headerlink" title="尾调用，就是在函数的最后一步调用另一个函数"></a>尾调用，就是在函数的最后一步调用另一个函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> g(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尾调用不一定出现在函数尾部，只要是最后一步操作就行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> m(x)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数m和n都属于尾调用，他们都是函数的最后一步操作</p><h2 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h2><p>函数调用会在内存形成一个’调用记录‘，保存调用位置和内部变量等信息，如果在A函数中调用B函数，在A函数的调用记录上还会形成一个B的调用记录，等到B函数运行结束后，把结果返回到A，B的调用记录才会消失。如果函数B内部还调用C函数，那就是还有一个C的调用记录栈，以此类推，所有的调用记录，就会形成一个’调用栈‘。</p><p>尾调用在于它特殊的调用位置。由于是函数最后一步操作，所以不需要保留外层函数的调用记录，因为调用位置和内部变量都不会再用到了。</p><p>’尾调用优化‘，只调用内层函数的调用记录。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用记录只有一项，这将大大节省内存。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-redux</title>
      <link href="/2017/05/24/2017-05-24-react-redux/"/>
      <url>/2017/05/24/2017-05-24-react-redux/</url>
      
        <content type="html"><![CDATA[<p><img src="//www.ruanyifeng.com/blogimg/asset/2016/bg2016092101.jpg" alt="title"><br><a id="more"></a></p><h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><p>redux的三个概念: action reducer store</p><ul><li>action: 一个包含type的object, 通常把一个返回action对象的函数称为action函数, 直接简称为action</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'Action1'</span>,</span><br><span class="line">        data,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>reducer: 一个根据action type来更新数据的函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = &#123; data: <span class="number">1</span> &#125;, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'action1'</span>: &#123;</span><br><span class="line">            <span class="keyword">const</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</span><br><span class="line">            <span class="keyword">return</span> newState;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'action2'</span>: &#123;</span><br><span class="line">             <span class="keyword">const</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</span><br><span class="line">             <span class="keyword">return</span> newState;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>store: 使用createStore从reducer函数创建的数据对象, 包含getState和dispatch方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(reducer);</span><br><span class="line"><span class="built_in">console</span>.log(store.getState())</span><br><span class="line"></span><br><span class="line">store.dispatch(action(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">console</span>.log(store.getState())</span><br></pre></td></tr></table></figure><p><em>注意! 更新数据需要dispatch对应的action</em></p><h2 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h2><p>用于将redux于react结合</p><ul><li>Provider: 顶层组件, 注入store对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line">ReactDom.render(</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">    document.getElementById('app'),</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><ul><li>connect: 工具函数, 参数一为函数, 该函数接收state, 返回一个对象, 对象包含一系列数据. 参数二为函数, 该函数接收dispatch, 返回一个对象, 对象包含一系列方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.props.dispatch(&#123;</span><br><span class="line">            type: <span class="string">'action1'</span>,</span><br><span class="line">            data: <span class="number">1</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="comment">// this.props.func1();</span></span><br><span class="line">        <span class="comment">// this.props.func2();</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">            &lt;<span class="regexp">/div &gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default connect(</span></span><br><span class="line"><span class="regexp">    state =&gt; (&#123;</span></span><br><span class="line"><span class="regexp">        data: state.data,</span></span><br><span class="line"><span class="regexp">        obj: state.obj,</span></span><br><span class="line"><span class="regexp">    &#125;),</span></span><br><span class="line"><span class="regexp">    dispatch =&gt; (&#123; dispatch &#125;),</span></span><br><span class="line"><span class="regexp">)(App);</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="immutable-js"><a href="#immutable-js" class="headerlink" title="immutable.js"></a>immutable.js</h2><p>特殊的object(MAP)/array(LIST)</p><ul><li>更新数据: set setIn update updateIn</li><li>读取数据: get getIn</li><li>可以直接比较(深层比较)</li><li>创建(fromJS), 还原(toJS)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">上述的reducer可以用下面的代码优化</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = immutable.fromJS(&#123; data: <span class="number">1</span>, obj: &#123; aa: <span class="number">1</span> &#125; &#125;</span>), <span class="title">action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'action1'</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> state.set(<span class="string">'data'</span>, action.data * <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'action2'</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> state.setIn([<span class="string">'obj'</span>, <span class="string">'aa'</span>], action.data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>无需深复制, 更新数据自动返回一个新对象</li><li>适合与react shouldComponentUpdate结合来优化性能</li></ul><h2 id="pure-render-decorator"><a href="#pure-render-decorator" class="headerlink" title="pure-render-decorator"></a>pure-render-decorator</h2><p>自动创建shouldComponentUpdate的工具, 需要配置babel decorator特性才能使用</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue全家桶+crawler+koa2 实现阴阳师小助手</title>
      <link href="/2017/05/20/2017-05-20-vue%E5%85%A8%E5%AE%B6%E6%A1%B6-crawler-koa2-%E5%AE%9E%E7%8E%B0%E9%98%B4%E9%98%B3%E5%B8%88%E5%B0%8F%E5%8A%A9%E6%89%8B/"/>
      <url>/2017/05/20/2017-05-20-vue%E5%85%A8%E5%AE%B6%E6%A1%B6-crawler-koa2-%E5%AE%9E%E7%8E%B0%E9%98%B4%E9%98%B3%E5%B8%88%E5%B0%8F%E5%8A%A9%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1502713315793&amp;di=f4c278533dc65215060e4dd216b01a20&amp;imgtype=0&amp;src=http%3A%2F%2Fupload.chinaz.com%2F2016%2F0928%2F6361065295044373028726125.png" alt="title"><br>最近一直在玩阴阳师，看了好多小助手，觉得太复杂了，还得登录什么的，想着自己写一个简单的小助手，只要输入要搜索的式神，我想知道的关于这个式神的数据就能显示出来。<br>只是第一版，前端用vue全家桶实现的，很适合刚开始接触vue的，后端用node实现的，如果有更好的建议或者想一起合作写个更好用点的，欢迎联系 <a href="https://github.com/funnycoderstar/yys-fe" target="_blank" rel="noopener">作者</a>。<br><a id="more"></a></p><h1 id="yys-fe-阴阳师小助手前端"><a href="#yys-fe-阴阳师小助手前端" class="headerlink" title="yys-fe(阴阳师小助手前端)"></a>yys-fe(阴阳师小助手前端)</h1><blockquote><p>A Vue.js project</p></blockquote><h3 id="github"><a href="#github" class="headerlink" title="github"></a><a href="https://github.com/funnycoderstar/yys-fe" target="_blank" rel="noopener">github</a></h3><h3 id="项目链接"><a href="#项目链接" class="headerlink" title="项目链接"></a><a href="http://yys.wangyaxing.cn/#/" target="_blank" rel="noopener">项目链接</a></h3><p><img src="//upload-images.jianshu.io/upload_images/3297464-bcc37825a913c8ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="阴阳师小助手后端实现"><a href="#阴阳师小助手后端实现" class="headerlink" title="阴阳师小助手后端实现"></a><a href="https://github.com/funnycoderstar/yys-be" target="_blank" rel="noopener">阴阳师小助手后端实现</a></h3><ul><li>nodejs + crawler + koa2 + mongoose</li></ul><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="//upload-images.jianshu.io/upload_images/3297464-7c42da95d346c282.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="search.png"></p><p><img src="//upload-images.jianshu.io/upload_images/3297464-3e76f027626a4124.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="searchResult.png"></p><p><img src="//upload-images.jianshu.io/upload_images/3297464-c776e7602061a23a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="heroList.png"></p><p><img src="//upload-images.jianshu.io/upload_images/3297464-c266c0669e263d00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="heroTab.png"></p><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><pre><code>- 构建工具：webpack；- 语言：Es6；- 代码规范：eslint- 应用：vue，     vuex（数据管理架构），     vue-router（路由），     mint-ui（ul组件），     vue-axios（vue做的ajax请求）</code></pre><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">|-- [build]                          //构建服务和webpack配置</span><br><span class="line">|-- [config]                        //项目不同环境的配置</span><br><span class="line">|-- [dist]                            //文件服务器根目录  </span><br><span class="line">|-- [node_modules]          //项目依赖</span><br><span class="line">|-- [src]                             //源码</span><br><span class="line">|   |-- [assets]                    //资源文件</span><br><span class="line">|   |-- [components]           //项目模块文件夹</span><br><span class="line">|   |-- [store]                      //存储数据</span><br><span class="line">|   |       |-- index.js            //vuex store 定义</span><br><span class="line">|   |-- App.vue                   //主页面   </span><br><span class="line">|   |-- main.js                     //webpack预编译入口</span><br><span class="line">|   |-- [router]                     //全局路由定义</span><br><span class="line">|-- .babelrc                       //babel配置</span><br><span class="line">|-- .eslintrc.js                    //eslint rule 定义</span><br><span class="line">|-- index.html                    //项目入口文件</span><br><span class="line">|-- package.json               //项目配置文件</span><br><span class="line">|-- README.md               //关于启动项目的命令和含义</span><br></pre></td></tr></table></figure><h2 id="已经完成的模块"><a href="#已经完成的模块" class="headerlink" title="已经完成的模块"></a>已经完成的模块</h2><ul><li style="list-style: none"><input type="checkbox" checked> 式神搜索页面(支持模糊搜索)</li><li style="list-style: none"><input type="checkbox" checked> 式神搜索结果页面</li><li style="list-style: none"><input type="checkbox" checked> 式神列表页面</li><li style="list-style: none"><input type="checkbox" checked> 式神详细信息页面</li><li>[X] 推荐御魂</li><li>[X] 推荐搭配</li><li>[X] 式神点评</li></ul><h2 id="待完成与优化"><a href="#待完成与优化" class="headerlink" title="待完成与优化"></a>待完成与优化</h2><ul><li style="list-style: none"><input type="checkbox"> 搜索功能添加历史搜索和热门搜索</li><li style="list-style: none"><input type="checkbox"> 式神攻略</li><li style="list-style: none"><input type="checkbox"> 式神视频</li><li style="list-style: none"><input type="checkbox"> 页面样式的优化</li></ul><h2 id="Build-Setup"><a href="#Build-Setup" class="headerlink" title="Build Setup"></a>Build Setup</h2><p><code>`</code> bash</p><h1 id="install-dependencies"><a href="#install-dependencies" class="headerlink" title="install dependencies"></a>install dependencies</h1><p>npm install</p><h1 id="serve-with-hot-reload-at-localhost-8080"><a href="#serve-with-hot-reload-at-localhost-8080" class="headerlink" title="serve with hot reload at localhost:8080"></a>serve with hot reload at localhost:8080</h1><p>npm run dev</p><h1 id="build-for-production-with-minification"><a href="#build-for-production-with-minification" class="headerlink" title="build for production with minification"></a>build for production with minification</h1><p>npm run build</p><p>关于用vue时遇到的坑，记录在我的<a href="https://github.com/funnycoderstar/blog/issues?utf8=%E2%9C%93&amp;q=vue" target="_blank" rel="noopener">博客</a>,希望可以对大家有用<br>目前小编在学react，所以用<a href="https://github.com/funnycoderstar/yys_v2" target="_blank" rel="noopener">react也写了一版</a>,所以刚开始接触react的童鞋也可以看一下，想着第二版的ui设计的好看一点儿，功能再多一点儿，期待更多的建议。</p><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p><a href="https://github.com/funnycoderstar" target="_blank" rel="noopener">github</a><br><a href="https://github.com/funnycoderstar/blog" target="_blank" rel="noopener">blog</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2017/05/03/2017-05-03-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2017/05/03/2017-05-03-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="//www.runoob.com/wp-content/uploads/2015/09/1240" alt="title"><br>所谓排序，就是使一串记录，按照其中的某个或某些关键字的大小，递增或递减的排列起来的操作。排序算法，就是如何使得记录按照要求排列的方法。排序算法在很多领域得到相当地重视，尤其是在大量数据的处理方面。<br><a id="more"></a></p><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><ul><li>冒泡算法</li><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;        <span class="comment">//相邻元素两两对比</span></span><br><span class="line">                <span class="keyword">var</span> temp = arr[j+<span class="number">1</span>];        <span class="comment">//元素交换</span></span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bubbleSort([<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">3</span>]));</span><br></pre></td></tr></table></figure></li><li><p>快速排序,通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> leftArr = [];</span><br><span class="line">    <span class="keyword">let</span> rightArr = [];</span><br><span class="line">    <span class="keyword">let</span> q = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i&lt;arr.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; q) &#123;</span><br><span class="line">            rightArr.push(arr[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            leftArr.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [].concat(quickSort(leftArr),[q],quickSort(rightArr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(quickSort([<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">3</span>]));</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端拿高薪必看面试题</title>
      <link href="/2017/05/02/2017-05-02-js%E7%BB%8F%E5%85%B8%E7%AC%94%E8%AF%95%E9%A2%98/"/>
      <url>/2017/05/02/2017-05-02-js%E7%BB%8F%E5%85%B8%E7%AC%94%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.suisuijiang.com/ImageMessage/5adad39555703565e79040fa_1536163114058.png?width=900&amp;height=561&amp;imageView2/3/w/537/h/334" alt="title"><br>面试之前都会从网上找很多面试题来看,尤其是看到经典面试题,及必会的面试题,都是好好的看上几遍(其实更多的时候都是在背),可是总感觉面试之前看题作用并不大,因为你不理解的问题,还是会不理解,面试管随便一问,就不行了.其实面试几次后就会发现,经常问的问题也就那几个,比如,闭包,原型链,this,等.刚开始的时候真的是理解不了,然后就看书,强烈推荐<code>《javascript高级程序设计(第三版)》</code>以及<code>《你不知道的javascript系列》</code>,在实际项目中遇到坑的时候,就反复看,看的时候很难受,但是当真正理解了之后,就会恍然大悟,所以功夫还是下在平时,临时抱佛脚真的没啥用~</p><blockquote><p>以下是我总结的面试题中常问到的,很多都是<code>我亲身经历的面试</code>中遇到的一些问题,刚开始遇到的时候也不是太清楚,面试完之后就深入的学习了一下相关的知识😜</p></blockquote><a id="more"></a><h3 id="1-考察this"><a href="#1-考察this" class="headerlink" title="1,考察this"></a>1,考察this</h3> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> length = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  length: <span class="number">5</span>,</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    fn();</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>]();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.method(fn, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>10 ，2</li><li>第一次输出10应该没有问题。我们知道取对象属于除了点操作符还可以用中括号，所以第二次执行时相当于arguments调用方法，this指向arguments，而这里传了两个参数，故输出arguments长度为2。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> length = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  length: <span class="number">5</span>,</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    fn();</span><br><span class="line">    <span class="keyword">const</span> fun = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    fun()；</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.method(fn, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>10 10<h3 id="2-var和函数的提前声明"><a href="#2-var和函数的提前声明" class="headerlink" title="2,var和函数的提前声明"></a>2,var和函数的提前声明</h3></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); </span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(a); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>function a() {} </li><li>2</li><li>var和function是会提前声明的.而且function是优先于var声明的(如果同时存在的话),所以刚开始输出的就是一个funciton,接着往下执行a进行重新赋值了,故第二次输出的是2；</li></ul><h3 id="3，局部变量和全局变量"><a href="#3，局部变量和全局变量" class="headerlink" title="3，局部变量和全局变量"></a>3，局部变量和全局变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (f === <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line">  c = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br></pre></td></tr></table></figure><ul><li>输出 10 报错 30</li><li>这是个我犯了很久的错误，很长一段时间我都以为{…}内的新声明的变量是局部变量，后来我才发现function内的新声明的变量才是局部变量，而没有用var声明的变量在哪里都是全局变量。再次提醒切记只有function(){}内新声明的才能是局部变量，while{…}、if{…}、for(..) 之内的都是全局变量（除非本身包含在function内）。</li></ul><h3 id="4，变量隐式声明"><a href="#4，变量隐式声明" class="headerlink" title="4，变量隐式声明"></a>4，变量隐式声明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="string">'a'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><ul><li>10</li><li>funciton和var会提前声明,而其实{…}内的变量也会提前声明，于是代码还没执行前a已经被声明了。所以 ‘a’ in window会返回true,a被赋值</li></ul><h3 id="5，给基本类型数据添加属性，不报错，但取值时是undefined"><a href="#5，给基本类型数据添加属性，不报错，但取值时是undefined" class="headerlink" title="5，给基本类型数据添加属性，不报错，但取值时是undefined"></a>5，给基本类型数据添加属性，不报错，但取值时是undefined</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">a.pro = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.pro + a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'hello'</span>;</span><br><span class="line">s.pro = <span class="string">'world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(s.pro + s);</span><br></pre></td></tr></table></figure><ul><li>NaN undefinedhello</li><li>给基本类型数据加属性不报错，但是引用的话返回undefined,10+undefined返回NaN,而undefined和string相加时转变成了字符串</li></ul><h4 id="6，函数声明优先于变量声明"><a href="#6，函数声明优先于变量声明" class="headerlink" title="6，函数声明优先于变量声明"></a>6，函数声明优先于变量声明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fn);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> fn;</span><br></pre></td></tr></table></figure><ul><li>function</li><li>因为函数声明优于变量声明。我们知道在代码逐行执行前，函数声明和变量声明会提前进行，而函数声明又会优于变量声明，这里的优于可以理解为晚于变量声明后，如果函数名和变量名相同，函数声明就能覆盖变量声明。所以以上代码将函数声明和变量声明调换顺序还是一样结果。</li></ul><h4 id="7-判断一个字符串中出现次数最多的字符，并统计次数"><a href="#7-判断一个字符串中出现次数最多的字符，并统计次数" class="headerlink" title="7,判断一个字符串中出现次数最多的字符，并统计次数"></a>7,判断一个字符串中出现次数最多的字符，并统计次数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'aaabbbcccaaabbbaaa'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> letter;</span><br><span class="line"><span class="keyword">var</span> maxn = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(obj[s[i]]) &#123;</span><br><span class="line">            obj[s[i]] ++;</span><br><span class="line">            <span class="keyword">if</span>(obj[s[i]] &gt; maxn) &#123;</span><br><span class="line">                maxn = obj[s[i]];</span><br><span class="line">                letter = s[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj[s[i]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(obj[s[i]] &gt; maxn) &#123;</span><br><span class="line">                maxn = obj[s[i]];</span><br><span class="line">                letter = s[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;letter&#125;</span>:<span class="subst">$&#123;maxn&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><ul><li>正则<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'aaabbbcccaaabbbaaa'</span>;</span><br><span class="line"><span class="keyword">var</span> a = s.split(<span class="string">''</span>);</span><br><span class="line">a.sort();</span><br><span class="line">s = a.join(<span class="string">''</span>);</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/(\w)\1*/g</span>;</span><br><span class="line"><span class="keyword">var</span> ans = s.match(pattern);</span><br><span class="line">ans.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.length &lt; b.length;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(ans[<span class="number">0</span>][<span class="number">0</span>] + <span class="string">':'</span> + ans[<span class="number">0</span>].length);</span><br></pre></td></tr></table></figure></li></ul><h4 id="8，-经典闭包"><a href="#8，-经典闭包" class="headerlink" title="8， 经典闭包"></a>8， <a href="https://juejin.im/post/58f558efac502e006c3e5c97" target="_blank" rel="noopener">经典闭包</a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--html--&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;这是第<span class="number">1</span>个&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;这是第2个&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;这是第<span class="number">3</span>个&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;这是第4个&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!--js--&gt;</span></span><br><span class="line"><span class="regexp">一：</span></span><br><span class="line"><span class="regexp">for(var i = 0; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="regexp">    lis[i].index = i;</span></span><br><span class="line"><span class="regexp">    lis[i].onclick = function() &#123;</span></span><br><span class="line"><span class="regexp">      alert(this.index);</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">二:</span></span><br><span class="line"><span class="regexp">for(var i = 0; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="regexp">    (function(i) &#123;</span></span><br><span class="line"><span class="regexp">      lis[i].onclick = function() &#123;</span></span><br><span class="line"><span class="regexp">        alert(i);</span></span><br><span class="line"><span class="regexp">      &#125;;</span></span><br><span class="line"><span class="regexp">    &#125;)(i); </span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">三：</span></span><br><span class="line"><span class="regexp">for(let i = 0; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="regexp">    lis[i].onclick = function() &#123;</span></span><br><span class="line"><span class="regexp">    alert(i);</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>从0开始隔10s按顺序出现’第一次出现’,’第二次出现’,’第三次出现‘<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> datas = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>];</span><br><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">    <span class="comment">//    const index = i;</span></span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        <span class="keyword">let</span> timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(datas[i]);</span><br><span class="line">        &#125;, <span class="number">10000</span> * i)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(datas[i]);</span><br><span class="line">        &#125;, <span class="number">10000</span> * i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="9，请编写一个JavaScript函数-parseQueryString，它的用途是把URL参数解析为一个对象，如：-var-url-“http-witmax-cn-index-php-key0-0-amp-key1-1-amp-key2-2″"><a href="#9，请编写一个JavaScript函数-parseQueryString，它的用途是把URL参数解析为一个对象，如：-var-url-“http-witmax-cn-index-php-key0-0-amp-key1-1-amp-key2-2″" class="headerlink" title="9，请编写一个JavaScript函数 parseQueryString，它的用途是把URL参数解析为一个对象，如： var url = “http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2″"></a>9，请编写一个JavaScript函数 parseQueryString，它的用途是把URL参数解析为一个对象，如： var url = “<a href="http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2″" target="_blank" rel="noopener">http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2″</a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseQueryString</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> a = url.split(<span class="string">'?'</span>);</span><br><span class="line">  <span class="keyword">if</span>(a.length === <span class="number">1</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="keyword">var</span> b = a[<span class="number">1</span>].split(<span class="string">'&amp;'</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, length = b.length; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> c = b[i].split(<span class="string">'='</span>);</span><br><span class="line">    obj[c[<span class="number">0</span>]] = c[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = parseQueryString(url);</span><br><span class="line"><span class="built_in">console</span>.log(obj.key0, obj.key1, obj.key2);  <span class="comment">// 0 1 2</span></span><br></pre></td></tr></table></figure><h4 id="10-this"><a href="#10-this" class="headerlink" title="10,this"></a>10,this</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> baz=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> bazz=&#123;</span><br><span class="line">   baz: <span class="number">2</span>,</span><br><span class="line">   getbaz: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.baz</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bazz.getbaz())</span><br><span class="line"><span class="keyword">var</span> g=bazz.getbaz;</span><br><span class="line"><span class="built_in">console</span>.log(g());</span><br><span class="line">第一个输出<span class="number">2</span>，第二个输出<span class="number">3</span>,函数作为对象本身属性调用的时候<span class="keyword">this</span>指向对象，作为普通函数调用的时候就指向全局了</span><br></pre></td></tr></table></figure><h4 id="11，数组方法"><a href="#11，数组方法" class="headerlink" title="11，数组方法"></a>11，数组方法</h4><ul><li>数组排序:写一个js函数,将数组对象按照一定的顺序进行排序，且可通过参数决定升降序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"first"</span>,</span><br><span class="line">        <span class="string">"index"</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"second"</span>,</span><br><span class="line">        <span class="string">"index"</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"third"</span>,</span><br><span class="line">        <span class="string">"index"</span>: <span class="number">3</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"fourth"</span>,</span><br><span class="line">        <span class="string">"index"</span>: <span class="number">4</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">property</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[property] - a[property];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(list.sort(compare(<span class="string">'index'</span>)))</span><br></pre></td></tr></table></figure><h4 id="12-求一个字符串的字节长度"><a href="#12-求一个字符串的字节长度" class="headerlink" title="12,求一个字符串的字节长度"></a>12,求一个字符串的字节长度</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetBytes</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len = str.length;</span><br><span class="line">        <span class="keyword">var</span> bytes = len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charCodeAt(i) &gt; <span class="number">255</span>) bytes++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">alert(GetBytes(<span class="string">"你好,as"</span>));</span><br><span class="line">str = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">0</span>)); <span class="comment">// 104, 返回指定索引处字符的 Unicode 数值,大于255为中文</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">0</span>)); <span class="comment">// h, 返回指定位置的字符,</span></span><br></pre></td></tr></table></figure><h4 id="13-jsonp原理及过程"><a href="#13-jsonp原理及过程" class="headerlink" title="13 jsonp原理及过程"></a>13 jsonp原理及过程</h4><ul><li>利用<script>标签没有跨域限制的“漏洞”（历史遗迹啊）来达到与第三方通讯的目的。</li><li>当需要通讯时，本站脚本创建一个<script>元素，地址指向第三方的API网址，形如 <script src="http://www.example.net/api?param1=1&param2=2"></script></li><li>并提供一个回调函数来接收数据（函数名可约定，或通过地址参数传递）。</li><li>第三方产生的响应为json数据的包装（故称之为jsonp，即json padding），形如：callback({“name”:”hax”,”gender”:”Male”})这样浏览器会调用callback函数，并传递解析后json对象作为参数。本站脚本可在callback函数里处理所传入的数据。</li></ul><h4 id="14-link和-import区别"><a href="#14-link和-import区别" class="headerlink" title="14, link和@import区别"></a>14, link和@import区别</h4><ul><li>link属于html标签，而@import是css提供的。</li><li>页面被加载时，link会同时被加载，而@import引用的css会等到页面加载结束后加载。</li><li>link是html标签，因此没有兼容性，而@import只有IE5以上才能识别。</li><li>link方式样式的权重高于@import的</li></ul><h3 id="15-一个页面从输入url到页面加载显示完成-这个过程都发生了什么"><a href="#15-一个页面从输入url到页面加载显示完成-这个过程都发生了什么" class="headerlink" title="15,一个页面从输入url到页面加载显示完成,这个过程都发生了什么?"></a>15,一个页面从输入url到页面加载显示完成,这个过程都发生了什么?</h3><ul><li>1,浏览器开启一个线程来处理这个请求</li><li>2,查找浏览器缓存(浏览器缓存-系统缓存-路由器缓存)</li><li>3,DNS解析,查找该域名对应的IP地址,重定向(301),</li><li>4,向真实IP地址服务器发出tcp连接,tcp三次握手</li><li>5,握手成功后,进行http协议会话,浏览器发送报头</li><li>6,进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;</li><li>7,进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;</li><li>8,处理结束回馈报头，将数据返回至浏览器;</li><li>9,浏览器开始下载html文档(响应报头，状态码200)，同时设置缓存;</li><li>10,之后浏览器对整个 HTML 结构进行解析，形成 DOM 树；与此同时，它还需要对相应的 CSS 文件进行解析，形成 CSS 树（CSSOM）。</li><li>11,得到绘制树之后，需要计算每个结点在页面中的位置，这一个过程称为layout </li></ul><p>浏览器这边做的工作大致分为以下几步：<br>加载：根据请求的URL进行域名解析，向服务器发起请求，接收文件（HTML、JS、CSS、图象等）。<br>解析：对加载到的资源（HTML、JS、CSS等）进行语法解析，建议相应的内部数据结构（比如HTML的DOM树，JS的（对象）属性表，CSS的样式规则等等）</p><h3 id="16-TCP传输的三次握手四次挥手策略"><a href="#16-TCP传输的三次握手四次挥手策略" class="headerlink" title="16,TCP传输的三次握手四次挥手策略"></a>16,TCP传输的三次握手四次挥手策略</h3><blockquote><p>三次握手 SYN和ACK</p></blockquote><p>发送端首先发送一个带SYN标志的数据包给对方。接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。 最后，发送端再回传一个带ACK标志的数据包，代表“握手”结束。 若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。</p><blockquote><p>四次挥手</p><ul><li>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。</li><li>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。</li><li>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</li><li>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</li></ul></blockquote><h3 id="17-new操作符到底干了什么-深入了解"><a href="#17-new操作符到底干了什么-深入了解" class="headerlink" title="17, new操作符到底干了什么?深入了解"></a>17, new操作符到底干了什么?<a href="http://www.cnblogs.com/onepixel/p/5043523.html" target="_blank" rel="noopener">深入了解</a></h3><ul><li>1,创建一个空对象,而且this变量引用该对象,同时还继承了该函数的原型.</li><li>2,属性和方法被加入到this引用的对象中,</li><li>3,新创建的对象由this所引用,而且最后隐式的返回this<h3 id="18-null和undefined的区别"><a href="#18-null和undefined的区别" class="headerlink" title="18, null和undefined的区别?"></a>18, null和undefined的区别?</h3></li></ul><blockquote><p>undefined</p><ul><li>(1)变量被声明了,但是没有赋值,就等于undefined</li><li>(2)调用函数时,应该提供的参数没有提供,该参数等于undefined</li><li>(3)对象没有赋值的属性,该属性的值为undefined</li><li>(4)函数没有返回值时,默认返回undefined<br>null</li><li>(1)作为函数的参数,表示该函数的参数不是对象</li><li>(2)作为对象原型链的终点</li></ul></blockquote><h3 id="19-js的基本数据类型"><a href="#19-js的基本数据类型" class="headerlink" title="19, js的基本数据类型"></a>19, js的基本数据类型</h3><p>Number,String,Boolean,Null, Undefined,Object,Symbol</p><h3 id="20-DOM怎样添加-移除-复制-和创建节点"><a href="#20-DOM怎样添加-移除-复制-和创建节点" class="headerlink" title="20,DOM怎样添加,移除,复制,和创建节点"></a>20,DOM怎样添加,移除,复制,和创建节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建新节点</span></span><br><span class="line">createDocumentFragment(); <span class="comment">// 创建一个DOM片段</span></span><br><span class="line">createElement(); <span class="comment">// 创建一个具体的元素</span></span><br><span class="line">createTextNode(); <span class="comment">// 创建一个文本节点</span></span><br><span class="line"><span class="comment">//添加,移除,替换</span></span><br><span class="line">appendChild()</span><br><span class="line">removeChild()</span><br><span class="line">replaceChild()</span><br><span class="line">insertBefore() <span class="comment">// 在已有的子节点前插入一个新的子节点</span></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line">getElementByTagName() <span class="comment">// 通过标签名称</span></span><br><span class="line">getElementByName() <span class="comment">// 通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)</span></span><br><span class="line">getElementById() <span class="comment">// 通过元素ID,唯一性</span></span><br></pre></td></tr></table></figure><h4 id="参考总结"><a href="#参考总结" class="headerlink" title="参考总结"></a>参考总结</h4><p><a href="http://www.cnblogs.com/zichi/p/4359786.html" target="_blank" rel="noopener">这10道javaScript笔试题你都会么</a><br><a href="https://segmentfault.com/a/1190000007602848" target="_blank" rel="noopener">正则</a><br><a href="http://www.cnblogs.com/xxcanghai/p/5205998.html" target="_blank" rel="noopener">2016年十家公司面试小记</a><br><a href="http://www.alloyteam.com/2012/11/javascript-throttle/" target="_blank" rel="noopener">浅谈javascript的函数节流</a><br><a href="https://github.com/jayli/jayli.github.com/issues/19" target="_blank" rel="noopener">面试题1</a><br><a href="https://github.com/hawx1993/Front-end-Interview-questions" target="_blank" rel="noopener">面试题2</a><br><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese" target="_blank" rel="noopener">面试题3</a><br><a href="https://github.com/jawil/blog/issues/22" target="_blank" rel="noopener">html与css</a><br><a href="https://segmentfault.com/a/1190000010631325?_ea=2359607" target="_blank" rel="noopener">道阻且长啊TAT(前端面试总结),17年春招面试总结</a></p><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p><a href="http://wangyaxing.deercv.com/" target="_blank" rel="noopener">aboutme</a><br><a href="https://github.com/funnycoderstar" target="_blank" rel="noopener">github</a><br><a href="http://wangyaxing.cn/">blog</a></p>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于斐波那契数列</title>
      <link href="/2017/04/09/2017-04-09-%E5%85%B3%E4%BA%8E%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
      <url>/2017/04/09/2017-04-09-%E5%85%B3%E4%BA%8E%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3463546863,3949490182&amp;fm=26&amp;gp=0.jpg" alt="title"></p><h1 id="用js实现斐波那契数列"><a href="#用js实现斐波那契数列" class="headerlink" title="用js实现斐波那契数列"></a>用js实现斐波那契数列</h1><p>首先介绍一下，斐波那契数列(Fibonacci sequence)又称黄金分割数列，斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F(0)=1，F(1)=1, F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用，<br><a id="more"></a></p><ul><li><p>斐波那契数列指的是这样一个数列 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233，377，610，987，1597，2584，4181，6765，10946，17711，28657，46368……..</p></li><li><p>这个数列从第3项开始，每一项都等于前两项之和。</p><h2 id="实现方法一"><a href="#实现方法一" class="headerlink" title="实现方法一"></a>实现方法一</h2></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>  <span class="keyword">if</span>(n ===<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">以上的发法是能想到的最直观的实现，现在我们测试一下他的运行结果。</span><br><span class="line">fib(<span class="number">1</span>);</span><br><span class="line">fib(<span class="number">10</span>)</span><br><span class="line">fib(<span class="number">50</span>);</span><br><span class="line">运行发现n=<span class="number">1</span>时，会快速输出<span class="number">1</span>，n=<span class="number">10</span>,时，运行速度稍慢，但是当n=<span class="number">10</span>时，运行就非常慢，原因是什么呢，因为n=<span class="number">50</span>时，要进行差不多<span class="number">50</span>次的函数调用，每次调用，都会重新走<span class="keyword">if</span>的那三个判断条件，而且每次都是从最开始开始计算，当n越大时，性能越差，所以有没有更好的方法来实现它呢？</span><br></pre></td></tr></table></figure><h2 id="实现方法二"><a href="#实现方法二" class="headerlink" title="实现方法二"></a>实现方法二</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>  <span class="keyword">if</span>(n ===<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">           current = b + a;</span><br><span class="line">           a = b;</span><br><span class="line">           b = current;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">方法二与方法一不同之处在于，最后一个判断加入了一个<span class="keyword">for</span>循环，current = b + a;当前享等于前两项的和，a = b;把前一项的值赋给a(第前两项)，b = current;把当前值赋给前b(第前一项)，这样当n&gt;<span class="number">1</span>时，只需要在第三个判断走一个循环可以，而不需要一直调用函数，这样做比方法一性能上优化了很多，但是还有没有更好的方法呢?</span><br></pre></td></tr></table></figure><h2 id="实现方法三"><a href="#实现方法三" class="headerlink" title="实现方法三"></a>实现方法三</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cache = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> cache[n] === <span class="string">'number'</span></span><br><span class="line">           ? cache[n]</span><br><span class="line">           : cache[n] = fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">该方法的实现利用了缓存，这样每次计算的时候，都会把计算出的值存放到cache这个缓存中，等下次传入较大的n时，如果缓存中有需要的值，则直接用缓存中的值，这种方法大大提高了函数的性能。</span><br><span class="line">还存在一个问题,fib(<span class="number">10000</span>) = <span class="literal">Infinity</span>;这有是为什么呢，</span><br><span class="line">我们可以从js中数值的取值范围考虑，如何知道js中数值的范围呢，</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE, <span class="built_in">Number</span>.MIN_VALUE); <span class="comment">//取得最大和最小的数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER, <span class="built_in">Number</span>.MIN_SAFE_INTEGER);取得最大和最小的整数</span><br><span class="line"><span class="number">1.7976931348623157e+308</span> <span class="number">5e-324</span></span><br><span class="line"><span class="number">9007199254740991</span> <span class="number">-9007199254740991</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">400</span>));</span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">500</span>));</span><br><span class="line"><span class="number">1.760236806450138e+83</span></span><br><span class="line"><span class="number">1.394232245616977e+104</span></span><br><span class="line">n 在大于<span class="number">500</span>的时候差不多已超出范围</span><br></pre></td></tr></table></figure><p>如果有更好的方法，欢迎指正</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
