(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{254:function(a,n,s){"use strict";s.r(n);var e=s(0),r=Object(e.a)({},(function(){var a=this,n=a.$createElement,s=a._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"node-js中package-json中库的版本号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-js中package-json中库的版本号","aria-hidden":"true"}},[a._v("#")]),a._v(" Node.js中package.json中库的版本号")]),a._v(" "),s("h2",{attrs:{id:"和-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#和-的区别","aria-hidden":"true"}},[a._v("#")]),a._v(" ~和^的区别")]),a._v(" "),s("p",[a._v("最近总是碰到一些问题, 在本地好好的, 在线上就出现了问题, 本地也一直复现不了, 后来把node_modules目录删除了之后, 重新安装, 就在本地复现了这个问题,可以看了git history, 并没有人修改package.json中的版本号,于是认真的了解了一下package.json中库的版本号;")]),a._v(" "),s("p",[a._v("~和^的区别")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"babel-loader"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"^7.1.1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"body-parser"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"~1.15.2"')]),a._v("\n")])])]),s("p",[a._v("npm install --save xxx, 会优先考虑使用 "),s("code",[a._v("^")]),a._v("而不是"),s("code",[a._v("~")])]),a._v(" "),s("p",[a._v("以版本号x.y.z为例\nx:主版本号, 当你做了不兼容的API修改\ny:次版本号, 当你做了向下兼容的功能性问题\nz:修订号, 当你做了向下兼容的问题修复")]),a._v(" "),s("p",[s("code",[a._v("~x.y.z")]),a._v(", 会更新到y最新的版本, 例如 "),s("code",[a._v("body-parser")]),a._v(": ~1.15.2, 这个库会去匹配到1.15.z的最新版本, 如果出现了1.16.0, 则不会自动升级\n"),s("code",[a._v("^x.y.z")]),a._v(", 会更新到x的最新版本, 例如 "),s("code",[a._v("babel-loader")]),a._v(": ^7.1.1, 这个库会去匹配7.y.z的最新版本, 如果出现了8.1.1, 则不会自动升级")]),a._v(" "),s("p",[a._v("可以参考"),s("a",{attrs:{href:"https://github.com/npm/node-semver#caret-ranges-123-025-004",target:"_blank",rel:"noopener noreferrer"}},[a._v("npm官方给出的解释"),s("OutboundLink")],1),a._v("\n^1.2.3 := >=1.2.3 <2.0.0\n^0.2.3 := >=0.2.3 <0.3.0\n^0.0.3 := >=0.0.3 <0.0.4")]),a._v(" "),s("p",[a._v("大多数情况下遵循这种版本号规则的依赖包都没问题, 但是npm是开源的世界, 并不是所有的都严格遵循这种规则, 所以会出现上述的问题;")]),a._v(" "),s("h2",{attrs:{id:"为什么需要package锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要package锁","aria-hidden":"true"}},[a._v("#")]),a._v(" 为什么需要package锁")]),a._v(" "),s("p",[a._v("有如下几个可能原因, 在某些情况下, package.json是无法保证每个人自己电脑上执行的 npm install 后安装的依赖版本都是一样的\n1.如果package.json中记录的依赖包的版本是一个版本范围, 一旦执行npm i 会导致这个包更新到最新版本\n2.就算你依赖了一个固定版本的包(如A 1.1.1), 但你依赖的包A可能依赖其他的包B,而A在声明依赖时可能也使用了semser命名, 如 ^1.2.3, 如果包B release 了新版, 也会导致包B会安装到更新版本\n3.不同人使用的npm程序的版本不同")]),a._v(" "),s("p",[a._v("如果依赖包的版本不一致, 会导致开发环境和生产环境产品不一致的行为; 或者导致不同团队成员之前也产品环境差异")]),a._v(" "),s("h2",{attrs:{id:"如何解决包版本不一致的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何解决包版本不一致的情况","aria-hidden":"true"}},[a._v("#")]),a._v(" 如何解决包版本不一致的情况")]),a._v(" "),s("h3",{attrs:{id:"_1-npm-使用package-lock-json文件来解决这个问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-npm-使用package-lock-json文件来解决这个问题","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.npm 使用package-lock.json文件来解决这个问题")]),a._v(" "),s("p",[a._v("执行npm install会自动生成package.json文件, 只要执行普通的安装, 更新等可能会修改 package.json的npm命令, 都会自动同步修改package-lock.json文件")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("npm install xxx\nnpm rm xxx\nnpm update xxx\n")])])]),s("h3",{attrs:{id:"_2-npm-还支持npm-shrinkwrap-json-和package-lock-json功能完全一样"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-npm-还支持npm-shrinkwrap-json-和package-lock-json功能完全一样","aria-hidden":"true"}},[a._v("#")]),a._v(" 2.npm 还支持"),s("a",{attrs:{href:"https://www.npmjs.cn/cli/shrinkwrap/",target:"_blank",rel:"noopener noreferrer"}},[a._v("npm-shrinkwrap.json"),s("OutboundLink")],1),a._v(", 和package-lock.json功能完全一样")]),a._v(" "),s("p",[a._v("执行 "),s("code",[a._v("npm shrinkwrap")]),a._v("来生成npm-shrinkwrap.json\n此命令将根据 package-lock.json 文件创建一个新的或覆盖已有的 npm-shrinkwrap.json 文件。 此命令创建和更新的文件将优先于任何其他现有或将有的 package-lock.json 文件。")]),a._v(" "),s("h3",{attrs:{id:"_3-使用yarn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用yarn","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.使用yarn")]),a._v(" "),s("p",[a._v("使用yarn主要有一下优点")]),a._v(" "),s("ul",[s("li",[a._v("快速: 会缓存它下载的每个包，无需重复下载；能并行化操作以最大资源利用率")]),a._v(" "),s("li",[a._v("可靠:使用格式详尽而又简洁的 lockfile文件 和确定性算法来安装依赖，能够保证在一个系统上的运行的安装过程也会以同样的方式运行在其他系统上。")]),a._v(" "),s("li",[a._v("安全: 安装包被执行前校验其完整性")])]),a._v(" "),s("blockquote",[s("p",[a._v("yarn速度比npm快一些, yarn的锁文件是yarn.lock, 能解决包版本不一致的情况")])])])}),[],!1,null,null,null);n.default=r.exports}}]);