(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{261:function(t,a,s){"use strict";s.r(a);var r=s(0),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"xss"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xss","aria-hidden":"true"}},[t._v("#")]),t._v(" XSS")]),t._v(" "),s("p",[t._v("什么是XSS ？\n分类？\nXSS攻击原理？\n如何防御？")]),t._v(" "),s("h2",{attrs:{id:"xss进阶"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xss进阶","aria-hidden":"true"}},[t._v("#")]),t._v(" XSS进阶")]),t._v(" "),s("p",[t._v("举例说明什么是 XSS Payload\ncookie劫持， 但是在Set-Cookie时植入HttpOnly标识会失效\n构造GET/POST请求\n1.创建并使用带有src的标签来发起一个GET请求\n2.模拟POST请求（1. 创建一个form表单, 自动提交； 2.使用XMLHttpRequest发送一个POST请求）\nXSS payload读取QQ邮箱的列表")]),t._v(" "),s("h2",{attrs:{id:"xss防御"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xss防御","aria-hidden":"true"}},[t._v("#")]),t._v(" XSS防御")]),t._v(" "),s("p",[t._v("HTTPOnly\n输入检查\n输出检查")]),t._v(" "),s("p",[t._v("XSS本质的原因： “HTML注入”， 用户的数据被当成HTML代码一部分来执行，混淆了原本的语义， 产生新的语义")]),t._v(" "),s("h2",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[t._v("#")]),t._v(" 小结")])])}),[],!1,null,null,null);a.default=e.exports}}]);